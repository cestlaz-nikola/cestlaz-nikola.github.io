<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xmlns:fh="http://purl.org/syndication/history/1.0" xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z (old posts, page 10)</title>
  <id>http://cestlaz.github.io/index-10.atom</id>
  <updated>2018-09-19T23:47:52Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index-10.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-9.atom"/>
  <link rel="previous" type="application/atom+xml" href="http://cestlaz.github.io/index-11.atom"/>
  <link rel="current" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-11.atom"/>
  <link rel="prev-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-9.atom"/>
  <fh:archive/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/index-10.html"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Student Projects 2014 - Let's go to the video tape</title>
    <id>http://cestlaz.github.io/posts/2014-06-23-softdev-videos-2014.html/</id>
    <updated>2014-06-23T00:00:00-04:00</updated>
    <published>2014-06-23T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-06-23-softdev-videos-2014.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Just completed the second time through for my Software Development
course. Last year we had a great time at our Demo Night hosted at
Google.
&lt;/p&gt;

&lt;p&gt;
This year, unfortunately, due to a variety of reasons, we couldn't get
the event together. Still, the kids did great work so I thought I'd
share.
&lt;/p&gt;

&lt;p&gt;
This year, I asked each group to make a short video.
&lt;/p&gt;

&lt;p&gt;
First up, we've got bit&amp;lt;&amp;lt;shift - a search engine for code. Nice idea
and a really slick interface.
&lt;/p&gt;

&lt;div class="center"&gt;
&lt;iframe src="//player.vimeo.com/video/98697078" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="http://vimeo.com/98697078"&gt;bitshift: a source code search engine&lt;/a&gt; from &lt;a href="http://vimeo.com/ear"&gt;Ben Kurtovic&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Next up, we've got Socialpedia - our answer to Klout -
&lt;/p&gt;


&lt;div class="center"&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/uhLZBsZWQGk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
And then Twitch Rock-em-Sock-em Robots - 
&lt;/p&gt;

&lt;div class="center"&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/Am3PTB_FvNs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
There were a bunch of other neat projects including a site that
crowd-sources 311 trash related problems and a version of the game
"Frozen Synapse" where you can program your forces using an embedded
Lisp interpreter.
&lt;/p&gt;

&lt;p&gt;
Very cool stuff.
&lt;/p&gt;

&lt;p&gt;
Good job guys!!!!!
&lt;/p&gt;</summary>
    <category term="csed" label="csed"/>
  </entry>
  <entry>
    <title>What I love about StuyCS</title>
    <id>http://cestlaz.github.io/posts/2014-05-20-wolfram.html/</id>
    <updated>2014-05-20T00:00:00-04:00</updated>
    <published>2014-05-20T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-05-20-wolfram.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
.pic {height:500px;width:500px;}
&lt;/style&gt;


&lt;p&gt;
One of the things I love about StuyCS is that we've built a true Geek culture. 
&lt;/p&gt;

&lt;p&gt;
Last week, we had a last minute visitor - &lt;a href="http://stephenwolfram.com"&gt;Stephen Wolfram&lt;/a&gt;. Well known
for Mathematica and more importantly, Wolfram Alpha, without which
our students wouldn't be able to complete all their homework.
&lt;/p&gt;

&lt;p&gt;
The only problem was that we had about 24 hours from when the visit
was confirmed til the talk was to take place.
&lt;/p&gt;

&lt;p&gt;
It was a little rough, but we pulled it together - convinced the the
administration to let us use the auditorium, sent a letter out to the
teachers and in general get things ready.
&lt;/p&gt;

&lt;p&gt;
I've heard our auditorium holds anywhere between 400 and 800 students â€“ the kids filled the place!!!
&lt;/p&gt;

&lt;div class="center"&gt;
&lt;figure&gt;
&lt;img class="pic" src="http://cestlaz.github.io/img/wolfram/wolfram.jpg"&gt;
&lt;figcaption&gt;Image blurred intentionally&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;
Only at a place like Stuy.
&lt;/p&gt;

&lt;p&gt;
The talk was great talk and the kids followed up with terrific
questions. Dr. Wolfram spoke for about 40 minutes and then stayed to
answer questions for another 40. Had the auditorium not been booked
after school, I think he would have gone on for another hour.
&lt;/p&gt;

&lt;p&gt;
What I loved is here we have a Math/Science/CS guy, but to the  StuyCS students, he's a rock star.
&lt;/p&gt;

&lt;p&gt;
The next day I got comments like:
&lt;/p&gt;

&lt;p&gt;
"That was amazing," "I've heard talks by brilliant people before, but
never a visionary," "He's actually building the future," and "that was
the best hour of my four years at Stuyvesant."
&lt;/p&gt;

&lt;p&gt;
All in all, it was well worth the craziness of putting it together at the last minute.
&lt;/p&gt;</summary>
    <category term="community" label="community"/>
  </entry>
  <entry>
    <title>Dream It, Code It, Win It</title>
    <id>http://cestlaz.github.io/posts/2014-05-01-dream-it.html/</id>
    <updated>2014-05-01T00:00:00-04:00</updated>
    <published>2014-05-01T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-05-01-dream-it.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Last night, I attended the Dream It, Code It, Win It awards. 
&lt;/p&gt;

&lt;p&gt;
I'd actually write up the event but Fred Wilson's already done a
better job at that than I could:
&lt;a href="http://avc.com/2014/05/dream-it-and-code-it/"&gt;http://avc.com/2014/05/dream-it-and-code-it/&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
As Fred stated on his blog, it's a real shame that the high schooler's
didn't get to show off their work but it was great to see that there
were entries from a variety of schools including The Academy for
Software Engineering and The Young Women's Leadership Academy.
&lt;/p&gt;

&lt;p&gt;
As part of the application process, the teams made short videos. Here
are three of the Stuy entries. I'll add the fourth once I get it.
&lt;/p&gt;

&lt;p&gt;
The first two were written by teams in our senior SoftDev class the
third by juniors currently in APCS using mostly what they learned in
the second half of our intro class.
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;


&lt;p&gt;
Cartwheels:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/gJRik3aBxrI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
Tour de City:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/ztRGdRlzNYU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Fun Time Projects:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/r4itvjf7UHY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary>
    <category term="misc" label="misc"/>
  </entry>
  <entry>
    <title>Twitch Coding</title>
    <id>http://cestlaz.github.io/posts/2014-04-10-twitch-coding.html/</id>
    <updated>2014-04-10T00:00:00-04:00</updated>
    <published>2014-04-10T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-04-10-twitch-coding.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
We have the kids write programs in all sorts of ways
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;on paper
&lt;/li&gt;
&lt;li&gt;solo
&lt;/li&gt;
&lt;li&gt;informally in pairs
&lt;/li&gt;
&lt;li&gt;"pair programming"
&lt;/li&gt;
&lt;li&gt;We have them trade code, pick up each others projects, and more.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We do lots of different things to engage the kids in a lot of
different ways and I love it when someone comes up with a new
technique.
&lt;/p&gt;


&lt;p&gt;
My friend, colleague, and incidentally, former student, Sam had such
an idea the other day. Sam started his teaching career at Francis
Lewis High School and it took us a while to convince him to join the
team, but he's been with us for about three years now and he's terrific.
&lt;/p&gt;

&lt;p&gt;
Sam's also our resident gamer so I guess I shouldn't have been
surprised when Sam said he was going to do &lt;a href="http://www.reddit.com/r/twitchplayspokemon/comments/1y94r8/the_history_of_twitch_plays_pokemon/"&gt;Twitch Pokemon&lt;/a&gt; coding with
his classes. It sounded great.
&lt;/p&gt;

&lt;p&gt;
In Twitch Pokemen, users type moves into a chat window and a bot reads
the commands to control a Pokemon. Sam's idea was to apply it to a CS class.
&lt;/p&gt;

&lt;p&gt;
I loved the idea so I tried it in my classes.
&lt;/p&gt;

&lt;p&gt;
First cut, I did it with stacks. We had a basic design in mind and then we started the "Twitch Coding." 
&lt;/p&gt;

&lt;p&gt;
We went up and down the rows. When it was a students turn, they could
either add a word, line, or concept, delete one, or change one.
&lt;/p&gt;

&lt;p&gt;
So, for example, if the state of the code was:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;Node&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;top&lt;/span&gt;;

&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;void&lt;/span&gt; &lt;span style="color: #93E0E3;"&gt;push&lt;/span&gt;(&lt;span style="color: #7CB8BB;"&gt;String&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;s&lt;/span&gt;) {
    &lt;span style="color: #7CB8BB;"&gt;Node&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;n&lt;/span&gt; = &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;Node&lt;/span&gt;(s);
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
a student could:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;add n.setNext(top) to the push routine
&lt;/li&gt;
&lt;li&gt;change public to private in the declaration of top
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Or the somewhat lame
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;add a // above the push declaration line
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
or something else.
&lt;/p&gt;

&lt;p&gt;
If a student gets stuck, it's up to the class to "go Price is Right"
on them and give suggestions.
&lt;/p&gt;

&lt;p&gt;
It worked great in one class, forced in another, and somewhere in the
middle in the third. Overall, I was happy with the results.
&lt;/p&gt;


&lt;p&gt;
We tried it again today as we implemented a queue.
&lt;/p&gt;

&lt;p&gt;
This time, we prepped a little better and the results were better.
&lt;/p&gt;

&lt;p&gt;
The idea needs some fine tuning, but I think it's a fun and different
way to engage the class and I think we'll be playing with twitch
coding some more in the coming months.
&lt;/p&gt;</summary>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
  <entry>
    <title>Announcing SHIP</title>
    <id>http://cestlaz.github.io/posts/2014-04-07-ship-announce.html/</id>
    <updated>2014-04-07T00:00:00-04:00</updated>
    <published>2014-04-07T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-04-07-ship-announce.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;


&lt;p&gt;
It's been a while since my last post.
&lt;/p&gt;

&lt;p&gt;
That's mostly since I've getting things ready for this announcement.
&lt;/p&gt;

&lt;p&gt;
I've talked about our non-profit &lt;a href="http://cstuy.org"&gt;CSTUY&lt;/a&gt; before. Well, we've been hard
at work getting things together for our first summer program:
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;SHIP - Summer Hackers Immersion Program&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
We're really excited about this - taking our years of experience
teaching kids at our schools and taking it to a wider audience.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;SHIP&lt;/b&gt;&lt;/b&gt; is being hosted at St. Joseph's College in Brooklyn and runs from July 7th through July 31.
&lt;/p&gt;

&lt;p&gt;
So, if you know a rising 9th through 12th grader in or around New York City let them know about this great opportuity. 
&lt;/p&gt;


&lt;p&gt;
Information can be found at &lt;a href="http://programs.cstuy.org/ship"&gt;http://programs.cstuy.org/ship&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
And the application is here: &lt;a href="http://programs.cstuy.org/ship-apply"&gt;http://programs.cstuy.org/ship-apply&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Information on our overall plan is here: &lt;a href="http://programs.cstuy.org/ship-outreach"&gt;http://programs.cstuy.org/ship-outreach&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
We're also still raising funds for the program, so if you or someone you know can help, they can contact me or donate directly &lt;a href="http://cstuy.org/webform/donate"&gt;here.&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cstuy" label="cstuy"/>
  </entry>
  <entry>
    <title>Sorting - Subtle Errors</title>
    <id>http://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html/</id>
    <updated>2014-03-17T00:00:00-04:00</updated>
    <published>2014-03-17T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Time to wrap up sorting for a while. We just finished quicksort
having gone through a series of lessons
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;We started with &lt;a href="http://cestlaz.github.io/2014/03/12/select-to-sort.html#.UyJRTh_G8RM"&gt;Quickselect&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;Then we did a quicksort, copying to new arrays during the partition
&lt;/li&gt;
&lt;li&gt;Then finally to an in place quicksort.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
For the final quicksort we used a partition algorithm pretty much the
same as the one described &lt;a href="http://en.wikipedia.org/wiki/Quicksort"&gt;here.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
We started testing using by building a randomly filled array like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span style="color: #7CB8BB;"&gt;Random&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;rnd&lt;/span&gt; = &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;Random&lt;/span&gt;();
&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;a&lt;/span&gt;[] = &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt;[n];
&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; (&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;i&lt;/span&gt;=0;i&amp;lt;&lt;span style="color: #7CB8BB;"&gt;n&lt;/span&gt;;i++) {
    a[i] = rnd.nextInt(100);
}
qsort(a);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And everything seemed terrific.
&lt;/p&gt;

&lt;p&gt;
Just like when we did the mergesort, we started to increase n. First
20, then 100, then 1000 and so on. 
&lt;/p&gt;

&lt;p&gt;
All of a sudden, we started getting a stack overflow. We only made it
to about 450,000. Mergesort got to arrays of about 40,000,000 items
before we started to have memory problems.
&lt;/p&gt;

&lt;p&gt;
Our algorithm was sound. It worked on everything up to about
450,000. Since Mergesort worked well into the tens of millions, quicksort
should have as well.
&lt;/p&gt;

&lt;p&gt;
What was wrong? 
&lt;/p&gt;

&lt;p&gt;
We changed the code a bit:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span style="color: #7CB8BB;"&gt;Random&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;rnd&lt;/span&gt; = &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;Random&lt;/span&gt;();
&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;a&lt;/span&gt;[] = &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt;[n];
&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; (&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;i&lt;/span&gt;=0;i&amp;lt;&lt;span style="color: #7CB8BB;"&gt;n&lt;/span&gt;;i++) {
    a[i] = rnd.nextInt(10000);
}
qsort(a);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Instead of an array of 450,000 values between 0 and 100, our elements
now went fro 0 to 10,000. 
&lt;/p&gt;

&lt;p&gt;
All of a sudden things were good.
&lt;/p&gt;

&lt;p&gt;
Why? It wasn't long before the student saw that 500,000 elements with
values between 0 and 100 meant lots of duplicates. Our partition
didn't account for that. If we had duplicate pivots, only one is moved
into place, the rest are left unsorted taking us closer to worst case
performance and blowing our stack.
&lt;/p&gt;

&lt;p&gt;
Fortunately there was an easy fix: 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #93E0E3;"&gt;partition&lt;/span&gt;(&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt;[] &lt;span style="color: #DFAF8F;"&gt;a&lt;/span&gt;, &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;l&lt;/span&gt;, &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;r&lt;/span&gt;) {
    &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;tmp&lt;/span&gt;;
    &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;pivotIndex&lt;/span&gt; = l+rnd.nextInt(r-l);
    &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;pivot&lt;/span&gt; = a[pivotIndex];
    tmp = a[r];
    a[r] = a[pivotIndex];
    a[pivotIndex]=tmp;

    &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;wall&lt;/span&gt;=l;
    &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;pcount&lt;/span&gt;=1;
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; (&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;i&lt;/span&gt;=l;i&amp;lt;&lt;span style="color: #7CB8BB;"&gt;r&lt;/span&gt;;i++) {
        &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;if&lt;/span&gt; (a[i]&amp;lt;pivot) {
            tmp = a[i];
            a[i]=a[wall];
            a[wall]=tmp;
            wall++;
        }
        &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;if&lt;/span&gt; (a[i]==pivot)
            pcount++;
    }
    &lt;span style="color: #5F7F5F;"&gt;// &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;now copy over all the pivots&lt;/span&gt;
    &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;rwall&lt;/span&gt;=wall;
    tmp = a[rwall];
    a[wall]=a[r];
    a[r]=tmp;
    rwall++;
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; (&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;i&lt;/span&gt;=rwall+1;i&amp;lt;=r;i++) {
        &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;if&lt;/span&gt; (a[i]==pivot) {
            tmp = a[rwall];
            a[rwall]=a[i];
            a[i]=tmp;
            rwall++;
        }
    }
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;return&lt;/span&gt; (wall+rwall)/2;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
When we partition the array, move all the elements equal to the
partition to the middle of the array.
&lt;/p&gt;


&lt;p&gt;
That did the trick.
&lt;/p&gt;

&lt;p&gt;
All of a sudden we were blazing through data sets upwards of
100,000,000 elements.
&lt;/p&gt;


&lt;p&gt;
We're done for sorting for a while, at least until the heapsort but
it's been a fun couple of weeks
&lt;/p&gt;</summary>
    <category term="algorithms" label="algorithms"/>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
  <entry>
    <title>From selection to sorting</title>
    <id>http://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/</id>
    <updated>2014-03-12T00:00:00-04:00</updated>
    <published>2014-03-12T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/"/>
    <summary type="html">&lt;script type="text/javascript" src="http://orgmode.org/mathjax/MathJax.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/assets/static/mj.js"&gt;&lt;/script&gt;

&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
When I first saw the &lt;a href="http://en.wikipedia.org/wiki/Quicksort"&gt;quicksort&lt;/a&gt; it was in an algorithms class back in
the day. We first learned the quicksort, then choosing a good pivot
element and then as an afterthought we did &lt;a href="http://en.wikipedia.org/wiki/Quickselect"&gt;quickselect&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Fast forward to teaching. I was never really happy teaching
quicksort. Mergesort is easy to motivate and it's pretty easy to
write. Quicksort always felt a little forced. 
&lt;/p&gt;

&lt;p&gt;
I thought I'd try switching things up this time and doing quickselect
first.
&lt;/p&gt;

&lt;p&gt;
The motivating problem: find the K&lt;sup&gt;th&lt;/sup&gt; smallest item in a list - in our
case the list is an array of ints.
&lt;/p&gt;

&lt;p&gt;
I want to start with the least efficient algorithm so I stack the
deck. I remind them that we've been finding the smallest item in a
list for two years now.
&lt;/p&gt;

&lt;p&gt;
They don't disappoint and suggest something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #DFAF8F;"&gt;L&lt;/span&gt; = [10,3,28,82,14,42,66,74,81]

&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: #93E0E3;"&gt;findKth&lt;/span&gt;(L,k):
    &lt;span style="color: #DFAF8F;"&gt;omits&lt;/span&gt;=[]
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; i &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;in&lt;/span&gt; &lt;span style="color: #DCDCCC; font-weight: bold;"&gt;range&lt;/span&gt;(k):
        &lt;span style="color: #DFAF8F;"&gt;ans&lt;/span&gt;=&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;max&lt;/span&gt;(L)
        &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; item &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;in&lt;/span&gt; L:
            &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;if&lt;/span&gt; item &amp;lt; ans &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;and&lt;/span&gt; item &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;not&lt;/span&gt; &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;in&lt;/span&gt; omits:
                &lt;span style="color: #DFAF8F;"&gt;ans&lt;/span&gt;=item
        omits.append(ans)
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;return&lt;/span&gt; ans

&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;print&lt;/span&gt; findKth(L,3)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Clearly an \(O(n^2)\) algorithm.
&lt;/p&gt;


&lt;p&gt;
Can we do better?
&lt;/p&gt;

&lt;p&gt;
Certainly.
&lt;/p&gt;

&lt;p&gt;
The students then suggest sorting the data set first. If we use
mergesort, we can sort in \(O(nLg (n))\) time. This lead to a great
conversation about sorting being so fast it's practically free and
that you don't have to hard code everything from scratch. Not only is
sorting the data set then plucking the k&lt;sup&gt;th&lt;/sup&gt; item out much faster, if
you already have a sort written or if you use your language's
library's sort, it's much easier as well:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: #93E0E3;"&gt;findKth&lt;/span&gt;(L,k):
    &lt;span style="color: #DFAF8F;"&gt;tmp&lt;/span&gt; = &lt;span style="color: #DCDCCC; font-weight: bold;"&gt;sorted&lt;/span&gt;(L)
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;return&lt;/span&gt; tmp[k]
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
But we can do even better. So now we talk about &lt;b&gt;quickselect&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
We pick a random pivot, partition the list a la quicksort (reorder the
list such that all items less than the pivot are to its left, and all
items greater than the pivot are to its right).
&lt;/p&gt;

&lt;p&gt;
We now know that after partitioning. the pivot is in it's exact
location. If its index is &lt;b&gt;k&lt;/b&gt; then we're done. If not, we can
recursively &lt;b&gt;quickselect&lt;/b&gt; on either the left or right side. 
&lt;/p&gt;

&lt;p&gt;
Pretty cool, but is it faster?
&lt;/p&gt;

&lt;p&gt;
It's easy to see that if we keep choosing a bad pivot (the smallest or
largest in the list), each iteration takes \(n\) time to partition and
each iteration takes one item out of contention. This takes us back to
\(O(n^2)\). 
&lt;/p&gt;

&lt;p&gt;
Howeverâ€¦
&lt;/p&gt;

&lt;p&gt;
If we choose a good partition â€“ at the middle of the list, each
partition takes less and less time. We get a run time of:
&lt;/p&gt;

&lt;p&gt;
\(n+\frac{n}{2} +\frac{n}{4}+\frac{n}{8}+\dots\) and since \(\frac{n}{2}
+\frac{n}{4}+\frac{n}{8}\dots=n\) this becomes an \(O(2n)\), or \(O(n)\) algorithm.
&lt;/p&gt;


&lt;p&gt;
That's really cool.
&lt;/p&gt;

&lt;p&gt;
Homework was the actual implementation.
&lt;/p&gt;

&lt;p&gt;
I think this might be a better way to approach quicksort. It seems
less forced, plus the class gets to go through the exercise of taking
an algorithm form \(O(n^2)\) to \(O(nlg(n))\) to \(O(n)\).
&lt;/p&gt;


&lt;p&gt;
Next, moving to the quicksort and also showing that we can indeed
avoid those really bad pivots.
&lt;/p&gt;


&lt;h4&gt;Addendum&lt;/h4&gt;

We moved to quicksort today and overall I'm happy with this
approach. The only thing I think needs tweaking is going from the idea
of partitioning to Java code. Java makes it somewhat of a bear.
&lt;br&gt;</summary>
    <category term="algorithms" label="algorithms"/>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
  <entry>
    <title>The new SAT - the more things stay the same</title>
    <id>http://cestlaz.github.io/posts/2014-03-11-sat-the-same.html/</id>
    <updated>2014-03-11T00:00:00-04:00</updated>
    <published>2014-03-11T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-03-11-sat-the-same.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
.large {font-size:200%}
&lt;/style&gt;

&lt;div class="large"&gt;
&lt;b&gt;Plus Ã§a change, plus c'est la mÃªme chose&lt;/b&gt;
&lt;/div&gt;

&lt;p&gt;
The more things change, the more they stay the same.
&lt;/p&gt;

&lt;p&gt;
Last week we heard all about the new SAT. Going back to 1600 points,
writing optional, and reworking the verbal section.
&lt;/p&gt;

&lt;p&gt;
Immediate responses ranged from the usual fact that SAT doesn't correlate
with college success to the idea that the motive was not to improve
the test but rather to recapture market share from the ACT.
&lt;/p&gt;

&lt;p&gt;
Personally, I'm not a fan of the test but I do see the desire to have
some consistent measure across students and schools. While an "A"
might say something about perseverance and hard work, the value of
one school's "A" is not necessarily the same as the value from
another.
&lt;/p&gt;

&lt;p&gt;
But that's not what I wanted to write about.
&lt;/p&gt;

&lt;p&gt;
A big criticism of the SAT is the fact that it can be prepped for and
thus gives a huge advantage to students and families of means. The
test can be gamed, one can take prep courses, hire private tutors,
etc.
&lt;/p&gt;

&lt;p&gt;
As I said at the topâ€¦
&lt;/p&gt;

&lt;p&gt;
Hot on the heels of the new SAT came the announcement that Khan
Academy will be offering &lt;a href="https://www.khanacademy.org/sat"&gt;free prep for the new SAT&lt;/a&gt;. That sounds
terrific. 
&lt;/p&gt;

&lt;p&gt;
I read it differently. I'm all for free educational materials being
universally available, but if Khan Academy can indeed offer test prep
for the new SAT then so can everyone else and people of means can
and will avail themselves of the Khan Academy material plus a wealth of other
resources.
&lt;/p&gt;


&lt;p&gt;
So, new SAT but nothings changed.
&lt;/p&gt;</summary>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Be the ball</title>
    <id>http://cestlaz.github.io/posts/2014-03-09-be-the-ball.html/</id>
    <updated>2014-03-09T00:00:00-05:00</updated>
    <published>2014-03-09T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-03-09-be-the-ball.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;


&lt;div class="center"&gt; &lt;iframe width="560" height="315" src="//www.youtube.com/embed/sWH811TcckU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;



&lt;p&gt;
Crystal Furman wrote a nice post titled &lt;a href="http://teachingcomputerscience.weebly.com/1/post/2014/03/coding-comprehension.html"&gt;Coding Comprehension&lt;/a&gt; about a
week ago. There was a little buzz about it in the APCS Facebook group
and shortly after, Alfred Thompson added his &lt;a href="http://blog.acthompson.net/2014/03/when-knowing-syntax-is-not-enough.html"&gt;two cents.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
I thought I'd add mine, at least a couple of thoughts.
&lt;/p&gt;

&lt;p&gt;
There are a lot of issues - long term retention, transfer of knowledge
from the basics to more advanced tools, pattern recognition, and more. 
&lt;/p&gt;

&lt;p&gt;
It reminded me of Benjamin Zander's talk "Playing on one Buttock":
&lt;/p&gt;

&lt;div class="center"&gt; &lt;iframe width="560" height="315" src="//www.youtube.com/embed/r9LCwI5iErE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;

&lt;p&gt;
Check out the first five minutes.
&lt;/p&gt;

&lt;p&gt;
Code reading is important, pair programming, where students are
constantly explaining to each other helps, and there are other
techniques. 
&lt;/p&gt;

&lt;p&gt;
We can also model thinking like a computer from day one.
&lt;/p&gt;

&lt;p&gt;
Many of us start day one with exercises where students are the
computer. Perhaps using a simplified made up language or maybe by just
throwing some task at the kids and having them write instruction lists
for each other. That's a great start, but we can continue drawing the
relationship between the way we think and the way a computer works.
&lt;/p&gt;

&lt;p&gt;
Take a simple intro problem â€“ finding the largest value in a list of
numbers.
&lt;/p&gt;

&lt;p&gt;
The ultimate solution in Java might be:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #93E0E3;"&gt;findMax&lt;/span&gt;(&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt;[] &lt;span style="color: #DFAF8F;"&gt;L&lt;/span&gt;){
    maxIndex = 0;
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;for&lt;/span&gt; (&lt;span style="color: #7CB8BB;"&gt;int&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;i&lt;/span&gt;=0;i&amp;lt;L.&lt;span style="color: #7CB8BB;"&gt;length&lt;/span&gt;;i++){
        &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;if&lt;/span&gt; (a[i]&amp;lt;a[maxIndex]){
            maxIndex = i;
        }
    }
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;return&lt;/span&gt; maxIndex;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Somewhere along the development process, I ask my students how they
would find the largest value in list. If the list was short, they
might just scan it. If the list was very long, they do the same thing
as our Java snippet does - remember the largest so far as we scan down
the list one by one. At first, we just think we're scanning the list,
but if we slow things down, we see that we're following pretty much
the same algorithm as what we'd write in code.
&lt;/p&gt;

&lt;p&gt;
I use this technique throughout all my classes - slow ourselves down
and really analyze the steps towards solving the problem. No single
technique is going to teach our kids how to think about and comprehend
code, but it's another tool in our bag of tricks.
&lt;/p&gt;

&lt;h4&gt;Side note&lt;/h4&gt;

&lt;p&gt;
This is my first post written using &lt;a href="http://www.emacswiki.org/emacs/"&gt;Emacs&lt;/a&gt; &lt;a href="http://orgmode.org/"&gt;Org mode&lt;/a&gt;. I've been using it
for years but only now discovering how amazing a tool it is.
&lt;/p&gt;</summary>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
  <entry>
    <title>I guess I'm a dumbass</title>
    <id>http://cestlaz.github.io/posts/2014-02-27-dumbass.md/</id>
    <updated>2014-02-27T00:00:00-05:00</updated>
    <published>2014-02-27T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2014-02-27-dumbass.md/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;I like a fairly informal atmosphere in my classes. Students have to
know that there's a line between teacher and student but I also want
them to feel like we're all part of the Stuy CS family.&lt;/p&gt;
&lt;p&gt;Whenever we start a new term, it takes a while to break down the
walls. The students don't know what to expect of me, can they trust
me? Am I a bozo? Who knows.&lt;/p&gt;
&lt;p&gt;It helps when some of the class had me as a teacher before, but it still takes time.&lt;/p&gt;
&lt;p&gt;I'm glad that this term, things are coming along nicely.&lt;/p&gt;
&lt;p&gt;Let me share what happened in class today.&lt;/p&gt;
&lt;p&gt;I was introducing merge sort - their first nlgn sorting
algorithm. Before class, one of the students slipped off his seat and landed on the floor with a thud. He
was fine although the brief butt, if you would, of jokes.&lt;/p&gt;
&lt;p&gt;I relayed a story - many years ago, Ilya, one of the gang, was accused
of being a dumbass. He responded "hey, it's never missed the seat." The
class had a good laugh over it.&lt;/p&gt;
&lt;p&gt;Fast forward a bit.&lt;/p&gt;
&lt;p&gt;I had a deck of cards I wanted sorted. As a Stuy grad, I'm as lazy as
the next guy so I didn't want to sort them, but I also didn't want to
violate one of our two class tenets "Don't be a jerk" so rather than
giving the cards to a student to sort, I split the deck in half and
gave each half to a student.&lt;/p&gt;
&lt;p&gt;They quickly caught on and subdivided the deck and gave away their
halves. We did this until all the students had, at some point had one
or more cards.&lt;/p&gt;
&lt;p&gt;Then we got to the merge part. Each student sorted his or her pile and
passed it back to the student who they got the cards from. This
student then merged the two piles and passed the cards back.&lt;/p&gt;
&lt;p&gt;As the cards made their way back to me a student noted "hey, one of my
piles isn't in order." I commented that "the algorithm might fail if
at some points you give your cards to a dumbass." This got a good
laugh.&lt;/p&gt;
&lt;p&gt;Finally, two pile of cards made their way to me and I started to merge
then. At which point, I promptly dropped the cards all over the floor.&lt;/p&gt;
&lt;p&gt;One of my students exclaimed: "That's what happens when you give you
cards to a dumbass!!!!!"&lt;/p&gt;
&lt;p&gt;It was awesome. We all cracked up.&lt;/p&gt;
&lt;p&gt;I don't think I've been "insulted" quite so perfectly since my daughter
called me an idiot in class last year (I fed her the straight line and
she didn't disappoint).&lt;/p&gt;
&lt;p&gt;I love it that my kids feel comfortable enough to joke but also know
where the line is.&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="algorithms" label="algorithms"/>
    <category term="apcs" label="apcs"/>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
</feed>
