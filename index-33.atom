<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xmlns:fh="http://purl.org/syndication/history/1.0" xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z (old posts, page 33)</title>
  <id>http://cestlaz.github.io/index-33.atom</id>
  <updated>2018-09-19T23:47:49Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index-33.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-32.atom"/>
  <link rel="previous" type="application/atom+xml" href="http://cestlaz.github.io/index-34.atom"/>
  <link rel="current" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-34.atom"/>
  <link rel="prev-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-32.atom"/>
  <fh:archive/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/index-33.html"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Early Interesting Problems - Happy Ladybugs</title>
    <id>http://cestlaz.github.io/posts/happy_ladybug/</id>
    <updated>2017-10-23T08:47:46-04:00</updated>
    <published>2017-10-23T08:47:46-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/happy_ladybug/"/>
    <summary type="html">&lt;div id="outline-container-orgfb597d3" class="outline-2"&gt;
&lt;h2 id="orgfb597d3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfb597d3"&gt;
&lt;p&gt;
We all love interesting problems. The trouble is that it's hard to
find suitably interesting problems for students when they're just
learning the basics. In the very beginning the problems practically
dictate the solution:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;loop over a list and add all the elements or calculate the sum of a
list of integers.&lt;/li&gt;
&lt;li&gt;Determine if  number is prime&lt;/li&gt;
&lt;li&gt;Convert a word into pig-Latin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
It's not that there's no thought involved in solving these but the
students already know the mechanics of solving these by hand so it's a
direct translation into a program.
&lt;/p&gt;

&lt;p&gt;
This isn't a bad thing and it is important but it's fun when we get to the next
level. I've found that a number of the &lt;a href="http://hackerrank.com"&gt;Hacker Rank&lt;/a&gt; archived
competitions have "easy" problems that can be a good fit for
beginners. One that I found and really like is &lt;a href="https://www.hackerrank.com/challenges/happy-ladybugs"&gt;Happy Ladybugs&lt;/a&gt; problem.
&lt;/p&gt;

&lt;p&gt;
The problems is basically as follows:
&lt;/p&gt;

&lt;p&gt;
You get a string of letters. Each letter represents a ladybug of a
different color. Each letter also represents a location of the
ladybug.  A space (or underscore in the actual problem) represents a
free space. For example "AABC DDA" is a line of 2 A colored ladybugs
followed by a B colored one, C colored one, a blank space, 2 D colored and then one
more A colored. 
&lt;/p&gt;

&lt;p&gt;
You can rearrange the line of ladybugs by swapping any ladybug with a
blank space.
&lt;/p&gt;

&lt;p&gt;
A ladybug is happy if it is next to another ladybug of the same
color. The challenge is to determine if all the ladybugs can be made
happy.
&lt;/p&gt;

&lt;p&gt;
I like this problem because while it is non-trivial it is very
approachable. 
&lt;/p&gt;

&lt;p&gt;
To me, the key is that while you can rearrange the list you
don't have to. You only have to determine if it is possible to make
the ladybugs happy. You don't actually have to do so.
&lt;/p&gt;

&lt;p&gt;
The edge cases are pretty easy to deal with - a string of length one
or two but then a little thought is required.
&lt;/p&gt;

&lt;p&gt;
The first insight is that if there are no spaces, you can't rearrange
the ladybugs so all you have to do is scan through the string to test
to see if every ladybug has a neighbor of the same color.
&lt;/p&gt;

&lt;p&gt;
The next insight, and the big one is that if you have at least one
space you can arbitrarily re-order the string. You can show this is
possible  by using a single space to swap any two elements. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someletter&lt;/span&gt;
&lt;span class="n"&gt;someletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someotherletter&lt;/span&gt;
&lt;span class="n"&gt;someotherletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The final insight is that since you can arbitrarily re-order the
ladybugs as long as you have at least 2 of each color, you can make
them all happy.
&lt;/p&gt;

&lt;p&gt;
Since my class is currently just starting dictionaries in Python we
solved this with lists and then transitioned to dictionaries.
&lt;/p&gt;

&lt;p&gt;
Here's a dictionary based solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;    This might miss some of the real edge cases in the hackerrank&lt;/span&gt;
&lt;span class="sd"&gt;    problem. I haven't read the problem carefully in over a year and &lt;/span&gt;
&lt;span class="sd"&gt;    forget what it specified for things like lists of only spaces,&lt;/span&gt;
&lt;span class="sd"&gt;    lists with only one bug etc.&lt;/span&gt;

&lt;span class="sd"&gt;    Also, the Hackerrank question uses an underscore (_) instead of a space.&lt;/span&gt;
&lt;span class="sd"&gt;    '''&lt;/span&gt;
    &lt;span class="c1"&gt;# handle a string of less than 2 ladybugs&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# handle the string of 2 ladybugs - both must be the same and not a space&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;


    &lt;span class="c1"&gt;# handle the case of no spaces &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="c1"&gt;# no spaces, every item must be next to one of the same color&lt;/span&gt;
	&lt;span class="c1"&gt;# so we loop from 1 to len-1 and for each item&lt;/span&gt;
	&lt;span class="c1"&gt;# check the one before and the one after&lt;/span&gt;
	&lt;span class="c1"&gt;# if we ever have an unhappy bug, we can just return False&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

	&lt;span class="c1"&gt;# if we ever get here every bug has at least one neighbor of the same color&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# if we get here it means there's at least one space so we can rearrange the bugs&lt;/span&gt;
    &lt;span class="c1"&gt;# however we please so as long as there are at least 2 bugs of each color&lt;/span&gt;
    &lt;span class="c1"&gt;# we can make them all happy&lt;/span&gt;

    &lt;span class="c1"&gt;# replace the spaces with "" since we don't want to count them&lt;/span&gt;
    &lt;span class="c1"&gt;# Since we know they were in the string we can rearrange but&lt;/span&gt;
    &lt;span class="c1"&gt;# they're no longer needed&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# tally up all the bugs to see if there are at least 2 of each&lt;/span&gt;
    &lt;span class="n"&gt;bugcounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set to 0 the first time we see this key&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;


    &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# if there is any value of 1 in the counts then there's a lone ladybug&lt;/span&gt;
    &lt;span class="c1"&gt;# that can't be made happy&lt;/span&gt;
    &lt;span class="c1"&gt;# so we return True (happy) if there are 0 counts of 1 in our list &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 


&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"abaccbe ff eggggggg"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I love problems like these. 
&lt;/p&gt;

&lt;p&gt;
I just wish there was an easy way to find all contest problems of a
certain level like "easy" or "medium." If anybody knows please share
in the comments.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="problems" label="problems"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Catskills Conf 2017</title>
    <id>http://cestlaz.github.io/posts/catskills-2017/</id>
    <updated>2017-10-21T20:46:49-04:00</updated>
    <published>2017-10-21T20:46:49-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/catskills-2017/"/>
    <summary type="html">&lt;div id="outline-container-org24fba3c" class="outline-2"&gt;
&lt;h2 id="org24fba3c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org24fba3c"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/cc-2017/cc1.JPG" alt="cc1.JPG"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Fall in the northeast is a special time. It's the apple harvest, the
leaves change colors, and the
air is crisp and clean. One of the best places to enjoy it is up in the
Hudson Valley. That's why I love going to &lt;a href="http://catskillsconf.com"&gt;Catskills Conf&lt;/a&gt; each year.
&lt;/p&gt;

&lt;p&gt;
I've written about Catksills Conf before and I usually describe it as
"light tech conference meets summer camp."  I love the event but I
love being able to bring my students even more. 
&lt;/p&gt;

&lt;p&gt;
Hunter's a great place but it's a commuter school. That makes it
harder for the students to get to know each other than if they all
lived in the dorms. Getting away as a group for the weekend helps us
jumpstart the process.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/cc-2017/cc-group.JPG" alt="cc-group.JPG"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/cc-2017/cc-bunkhouse.JPG" alt="cc-bunkhouse.JPG"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Then there's the conference itself. In addition to a great assortment
of talks it has all the amazing extras.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/songadaymann"&gt;Jonathan "Song a Day" Mann&lt;/a&gt; has been with us all three years of the
conference to write summary songs for each day.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/iM2RmmJrBTI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
There are hikes
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/cc-2017/cc-hike.JPG" alt="cc-hike.JPG"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Workshops like blacksmithing
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/cc-2017/cc-blacksmith.JPG" alt="cc-blacksmith.JPG"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
a live birds of prey show
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/cc-2017/cc-bop.JPG" alt="cc-bop.JPG"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
not to mention folk music and square dancing.
&lt;/p&gt;

&lt;p&gt;
All of this makes for a great experience but maybe the best part is
that everyone is living together in the &lt;a href="http://ashokancenter.org/"&gt;Ashokan Center&lt;/a&gt;. The conference
doesn't allow questions after talks because the speakers are all
living with the attendees for the weekend. We eat in the same
cafeteria, go on the same hikes, relax at the same bonfire, and sleep
in the same bunkhouses. As one of my students said:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
There’s just something about sharing a conversation on the cloud
computing network with someone who’s visiting from London while
shooting basketball hoops in the middle of the woods that makes for a
real take away experience!
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I've had the good fortune to be able to bring my students up to
Catskills Conf in the Fall for each of the last three years. Here's
hoping that the tradition can continue for many more.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>It's nice to be appreciated</title>
    <id>http://cestlaz.github.io/posts/nice-appreciated/</id>
    <updated>2017-10-19T17:27:53-04:00</updated>
    <published>2017-10-19T17:27:53-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/nice-appreciated/"/>
    <summary type="html">&lt;div id="outline-container-org2264d96" class="outline-2"&gt;
&lt;h2 id="org2264d96"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2264d96"&gt;
&lt;p&gt;
Today was my 50th Birthday. I'm usually pretty low key on birthdays
and today was no different. I got up, exercised, went to work, taught
my class and went back to my office for office hours.
&lt;/p&gt;

&lt;p&gt;
What a great surprise when all of a sudden my students from last year
appeared at my office with a Happy Birthday a card and a cake:
&lt;img src="http://cestlaz.github.io/img/cake.jpg" alt="cake.jpg"&gt;
&lt;/p&gt;

&lt;p&gt;
It felt pretty terrific. I wasn't expecting this and was really moved.
&lt;/p&gt;

&lt;p&gt;
We don't make the big bucks but little things like this make me feel
pretty terrific as a teacher.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>There's always something to learn (from your students)</title>
    <id>http://cestlaz.github.io/posts/when-they-change-the-script/</id>
    <updated>2017-10-18T11:41:49-04:00</updated>
    <published>2017-10-18T11:41:49-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/when-they-change-the-script/"/>
    <summary type="html">&lt;div id="outline-container-orga60e6fd" class="outline-2"&gt;
&lt;h2 id="orga60e6fd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga60e6fd"&gt;
&lt;p&gt;
One thing I've learned from teaching is that there's always something
new to learn. For the kids, yes, but I'm talking about for the
teacher.
&lt;/p&gt;

&lt;p&gt;
The other day, I taught a lesson I've taught many times. Find the mode
of a data set. That's the problem that they solve but the lesson is
really about run time complexity, hidden complexity and using data
structures in alternate ways.
&lt;/p&gt;

&lt;p&gt;
I blogged about this &lt;a href="https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md"&gt;before&lt;/a&gt; so you can get an earlier take there
although the code isn't formatted correctly due to blog conversions.
&lt;/p&gt;

&lt;p&gt;
As with the last time, the students  had already written code to find
the largest value in a list and also to find the frequency of an item
in a list.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_max_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;max_val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
	    &lt;span class="n"&gt;max_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_val&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;requested_val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;requested_val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They had to write mode prior to the class. In the past, students would
generally come up with something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_mode_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mode_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;mode_freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mode_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mode_freq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;mode_freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
	    &lt;span class="n"&gt;mode_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mode_val&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_mode_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They'd use their existing knowledge and the 'find the largest' idiom
to find the mode by:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;find the frequency of the first item and assume it's the mode so far&lt;/li&gt;
&lt;li&gt;for each item in the list
&lt;ul class="org-ul"&gt;
&lt;li&gt;find the frequency of that idem&lt;/li&gt;
&lt;li&gt;if it occurs more than the mode so far then it becomes the new
mode so far&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There's a lot of good in this solution. The kids incrementally develop
a solution, they use and exctend code and concepts they already know
and understand and it's clear and understandable.
&lt;/p&gt;

&lt;p&gt;
We would then run the code on larger and larger data sets and notice
that it gets slow pretty quickly. This leads to an informal discussion
of run time and the fact that there's hidden complexity – the call to
&lt;code&gt;freq&lt;/code&gt; in the main loop introduces a linear component so we have a
loop within a loop and an N&lt;sup&gt;2&lt;/sup&gt; routine.
&lt;/p&gt;

&lt;p&gt;
The big takeaway is get a feel for run time and to be aware of hidden
complexity. We then move to a linear solution by using a list as
buckets. You can read more about that in the &lt;a href="https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md"&gt;original post&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
What was interesting this time around was that most of the kids came
up with a solution more like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_mode_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;freqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mode_count&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;mode_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mode_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	   &lt;span class="n"&gt;mode_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
	   &lt;span class="n"&gt;mode_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mode_value&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mode_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Instead of calculating the frequency inside the loop they made a list
of frequencies. &lt;code&gt;freq[0]&lt;/code&gt; had the frequency of &lt;code&gt;l[0]&lt;/code&gt;, &lt;code&gt;freq[1]&lt;/code&gt; the
frequency of &lt;code&gt;l[1]&lt;/code&gt; etc. They then loop through that &lt;code&gt;freq&lt;/code&gt; list to
find the largest element and that's the index of the mode value in the
original list.
&lt;/p&gt;

&lt;p&gt;
It's functionally the same as the first solution but in some ways it's
very different. They built the data set they needed ahead of time
instead of calculating the data on the fly and they used the concept
of parallel lists.
&lt;/p&gt;

&lt;p&gt;
I like the solution and it didn't prevent us from getting to the run
time stuff but this did give me something to think about. 
&lt;/p&gt;

&lt;p&gt;
Why did this class led them largely to a different solution than the
classes I've taught in the class. There are a lot of things to ponder
since it's a college class that meets twice a week with kids from a
range of backgrounds (CS and otherwise) vs a high school class that
meets 5 days a week and the kids all had the same in class experience
prior to this lesson. Did I do something differently before hand? Some
assignments? Something I modeled?  I'm not sure but it's something I'm
going to ponder.
&lt;/p&gt;

&lt;p&gt;
It will interesting to see if this was a one shot deal and my current
class will solve problems as I predict moving forward or if I'm going
to get to see a lot of new things.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="lessons" label="lessons"/>
  </entry>
  <entry>
    <title>A test result is just a test result</title>
    <id>http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</id>
    <updated>2017-10-15T20:17:21-04:00</updated>
    <published>2017-10-15T20:17:21-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/"/>
    <summary type="html">&lt;div id="outline-container-org40b6030" class="outline-2"&gt;
&lt;h2 id="org40b6030"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org40b6030"&gt;
&lt;p&gt;
This past weekend was &lt;a href="http://catskillsconf.com"&gt;Catskillsconf&lt;/a&gt; - my favorite event of the
year. I spent the weekend up in Ulster County with a bunch of my
students. some great friends old and new, and Devorah. It was a great
weekend but I was mostly offline.
&lt;/p&gt;

&lt;p&gt;
As a result I missed a rather heated discussion in the CS Ed Facebook
groups. The debate was over whether or not Strong AP CSP exam results
are indicative of a good curriculum or good professional development (PD).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9ee3f4b" class="outline-2"&gt;
&lt;h2 id="org9ee3f4b"&gt;TL;DR - NO!!!!!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9ee3f4b"&gt;
&lt;p&gt;
Further, anyone who thinks that a set of exam results can tell you
that a particular PD sequence or curriculum is good shouldn't be
allowed to call themselves a teacher and I don't want them anywhere
near my kids.
&lt;/p&gt;

&lt;p&gt;
I guess that language is strong, even for me but it's true.
&lt;/p&gt;

&lt;p&gt;
Tests are designed to assess students and many tests don't even do
that well. They shouldn't be used to measure something further
removed.
&lt;/p&gt;

&lt;p&gt;
The last time this idea made its rounds was using student test results
for teacher evaluation. They do that in NY. A judge called the
practice "capricious" and "arbitrary." My friend and former
colleague Gary Rubinstein showed a year or so ago that standardized
test scores varied enough from year to year so as to make the ratings
useless &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; 
&lt;/p&gt;

&lt;p&gt;
Using test scores to say a PD sequence is good? What if that PD
focused on test prep? What if it did nothing in particular? When I was
at Stuy and when I was at Seward Park the Calc teachers' students had
great AP results. I can tell you that none of those teachers had any
quality PD specific to AP Calc.
&lt;/p&gt;

&lt;p&gt;
Curriculum? My mentor and friend Danny Jaye told me many times - "A
great teacher can save a class from a  horrible curriculum but a great
curriculum will do nothing for a class with a horrible teacher." He
was right. Again, what if the curriculum encourages test prep. What if
pressure on the teacher encourages them to focus on test prep
regardless of curriculum or PD (see my recent &lt;a href="http://cestlaz.github.io/posts/standards-who-for"&gt;post&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
An AP test measures one thing - how well the student did on the AP
test. There are so many variables that go into a class:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Is it first period at 8:00am?&lt;/li&gt;
&lt;li&gt;Is it the last class of the day?&lt;/li&gt;
&lt;li&gt;Is it before lunch or right afterwards?&lt;/li&gt;
&lt;li&gt;What about right after Gym.&lt;/li&gt;
&lt;li&gt;What's the mix of students - every class is different&lt;/li&gt;
&lt;li&gt;Is the teacher teaching the subject once a day? Two times? Five
times?&lt;/li&gt;
&lt;li&gt;How large is the class&lt;/li&gt;
&lt;li&gt;How many other classes are the kids taking?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The list goes on and on. There are so many contributing factors that
you just can't say "Good test results = good curriculum" or "good test
results = good PD."
&lt;/p&gt;

&lt;p&gt;
Want to know if a curriculum is good - have experienced teachers who
know their subject run it a few times through and ask them. Same for
PD.
&lt;/p&gt;

&lt;p&gt;
Teachers know education a lot better than test makers, curriculum
developers and PD providers. How about listening to them for a change?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;sorry, I just got back from the weekend trip and am too tired
to find the link. You can go to his site and search and while you're
there, there's lots of good stuff to read.&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="assessment" label="assessment"/>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Standards - Who are they for?</title>
    <id>http://cestlaz.github.io/posts/standards-who-for/</id>
    <updated>2017-10-10T14:05:35-04:00</updated>
    <published>2017-10-10T14:05:35-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/standards-who-for/"/>
    <summary type="html">&lt;div id="outline-container-org579c3ce" class="outline-2"&gt;
&lt;h2 id="org579c3ce"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org579c3ce"&gt;
&lt;p&gt;
The big push at last year's CSTA conference was the release of the new
CSTA K12 standards. It seemed that every other session was pushing
them in one way or another. I've been meaning to share my thoughts
about them or, more specifically, learning standards in general for a
while but with announcement about federal funding for CS coming from
the White House last week I thought it was time.
&lt;/p&gt;

&lt;p&gt;
Before diving into CS standards lets talk about math.
&lt;/p&gt;

&lt;p&gt;
To start I have yet to meet a math teacher that needs
"the Standards" to know what to teach. Some how or other math teachers know
they're supposed to teach in an algebra or geometry class. When NY
moved to "integrated math" teachers were able to re-sequence classes
without the benefit of "the standards" and when NY went back to
Algebra, Geometry, then Alg 2 and Trig, teachers had no problem
reorganizing classes again.
&lt;/p&gt;

&lt;p&gt;
New teachers didn't go to "the Standards" to learn the ropes. Schools
defined syllabi, teachers observed each other, shared resources, used
lesson plan books and in general knew what they were supposed to teach
and at what level.
&lt;/p&gt;

&lt;p&gt;
In my quarter century of teaching, always in a math department we
spent a lot of time talking about what we taught, when we taught it,
how we taught it and at what level but until common core was forced
down our throats we NEVER discussed "the Standards." We discussed our
students, where we thought we could take them, and how to get them
there. Somehow our students did alright.
&lt;/p&gt;

&lt;p&gt;
More recently, the push has been on "The Standards," common core in particular.
&lt;/p&gt;

&lt;p&gt;
Common standards sound good - kids in every school will learn the same
things at the same level - but I contend that they aren't about
learning. They're about testing.
&lt;/p&gt;

&lt;p&gt;
Let's look at a few of the math standards. These were pulled directly
from the Common Core:
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;
Derive the equation of a circle of given center and radius using the
Pythagorean Theorem; complete the square to find the center and radius
of a circle given by an equation.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
Use coordinates to prove simple geometric theorems algebraically. For
example, prove or disprove that a figure defined by four given points
in the coordinate plane is a rectangle; prove or disprove that the
point (1, √3) lies on the circle centered at the origin and containing
the point (0, 2).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
Derive using similarity the fact that the length of the arc
intercepted by an angle is proportional to the radius, and define the
radian measure of the angle as the constant of proportionality; derive
the formula for the area of a sector.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
These aren't about deep thinking and problem solving. They're about
very specific skills or techniques. They're also easy to put on a
test. Much easier then assessing a students real problem solving ability.
&lt;/p&gt;

&lt;p&gt;
Common Core comes hand in hand with standardized testing which is then
used to punish students, teachers, and schools. 
&lt;/p&gt;

&lt;p&gt;
We keep hearing about individualized instruction - meeting the kids
where they are but the standards tell us that kids MUST know specific
things at specific times. You can't have both. In the best case, with
"the standards" we can only meet students "where they are" within
annual bands.
&lt;/p&gt;

&lt;p&gt;
What has this led to? Narrowing curriculum for one thing. Since schools are
evaluated based on the standardized exam in core subjects focus
narrows and other subjects fall by the wayside. 
&lt;/p&gt;

&lt;p&gt;
Arguably worse is selective teaching within common core subjects.
&lt;/p&gt;

&lt;p&gt;
Take for example, Geometry. The course is really "Logic and Deductive
Reasoning using Euclidean Geometry as a Platform" but it's generally
called Geometry. This class is supposed to be about getting kids to
think. I've already shared a few standards above but let me tell you
about an open secret - many schools don't really teach proof -
arguably the most important part of the class.
&lt;/p&gt;

&lt;p&gt;
In my last year at Stuy I graded Geometry regents for the city. I
graded exams for two highly regarded unscreened schools. One that was
lauded in a State of the Union address and the other equally hyped. I
graded all of each school's students geometry regents so it wasn't
just a sampling. Out of all the papers, only two or three scored more
than 2 out of 9 points for the proof question and most were entirely
left blank.
&lt;/p&gt;

&lt;p&gt;
What happened? Proof is hard to teach and hard to learn but it's also
only a small part of the standardized exam. It's critical for a
school's survival and for the student to graduate that a passing score
is earned. Rather than spending a large amount of time on few points
and probably get a limited return I've been told that many schools
spend much more time on topics that area easier to teach and have more
weight on the exam. This makes the school look better and helps the
student graduate but arguably the most important aspect of the course
has been minimized.
&lt;/p&gt;

&lt;p&gt;
High stakes testing leads to gaming the system. Common core standards
come hand in hand with high stakes testing. We see the same with AP
exams - there are schools that force students to take exams even when
they are woefully prepared and mostly fail because this helps the
school shoot up in the ratings.
&lt;/p&gt;

&lt;p&gt;
This is what the common core math standards have given us. They're not
for teachers - we don't need them - we know what to teach and only
wish that the bean counters would indeed allow us to meet students
where they are. Standards are about testing.
&lt;/p&gt;

&lt;p&gt;
Let's move on to CS standards. 
&lt;/p&gt;

&lt;p&gt;
It might not be fair to compare CS to math since K12 math education
has been around much longer and is more well defined and in theory
having a set of standards gives us a common language to discuss,
compare, and contrast all the content providers and curriculum
developers out there. On the other hand, I also believe that with well
prepared teachers who understand content and pedagogy the value isn't
all that great. It's also worth considering the fact that nothing
really makes the CSTA Standard  writers special. There's no reason to
think that another group - be they a handful of teachers or a content
provider can't do a comparable job.
&lt;/p&gt;

&lt;p&gt;
Here are some selections from the CSTA standards:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Design and develop a software artifact working in a team. 
&lt;/p&gt;

&lt;p&gt;
Compare and contrast various software licensing schemes (e.g., open source, freeware,
commercial). 
&lt;/p&gt;

&lt;p&gt;
Design, develop, and implement a computing artifact that responds to an event (e.g., robot
that responds to a sensor, mobile app that responds to a text message, sprite that responds
to a broadcas
&lt;/p&gt;

&lt;p&gt;
Demonstrate the value of abstraction for managing problem complexity (e.g., using a list
instead of discrete variables). 
&lt;/p&gt;

&lt;p&gt;
Design algorithms u sing sequence, selection, and iteration. 
&lt;/p&gt;

&lt;p&gt;
Discuss techniques used to store, process, and retrieve different amounts of information
(e.g., files, databases, data warehouses). 
&lt;/p&gt;

&lt;p&gt;
Compare and debate the positive and negative impacts of computing on behavior and
culture (e.g., evolution from hitchhiking to ridesharing apps, online accommodation rental
services). 
&lt;/p&gt;

&lt;p&gt;
Use simple encryption and decryption algorithms to transmit/receive an encrypted
message. 
&lt;/p&gt;

&lt;p&gt;
Decompose a problem by creating new data types, functions, or classes.
&lt;/p&gt;

&lt;p&gt;
Evaluate algorithms (e.g., sorting, searching) in terms of their efficiency, correctness, and
clarity. 
&lt;/p&gt;

&lt;p&gt;
Use data analysis to identify significant patterns in complex systems (e.g., take existing data
sets and make sense of them). 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
There's nothing wrong with these. They aren't specific enough to
develop lessons from but, they can provide a
consistent framework to discuss different offerings. Were the much
more specific, we'd have the same issue I railed about with the math
standards so this is a good thing. 
&lt;/p&gt;

&lt;p&gt;
Actually, in general, I don't have a problem with these standards. I
might agree with some parts and disagree with others but that's
neither here nor there.
&lt;/p&gt;

&lt;p&gt;
To me the big concern on standards is what will they actually be used
for. It's nice to think that it's a set of guidelines from which we
can develop strong local experiences but I think this is somewhat
naive. As states and the federal government bring CS Education into
the fold there's no reason to believe that CS will be special. CS Ed
will go the way of other subject areas. That means that whatever
standards governments adopt, they will likely be used for high stakes
tests rather than for true education. If you look to see how the
sausage is made you can see the harm standards and standardized
testing has wrought  in subjects like math. CS Ed won't be far behind.
&lt;/p&gt;

&lt;p&gt;
While we should be proud of all the work that's going on in our
community it's more important now than ever to keep an eye on the
overall big picture and be aware of how work intended for one purpose
within the community can be used very differently by those outside of
it. This is particularly important for advocates  not in public schools. Public
schools educate the majority of American students so CS4All means
public schools. Standardized testing won't affect private schools (or
private charters in many cases) nor will they affect colleges and in
fact will be a boon to EdTech companies selling there wares. Many of
the loudest voices in CSEd come from these contingents - it's
important that they look to the greater issues, form their own
opinions, and then act on what they believe is right.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="ed" label="ed"/>
    <category term="policy" label="policy"/>
    <category term="standards" label="standards"/>
  </entry>
  <entry>
    <title>Programming Idioms</title>
    <id>http://cestlaz.github.io/posts/programming-idioms/</id>
    <updated>2017-10-08T11:51:46-04:00</updated>
    <published>2017-10-08T11:51:46-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/programming-idioms/"/>
    <summary type="html">&lt;div id="outline-container-orge6d4598" class="outline-2"&gt;
&lt;h2 id="orge6d4598"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge6d4598"&gt;
&lt;p&gt;
I just read Jeff Yearout's recent post titled &lt;a href="http://k12csteaching.blogspot.com/2017/10/the-beginners-garden-of-concepts.html"&gt;The Beginner's Garden of
Concepts&lt;/a&gt;. Not directly related but it got me thinking about
programming idioms.
&lt;/p&gt;

&lt;p&gt;
I've been using the phrase "programming idiom" for years to describe a
short useful recurring code construct. I didn't realize that it was
officially "a thing" until doing a web search on the phrase years
later.
&lt;/p&gt;

&lt;p&gt;
As our students grow from newbies on I think it's helpful for them to
see recurring and related patterns and programming idioms gives us a
name to apply to many beginner patterns. An early idiom might be
"finding the smallest in a list:"
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;min_index&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;min_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Another is the very similar and more general "do something on every
item in a list:"
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something to or with dataset[i]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By talking about constructs like these as idioms it helps students see
and develop coding patterns. It also helps them to build mental
abstractions. Each of the above idioms are a few lines of code but
each are also a single concept. Students learn to think of them as the
concept.
&lt;/p&gt;


&lt;p&gt;
When students learn about list comprehensions in python they'll
rewrite the "do something…" more like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
but the pattern or idea is the same.
&lt;/p&gt;

&lt;p&gt;
Other early idioms might include swapping variables:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and loops until an exit condition are met:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_exit_condidtion&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do stuff&lt;/span&gt;
    &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;checks&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Even more difficult concepts like recursion can be described in an
idiomatic way:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;BASE_CASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;new_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modify_to_eventually_get_to_base_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Patterns like these, or idioms, come up over and over again. We don't
have to explicitly mention them in our teaching but I think it's
helpful to our students if we do.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="programming" label="programming"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>NYC CS4All - This Is Not The CS We're Looking For</title>
    <id>http://cestlaz.github.io/posts/this-is-not-the-cs-were-looking-for/</id>
    <updated>2017-09-29T10:40:24-04:00</updated>
    <published>2017-09-29T10:40:24-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/this-is-not-the-cs-were-looking-for/"/>
    <summary type="html">&lt;div id="outline-container-org34e9b11" class="outline-2"&gt;
&lt;h2 id="org34e9b11"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org34e9b11"&gt;
&lt;p&gt;
It's no secret that I'm something of an old curmudgeon in the K12 CS
Education world and I've been critical of a number of initiatives and
organizations over the years but I've been pretty quiet on the CS4All
movement in NYC Department of Education. I've had and any number of
concerns though.
&lt;/p&gt;

&lt;p&gt;
This past week at the inaugural meeting of New York City's CSTA
chapter we got a taste of the &lt;a href="http://blueprint.cs4all.nyc/"&gt;NYC CS4All Blueprint&lt;/a&gt;. A highlight was
this video:
&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/224494221" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Along with the &lt;a href="http://blueprint.cs4all.nyc/resources/3/%0A"&gt;supporting web page&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
TL;DR - in a elementary school CS class, the students kept tapping out
drumbeats on the desk because they had drumming class the period
prior. Now the drumming teacher is teaching rhythms that match
segments of HTML so the students can tap and chant the line as a
memory aid. 
&lt;/p&gt;

&lt;p&gt;
Sure, it's nice when teachers can work together to support each other
but at the end of the day this is a mnemonic aid to memorize
HTML. Nothing particularly innovative here. Mnemonics like this are
great until there are too many to keep track of or ones that are too
similar. 
&lt;/p&gt;

&lt;p&gt;
The part that saddened me was that this  was the video that was
chosen  as a highlight, an exemplar. It was OK but there was
nothing new or innovative. What was worse was that there was no
computer science.
&lt;/p&gt;

&lt;p&gt;
The kids were memorizing HTML. As we watched the video, my neighbor
nudged me and asked "why are they memorizing HTML?" I would ask the
same question. Now, I do think that HTML or some other mechanism to
create content that can be shared with the world is important. Having
students get there work out in the word can be tremendously rewarding
and motivating. Also, although I'm not sold on it, some say that HTML
is a good stepping stone to CS but still. 
&lt;/p&gt;

&lt;p&gt;
Let's try an experiment.
&lt;/p&gt;

&lt;p&gt;
Imagine that lesson but instead of HTML the kids were learning
Microsoft word so instead of a chant for &lt;code&gt;&amp;lt;a href=""&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; you have a
chant for putting a link into a word document or instead of a chant
for &lt;code&gt;&amp;lt;b&amp;gt;somethingbold&amp;lt;/b&amp;gt;&lt;/code&gt; you have a chant like
&lt;code&gt;control-b-typestuff-then-control-b&lt;/code&gt;. Same lesson, same technique,
still no CS. You could also say that this was just one video and maybe
most of the year is about real CS. Maybe, but then why highlight this
on the CS4All web site as a featured resource.
&lt;/p&gt;

&lt;p&gt;
This was disappointing but not surprising. 
&lt;/p&gt;

&lt;p&gt;
Some will say that kids aren't ready for hardcore CS at that
age. That's fine. We can have that discussion but if CS is appropriate
for whatever grade was in the video then it should be real CS. We can
also have endless discussing about what that is but memorizing HTML is
not it.
&lt;/p&gt;

&lt;p&gt;
I wondered if the video was representative so I looked at &lt;a href="http://blueprint.cs4all.nyc/resources/5/"&gt;another&lt;/a&gt;. It
turned out this was also a lesson on HTML and again the video could of
been about any number of subject areas. I will give this one credit
for highlighting that you can do "unplugged" activities but it wasn't
really a CS activity.
&lt;/p&gt;

&lt;p&gt;
Then there was &lt;a href="http://blueprint.cs4all.nyc/resources/15/"&gt;this one&lt;/a&gt;. No video here but how we structure a CS
lesson. We have this outline:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Warm-up&lt;/li&gt;
&lt;li&gt;Mini lesson&lt;/li&gt;
&lt;li&gt;Independent work time&lt;/li&gt;
&lt;li&gt;Share session&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Or, as we used to say back in the stone age:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Do Now&lt;/li&gt;
&lt;li&gt;Instructional activity&lt;/li&gt;
&lt;li&gt;practice&lt;/li&gt;
&lt;li&gt;summary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Nothing new and nothing CS here. I used that model when I taught math
but deviated from it more and more as I developed my CS teaching
chops.
&lt;/p&gt;

&lt;p&gt;
Finally I looked at &lt;a href="http://blueprint.cs4all.nyc/resources/24/%0A"&gt;this one&lt;/a&gt;. For full disclosure I have to say that
Eric, the teacher, is a friend of mine and I &lt;b&gt;&lt;b&gt;know&lt;/b&gt;&lt;/b&gt; he's a dynamite
teacher and I know he knows his stuff.
&lt;/p&gt;

&lt;p&gt;
This video, however was all about differentiation. Just like the other
resources, there's nothing wrong with them per se but there's not
really about CS. You could reskin them for any subject. 
&lt;/p&gt;

&lt;p&gt;
I also agree with a lot of what Eric says in the video but as CS
Standards take hold and standardized exams become the norm we'll find
that individualized instruction and meeting students where they are
is in direct conflict with the testing that comes with standards. I'll
talk more about that in my standards rant that I keep putting off
writing.
&lt;/p&gt;


&lt;p&gt;
Sure, the resources site has  a page with concepts like algorithms and
many schools, for better or worse, in the upper grades just fall back
on AP offerings but the more I dig the more it's apparent to me that
CS4All in NY will be more about getting something into every classroom
rather than something appropriate and good.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="csed" label="csed"/>
    <category term="curriculum" label="curriculum"/>
  </entry>
  <entry>
    <title>Using Emacs 37 - Treemacs file browser</title>
    <id>http://cestlaz.github.io/posts/using-emacs-37-treemacs/</id>
    <updated>2017-09-24T11:22:54-04:00</updated>
    <published>2017-09-24T11:22:54-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-37-treemacs/"/>
    <summary type="html">&lt;div id="outline-container-org8a96964" class="outline-2"&gt;
&lt;h2 id="org8a96964"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8a96964"&gt;
&lt;p&gt;
I've been meaning to get back to making Emacs videos but I've been
having trouble figuring out what to record.
&lt;/p&gt;

&lt;p&gt;
People have asked for &lt;a href="https://github.com/magit/magit"&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I'd also like to
get more comfortable with DIRED mode and then do a video on it but I'm
not there yet. I've also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;

&lt;p&gt;
This morning I saw an post on the &lt;a href="https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/"&gt;Emacs subreddit&lt;/a&gt; about &lt;a href="https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs"&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It's pretty
slick. I particularly like the integration with &lt;a href="https://github.com/bbatsov/projectile"&gt;projectile&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I suspect I won't integrate a file browser side bar into my workflow -
I've probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ACg6RnVdw8k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Awesome Cs Revisited</title>
    <id>http://cestlaz.github.io/posts/awesome-cs-revisted/</id>
    <updated>2017-09-21T16:34:36-04:00</updated>
    <published>2017-09-21T16:34:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/awesome-cs-revisted/"/>
    <summary type="html">&lt;div id="outline-container-org5392025" class="outline-2"&gt;
&lt;h2 id="org5392025"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5392025"&gt;
&lt;p&gt;
Saw this tweet the other day so I though I would try to plug the
&lt;a href="https://github.com/zamansky/awesome-cs-education"&gt;Awesome CS Education&lt;/a&gt; list I started on GitHub:
&lt;/p&gt;



&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/csteachers?src=hash"&gt;#csteachers&lt;/a&gt;...didn't I see a list of CS teacher blogs here recently?&lt;/p&gt;— Pam Whitlock (@PamWhitlock1) &lt;a href="https://twitter.com/PamWhitlock1/status/910662628757864448"&gt;September 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;





&lt;p&gt;
To answer the tweet, the closet thing I know to a list is &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred
Thompson&lt;/a&gt;'s blog roll which is actually a post he wrote on his blog
in 2012. Unfortunately his list can be hard to find and is somewhat
out of date. 
&lt;/p&gt;

&lt;p&gt;
The idea of an "awesome" list is publicly hosting a simple site that
is community driven and anyone can suggest additions and edits. 
&lt;/p&gt;

&lt;p&gt;
I put up a starter &lt;a href="https://github.com/zamansky/awesome-cs-education"&gt;here&lt;/a&gt; and a few people have contributed but I'd love
to get more people involved. Awesome lists have a number of advantages
over other repositories.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Unlike blog posts, the site is easy to find.&lt;/li&gt;
&lt;li&gt;Unlike private mailing lists or Facebook, anyone can see the content.&lt;/li&gt;
&lt;li&gt;Anyone can suggest additions (although you need to create a Github
account).&lt;/li&gt;
&lt;li&gt;Anyone can download or fork the site.&lt;/li&gt;
&lt;li&gt;It's essentially plain text and is easy to edit (just read the
&lt;a href="https://github.com/zamansky/awesome-cs-education/blob/master/contributing.org"&gt;contribution guide&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So, there you have it. If you have a blog or resource to share please
submit a pull request. Over time this could be a terrific single
starting point for educators to get to a wealth of resources.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pd" label="pd"/>
    <category term="resources" label="resources"/>
  </entry>
</feed>
