<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Posts about emacs</title>
  <id>http://cestlaz.github.io/categories/emacs.atom</id>
  <updated>2018-09-19T23:47:49Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/categories/emacs.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/categories/emacs/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Rite Of Passage Projects</title>
    <id>http://cestlaz.github.io/posts/rite-of-passage-projects/</id>
    <updated>2018-08-17T15:18:11-04:00</updated>
    <published>2018-08-17T15:18:11-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/rite-of-passage-projects/"/>
    <summary type="html">&lt;div id="outline-container-orgc2f13ce" class="outline-2"&gt;
&lt;h2 id="orgc2f13ce"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc2f13ce"&gt;
&lt;p&gt;
JCS's &lt;a href="https://irreal.org/blog/?p=7414#comment-4045190612"&gt;post&lt;/a&gt; on Irreal today brought me back. It was about &lt;a href="https://en.wikipedia.org/wiki/Brief_(text_editor)"&gt;Brief&lt;/a&gt; which
was the editing hotness back in the day. I played with it a little
really mostly used Emacs clones for real work when I was stuck on
MS-DOS systems. Usually either &lt;a href="https://en.wikipedia.org/wiki/JOVE"&gt;JOVE&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Epsilon_(text_editor)"&gt;Epsilon&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
In the comments Jon reminded me about the &lt;a href="https://en.wikipedia.org/wiki/MKS_Toolkit"&gt;MKS Toolkit&lt;/a&gt;
which brought most everyday Unix tools to DOS along with a shell and
a version of Vi. I didn't use Vi much and I only used their shell
until I wrote my own. 
&lt;/p&gt;

&lt;p&gt;
This got me thinking about "rite of passage" projects. I was in
college in the mid to late 80s. It was the heyday of the
IBM-PC. Schools still used older time sharing systems like DEC-20s and
Vaxen but the PC was all the rage. The cool thing about them was that
you had full control and access to the machine and it was simple
enough to get your head around pretty much everything about it. The
downside was that MS-DOS was very limited and of course there was
little to no networking going on. 
&lt;/p&gt;

&lt;p&gt;
On the one hand, you could dive into the low level machine language
stuff very easily. Get Norton's book:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://covers.openlibrary.org/b/id/7446489-L.jpg" alt="7446489-L.jpg" align="center" height="250"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
and you're on your way. 
&lt;/p&gt;

&lt;p&gt;
On the other hand many student's graduated with no concept of time
sharing and the ramifications of sharing a system or resources were
foreign to many kids.
&lt;/p&gt;

&lt;p&gt;
Even though we always look back to the "good old days," in many ways
things weren't much different. I got a very strong background in
academic CS from NYU (Courant Institute) but just like today, there
was no real preparation for the real world.If you wanted to really develop your
coding chops you had to work on side projects.
&lt;/p&gt;

&lt;p&gt;
I seem to recall, a typical "rite of passage" side project was writing
your own shell. It didn't have to be anything as powerful as BASH or
ZSH but it would typically be much more powerful than DOS and much
more Unixy.
&lt;/p&gt;

&lt;p&gt;
I recall writing my first shell down in UC-49 of Tisch Hall when the
computer labs weren't busy. I wrote it in C which was what the cool
kids used back then. Specifically I used the &lt;a href="https://en.wikipedia.org/wiki/Mark_Williams_Company"&gt;Let's C&lt;/a&gt; compiler from the
Mark Williams company. This was before Turbo C 2.0 so Let's C was
pretty much the only game in town for a cheap Unix style C compiler
for DOS. There was also Run/C but that was a C interpreter, not a
compiler. I also used that to learn C. Funny story - I certainly
didn't know this at the time but Run/C was written by Peter
Brooks. Peter and I would later meet when he became my colleague at
Stuyvesant teaching CS and I now have the privilege of being able to
call him friend. I joke that I owe him ~ $100 for the interpreter from
back in the day.
&lt;/p&gt;

&lt;p&gt;
Since this was on DOS, I couldn't do real Unix style pipes like 
&lt;code&gt;cat file | sort | uniq -c | sort -n&lt;/code&gt; but I did simulate it with redirection and temporary
files. It also supported aliases, simple scripts and I think a few
other things. 
&lt;/p&gt;

&lt;p&gt;
I was pretty happy with it and used it for a couple of years. It was
also one of the first substantial programs I wrote. I learned a lot
from doing it.
&lt;/p&gt;

&lt;p&gt;
Another "rite of passage" program that was common back then was a
text based window library. Somethig like ncurses that would allow you
to make text based windows and menus on the text only screen. I also
wrote one of these and actually got to use it for a project when I
started working at Goldman. 
&lt;/p&gt;

&lt;p&gt;
I guess the third "rite of passage" project I remember was writing a C
compiler but that was different because it was for a class. It was a
significant project but the class didn't really help with writing a
large program in general - it was all about the compiler and all the
theory behind it. Great course but not one in software engineering.
&lt;/p&gt;

&lt;p&gt;
Nowadays the projects have changed. Text based windowing is long gone
and while I still think writing a shell is a useful and rewarding
exercise it's not scratching an itch the way it did back when we were
stuck on DOS. I guess writing a full stack web app is probably a
pretty typical one for students these days. 
&lt;/p&gt;

&lt;p&gt;
Any others?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="c" label="C"/>
    <category term="cs" label="cs"/>
    <category term="emacs" label="emacs"/>
    <category term="programming" label="programming"/>
    <category term="projects" label="projects"/>
  </entry>
  <entry>
    <title>Using Emacs Episode 50 - presentations</title>
    <id>http://cestlaz.github.io/posts/using-emacs-50-presentations/</id>
    <updated>2018-06-30T14:10:24-04:00</updated>
    <published>2018-06-30T14:10:24-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-50-presentations/"/>
    <summary type="html">&lt;div id="outline-container-org2d7b207" class="outline-2"&gt;
&lt;h2 id="org2d7b207"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2d7b207"&gt;
&lt;p&gt;
Next weekend I'll be attending the Computer Science Teachers
Association's &lt;a href="https://www.csteachers.org/general/custom.asp?page=2018Conference"&gt;annual conference.&lt;/a&gt; It's probably the biggest conference
focussed on K12 Computer Science education. This year, in addition to
attending, I'll be giving a talk on preservice and inservice CS
teacher preparation programs. I'll be talking about the new New York
State certification requirements along with what we're rolling out at
Hunter College. 
&lt;/p&gt;

&lt;p&gt;
This means putting together a slide deck for the session. When I have
to work collaboratively with non-Emacs users, I will usually go to
Google Docs for presentations. It works and the collaborative aspects
are nice but tools like Google Docs and Powerpoint are designed around
composing slides manually. I much prefer to use a tool where I can
focus on writing my presentation and have the tool turn it into a
presentation.
&lt;/p&gt;

&lt;p&gt;
Org-mode is of course the ideal tool. As an outliner, it lends itself
to organizing a talk:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* topic 1
   the content for slide one
* topic 2
   the content for slide two
* topic 3
   etc.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I can embed code, tables, images, and more. I can also cycle
visibility so I can focus on individual sections. Org-mode also has a
number of export options to take a plain org file which is just ascii
with markup and export it as a presentation. In the video, I'll take a
quick look at &lt;code&gt;ox-beamer&lt;/code&gt;, which exports to a Beamer presentation in LaTeX and then a PDF,
&lt;code&gt;epresent&lt;/code&gt; which presents right in Emacs and finally &lt;code&gt;ox-reveal&lt;/code&gt; wich
creates a &lt;code&gt;reveal.js&lt;/code&gt; presentation. I ultimately decide to continue to
use &lt;code&gt;ox-reveal&lt;/code&gt; as it's pretty simple and flexible and I can also directly serve
the final presentation from my own laptop, a usb drive, or directly
from GitHub. 
&lt;/p&gt;

&lt;p&gt;
Check out the video to see how. If you want more information on using
&lt;code&gt;ox-reveal&lt;/code&gt; check out my earlier &lt;a href="http://cestlaz.github.io/posts/using-emacs-11-reveal"&gt;Using Emacs post and video&lt;/a&gt;. 
&lt;/p&gt;





&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bRoSpJ23Kzk" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="presentations" label="presentations"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs Episode 49 mu4e-conversation</title>
    <id>http://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</id>
    <updated>2018-06-21T13:28:41-04:00</updated>
    <published>2018-06-21T13:28:41-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/"/>
    <summary type="html">&lt;div id="outline-container-org4a41587" class="outline-2"&gt;
&lt;h2 id="org4a41587"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4a41587"&gt;
&lt;p&gt;
I've been using Emacs for email for a couple of years now. Not for
everything, for now my personal email is still Gmail but work is sent
and read through Emacs. I'm currently using &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html"&gt;mu4e&lt;/a&gt; and while it has a
few quirks and limitations, I like it very much. You can take a look
on how I configure and use it &lt;a href="http://cestlaz.github.io/posts/using-emacs-39-mu4e/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The other day I saw &lt;a href="https://www.reddit.com/r/emacs/comments/8qryri/mu4econversation_single_buffer_fullthread_display/"&gt;this&lt;/a&gt; thread on Emacs about a new package -
&lt;a href="https://gitlab.com/ambrevar/mu4e-conversation"&gt;mu4e-conversation&lt;/a&gt;. It's a package that deals with email threads.
&lt;/p&gt;

&lt;p&gt;
It's pretty cool. You can invoke it whenever you're in the headers
view you can just run &lt;code&gt;M-x mu4e-conversation&lt;/code&gt; and it combines all the
email messages in the current thread into a single buffer. 
&lt;/p&gt;

&lt;p&gt;
It's pretty nice. 
&lt;/p&gt;

&lt;p&gt;
You can navigate between messages in the thread with &lt;code&gt;C-c C-n&lt;/code&gt; and
&lt;code&gt;C-c C-p&lt;/code&gt; and use most if not all of the usual mu4e goodness but on
top of that you can also toggle what the author calls tree mode by
hitting &lt;code&gt;V&lt;/code&gt;. Tree mode turns the thread into an org-mode tree - also
extremely cool.
&lt;/p&gt;

&lt;p&gt;
On top of this, you can also make mu4e your default viewing mode by
setting a single variable with &lt;code&gt;(setq mu4e-view-func 'mu4e-conversation)&lt;/code&gt;.
&lt;/p&gt;


&lt;p&gt;
Although it's very cool, I'm not sure if mu4e-conversation will find
its way into my workflow or not and probably won't know for a
while. This is mostly due to the fact that it's summer so work email
slows down and I won't have too many long threads to play with this
on.
&lt;/p&gt;

&lt;p&gt;
I'll report back once I give it a fair shake but in the meantime if
anyone out there has had the time to play with it, let us know what
you think.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/V5efS8uXANI" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="editing" label="editing"/>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 48 Silversearcher</title>
    <id>http://cestlaz.github.io/posts/using-emacs-48-silversearcher/</id>
    <updated>2018-04-22T17:28:41-04:00</updated>
    <published>2018-04-22T17:28:41-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-48-silversearcher/"/>
    <summary type="html">&lt;div id="outline-container-org2b8e3c6" class="outline-2"&gt;
&lt;h2 id="org2b8e3c6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2b8e3c6"&gt;
&lt;p&gt;
A couple of days ago I wrote about on my &lt;a href="http://cestlaz.github.io/posts/unit-tests-grading-workflow"&gt;lab grading workflow&lt;/a&gt;. In the
post I mentioned that I used Emacs to easily navigate between student
folders and files so I can actually look at their work in addition to
their programs output and test results.
&lt;/p&gt;

&lt;p&gt;
The key is a combination of &lt;code&gt;dired&lt;/code&gt; and &lt;a href="https://github.com/Wilfred/ag.el"&gt;ag&lt;/a&gt;, Emacs's interface to &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;the
Silver Searcher&lt;/a&gt; which is something like a recursive code grep on
steroids. I also briefly try to show &lt;a href="https://github.com/mhayashi1120/Emacs-wgrep"&gt;wgrep&lt;/a&gt; in the video which allows
you to edit Emacs grep buffers, effectively allowing you to make
changes across a set of files all at once. It ended up not working
with silversearcher - if anyone out there knows why, please chime in.
&lt;/p&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-sFTkCQ774o" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="editing" label="editing"/>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Unit Tests Grading Workflow</title>
    <id>http://cestlaz.github.io/posts/unit-tests-grading-workflow/</id>
    <updated>2018-04-20T17:49:28-04:00</updated>
    <published>2018-04-20T17:49:28-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/unit-tests-grading-workflow/"/>
    <summary type="html">&lt;div id="outline-container-org20b6b78" class="outline-2"&gt;
&lt;h2 id="org20b6b78"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org20b6b78"&gt;
&lt;p&gt;
I've talked before about unit testing (&lt;a href="http://cestlaz.github.io/posts/testing-testing"&gt;here&lt;/a&gt;, and &lt;a href="http://cestlaz.github.io/posts/testing-part2"&gt;here&lt;/a&gt;). My premise is
that in addition to being an important industry technique, it's a
sound practice for students studying CS. I also contend that it can
make grading easier on the teacher. Maybe not as easy as an
auto-grader but those have &lt;a href="https://cestlaz.github.io/posts/2015-10-16-graders.html/#.WtplHHXwZhE"&gt;their own problems&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Since I spent most of today grading I thought I'd share my current
workflow and how unit tests have made me more efficient.
&lt;/p&gt;

&lt;p&gt;
I have each student make a single GitHub repo for all individual
homeworks, labs and small projects. They'll make additional repos for
larger and group projects. They fill out a Google form to give me the
repo link. I download the form and end up with a CSV file something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Doe, John, git@github.com:johndoe/mymoework.git
Doe, Jane, git@github.com:janedoe/labs.git
etc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
My goal is to clone each students repo into a directory and then
throughout the term, they add assignments to their own repos using the
names and specifications I give them. For example, after assigning
three assignments, I could pull everything from their repos and I
would have a directory structure something like this:
&lt;/p&gt;


&lt;pre class="example"&gt;
hw
├── doe_jane
│   ├── hw_01
│   ├── hw_02
│   └── hw_03
│ 
└── doe_john
    ├── hw_01
    └── hw_02
&lt;/pre&gt;

&lt;p&gt;
To get there, I have to change the csv file to a small shell script:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:johndoe/mymoework.git doe_john
git clone git@github.com:janedoe/labs.git doe_jane
etc.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I usually do this in Emacs with a macro.
&lt;/p&gt;

&lt;p&gt;
Now I'm ready to go.
&lt;/p&gt;

&lt;p&gt;
Whenever there's a new assignment, I just have to update all the
repos. I go into the root hw directory and loop through all the
subdirectoryes:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cs /path/to/hw_root
for i in `ls`
do 
  cd /path/to/hw_root/$i
  git pull
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
At this point I could go into each repo but we can do better. Since I
have all of my students submit a Makefile with a default target to
build an executable named &lt;code&gt;main&lt;/code&gt; and also a target named &lt;code&gt;tests&lt;/code&gt; which
will build an executable to run the unit tests named &lt;code&gt;tests&lt;/code&gt; I do this
instead of a straight pull:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cs /path/to/hw_root
for i in `ls`
do 
  cd /path/to/hw_root/$i
  git pull
  cd hw_03 # or whatever assignment I'm grading
  make tests
  make 
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now, if I want, I can go into each directory, run the tests by typing
&lt;code&gt;./tests&lt;/code&gt;  and the hw or project with &lt;code&gt;./main&lt;/code&gt;. I can also add a
couple of lines to the for loop above like:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "$i Test Report\n----------------\n" &amp;gt;&amp;gt; /path/to/hw_root/test_report
./tests &amp;gt;&amp;gt; /path/to/hw_root/test_rport
echo "----------------------\n\n"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This gives me a single file with everyone's test results. Either by
doing this or by running the tests in each folder manually I can
quickly see what works and what doesn't.
&lt;/p&gt;

&lt;p&gt;
While I'm doing this, I have Emacs up and with &lt;b&gt;dired mode&lt;/b&gt; and more
specifically &lt;b&gt;ag-dired-regexp&lt;/b&gt; which lets me easily
navigate to any student's files. Combined with the test results I can
quickly evaluate the entire assignment.
&lt;/p&gt;

&lt;p&gt;
Put all of this together and it makes grading somewhat bearable. I can
work through well written, correct assignments extremely quickly and
drill down into the other projects efficiently as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="grading" label="grading"/>
    <category term="testing" label="testing"/>
    <category term="workflow" label="workflow"/>
  </entry>
  <entry>
    <title>Using Emacs Episode 47 - Magit</title>
    <id>http://cestlaz.github.io/posts/using-emacs-47-magit/</id>
    <updated>2018-04-07T09:05:36-04:00</updated>
    <published>2018-04-07T09:05:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-47-magit/"/>
    <summary type="html">&lt;div id="outline-container-org1582ecb" class="outline-2"&gt;
&lt;h2 id="org1582ecb"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1582ecb"&gt;
&lt;p&gt;
I've been holding off on doing a &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt; video for a while. Mostly
because I wasn't using it exclusively and also because there are
already a number of good Magit videos and resources out there.
&lt;/p&gt;

&lt;p&gt;
What changed? Along with the new version of Magin, Jonas Bernoulli
wrote up &lt;a href="https://emacsair.me/2017/09/01/magit-walk-through/"&gt;a walkthrough of the Magit interface&lt;/a&gt;. For whatever reason,
it all finally clicked. 
&lt;/p&gt;

&lt;p&gt;
In spite of what the documentation says, Magit &lt;b&gt;is not&lt;/b&gt; an interface
for git. Magit is a &lt;b&gt;command and control&lt;/b&gt; center for git. You can
launch it just to execute some git commands but you can also leave it
up and running in an Emacs window or frame as a constant project
overview.
&lt;/p&gt;

&lt;p&gt;
Wow. Mind blown!!!
&lt;/p&gt;

&lt;p&gt;
If you use Emacs for Deveopment, you &lt;b&gt;have to&lt;/b&gt; use Magit. If you don't
use Emacs, you can load it on the side for Magit. If you're not a
developer, learn to code so you can use Magit!!!!!
&lt;/p&gt;

&lt;p&gt;
I tried to do justice to the package in the video. Magit along with &lt;a href="https://orgmode.org/"&gt;Org
Mode&lt;/a&gt; are arguably Emacs killer apps - enough in and of themselves to
justify using Emacs.
&lt;/p&gt;

&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1IYsiHXR620" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="editing" label="editing"/>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 46 Auto Yasnippets</title>
    <id>http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</id>
    <updated>2018-03-15T20:05:36-04:00</updated>
    <published>2018-03-15T20:05:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/"/>
    <summary type="html">&lt;div id="outline-container-orgd91d8fd" class="outline-2"&gt;
&lt;h2 id="orgd91d8fd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd91d8fd"&gt;
&lt;p&gt;
The other day I discovered &lt;a href="https://github.com/abo-abo/auto-yasnippet"&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href="https://github.com/abo-abo"&gt;Oleh Krehel&lt;/a&gt; or abo-abo.
&lt;/p&gt;

&lt;p&gt;
It looks like it's going to be a great way to solve a particular
problem that come up now and again.
&lt;/p&gt;

&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of_red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue. 
&lt;/p&gt;

&lt;p&gt;
You could use a yasnippet but it's unlikely that you'll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.
&lt;/p&gt;

&lt;p&gt;
Very cool.
&lt;/p&gt;


&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/utrMabxgXbg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="editing" label="editing"/>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 45 - Company or Autocomplete</title>
    <id>http://cestlaz.github.io/posts/using-emacs-45-company/</id>
    <updated>2018-03-11T08:05:45-04:00</updated>
    <published>2018-03-11T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-45-company/"/>
    <summary type="html">&lt;div id="outline-container-orgd1e710c" class="outline-2"&gt;
&lt;h2 id="orgd1e710c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd1e710c"&gt;
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://planet.emacsen.org/"&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what's going on in emacs every week on her &lt;a href="http://sachachua.com/blog/category/geek/emacs/"&gt;blog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
on the video front, &lt;a href="https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g"&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we'll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.
&lt;/p&gt;

&lt;p&gt;
today, i watched dave's video on &lt;a href="https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s"&gt;company&lt;/a&gt; mode for auto
completion. I've always used &lt;a href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.
&lt;/p&gt;

&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href="https://github.com/zamansky/using-emacs"&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I've also pulled
out the relevant code and am placing it down under the video.
&lt;/p&gt;

&lt;p&gt;
Here's what I've found so far:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/srFQwTvbaxY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org847a512" class="outline-2"&gt;
&lt;h2 id="org847a512"&gt;Company config (so far):&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org847a512"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-idle-delay&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-company-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-irony&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-cdb-autosetup-compile-options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony-eldoc&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'irony-eldoc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:config&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/python-mode-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-jedi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'my/python-mode-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org87aa19b" class="outline-2"&gt;
&lt;h2 id="org87aa19b"&gt;Autocomplete config&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org87aa19b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;py-python-command&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:ac-setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 44 - An org-mode workflow for application processing</title>
    <id>http://cestlaz.github.io/posts/using-emacs-44-pdf/</id>
    <updated>2018-03-03T08:05:45-04:00</updated>
    <published>2018-03-03T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-44-pdf/"/>
    <summary type="html">&lt;div id="outline-container-org557708a" class="outline-2"&gt;
&lt;h2 id="org557708a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org557708a"&gt;
&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It's something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program. 
&lt;/p&gt;

&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you're a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href="http://samsungnext.com/"&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href="http://www.catskillsconf.com/"&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year. 
&lt;/p&gt;

&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there's not enough information, I've been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I'm provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.
&lt;/p&gt;

&lt;p&gt;
For the first cohort, this wasn't a big deal. I hadn't even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;

&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;

&lt;p&gt;
This year, there are well over 100 applicants (and we're looking to
grow the program by a large number of students). All of a sudden, it
wasn't so easy to navigate all the pdf files.
&lt;/p&gt;

&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href="https://github.com/politza/pdf-tools"&gt;pdf-tools&lt;/a&gt;, and
&lt;a href="https://melpa.org/#/org-pdfview"&gt;org-pdfview&lt;/a&gt; I've come up with a workflow that I very much like.
&lt;/p&gt;

&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LFO2UbzbZhA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="pdf" label="pdf"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 43 - Music with MPD</title>
    <id>http://cestlaz.github.io/posts/using-emacs-43-music/</id>
    <updated>2018-02-20T08:05:45-04:00</updated>
    <published>2018-02-20T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-43-music/"/>
    <summary type="html">&lt;div id="outline-container-orgdf66038" class="outline-2"&gt;
&lt;h2 id="orgdf66038"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdf66038"&gt;
&lt;p&gt;
I like to listen to music at work. Sometimes I just stream from
YouTube, Soundcloud, Spotify or some other online source but if you're
a person of a certain age, like me, you probably have quite an mp3
collection. All those CDs that have been ripped not to mention some
converted vinyl.
&lt;/p&gt;

&lt;p&gt;
I used to use the &lt;a href="https://www.musicpd.org/"&gt;Music Player Daemon&lt;/a&gt; or MPD back in the day. It would
run in the background and you could connect to it using lots of
&lt;a href="https://www.musicpd.org/clients/"&gt;clients&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
When I was running Ubuntu and Mint Linux, I had some trouble setting
up MPD but the process is much smoother using Manjaro which is Arch
based and I'm currently enjoying.
&lt;/p&gt;

&lt;p&gt;
Here's a video on how I set up MPD and also use Emacs to control it.
&lt;/p&gt;

&lt;p&gt;
Coincidentally, on the same day I recorded this, &lt;a href="https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/feed"&gt;Uncle Dave&lt;/a&gt; put up a
similar &lt;a href="https://www.youtube.com/watch?v=xTVN8UDScqk"&gt;video&lt;/a&gt;. Dave also sets up MPD on an Arch based linux but he
uses EMMS for his player. I ultimately end up with Simple-MPC with
briefs stops at the built in MPC mode and Mingus along the way.
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LWd60rc_rQ0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="mpd" label="mpd"/>
    <category term="music" label="music"/>
  </entry>
  <entry>
    <title>Using Emacs 42 - Git Gutter and Time Machine</title>
    <id>http://cestlaz.github.io/posts/using-emacs-42-git-gutter/</id>
    <updated>2018-02-18T08:05:45-04:00</updated>
    <published>2018-02-18T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-42-git-gutter/"/>
    <summary type="html">&lt;div id="outline-container-org3ddf511" class="outline-2"&gt;
&lt;h2 id="org3ddf511"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3ddf511"&gt;
&lt;p&gt;
One day I'll do a Magit video but since there are already some good
ones out there I thought I'd share a couple of other great git related
packages.
&lt;/p&gt;

&lt;p&gt;
The first is &lt;a href="https://github.com/syohex/emacs-git-gutter/tree/00c05264af046b5ce248e5b0bc42f117d9c27a09"&gt;Git Gutter&lt;/a&gt; which adds markers on the side gutter of your
buffer so you know what's changed since you're last commit. I pretty
much use it exclusively for that visual but it can also be used to
cmmit and revert individual chunks of your changes. 
&lt;/p&gt;

&lt;p&gt;
The second is &lt;a href="https://github.com/pidu/git-timemachine"&gt;Git Timemachine&lt;/a&gt; which lets you move forward and back
between commits. 
&lt;/p&gt;

&lt;p&gt;
The video demos both. 
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/P-mLxkb-EE8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="git" label="git"/>
  </entry>
  <entry>
    <title>Using Emacs 41 Pandoc</title>
    <id>http://cestlaz.github.io/posts/using-emacs-41-pandoc/</id>
    <updated>2018-02-13T08:05:45-04:00</updated>
    <published>2018-02-13T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-41-pandoc/"/>
    <summary type="html">&lt;div id="outline-container-orgc73ff10" class="outline-2"&gt;
&lt;h2 id="orgc73ff10"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc73ff10"&gt;
&lt;p&gt;
Another Emacs quick hit today. Actually, not really Emacs. Today's
video is a quick, really quick, look at &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;. Pandoc is a document
converter. 
&lt;/p&gt;

&lt;p&gt;
Here are the formats that Pandoc can covert read from:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored Markdown,
MultiMarkdown, and (subsets of) Textile, reStructuredText, HTML,
LaTeX, MediaWiki markup, TWiki markup, TikiWiki markup, Creole 1.0,
Haddock markup, OPML, Emacs Org mode, DocBook, JATS, Muse, txt2tags,
Vimwiki, EPUB, ODT, and Word docx.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And here are the ones it can write to:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
plain text, Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored
Markdown, MultiMarkdown, reStructuredText, XHTML, HTML5, LaTeX
(including beamer slide shows), ConTeXt, RTF, OPML, DocBook, JATS,
OpenDocument, ODT, Word docx, GNU Texinfo, MediaWiki markup, DokuWiki
markup, ZimWiki markup, Haddock markup, EPUB (v2 or v3), FictionBook2,
Textile, groff man, groff ms, Emacs Org mode, AsciiDoc, InDesign ICML,
TEI Simple, Muse, PowerPoint slide shows and Slidy, Slideous,
DZSlides, reveal.js, PDF
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
That's pretty impressive
&lt;/p&gt;

&lt;p&gt;
I was faced with an html file describing a lab for all the CSCI13500
students at Hunter. I wanted to modify it for my class and that was
going to be a bear. I also wanted an easy way to have it render up on
GitHub. With pandoc, it was trivial. I just typed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pandoc -f html -t org -o lab3.org lab3.html
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which converted the file to org-mode. This was trivial to edit and
then I uploaded it to GitHub as the lab's Readme.org file which GitHub
automatically renders on the project page.
&lt;/p&gt;

&lt;p&gt;
Pandoc for the win.
&lt;/p&gt;

&lt;p&gt;
I've also used pandoc to move between org-mode and word files. 
&lt;/p&gt;

&lt;p&gt;
If you haven't checked out pandoc, you should.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/qVUZsH-MDRM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
  </entry>
  <entry>
    <title>Using Emacs 40 - Atomic Chrome</title>
    <id>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</id>
    <updated>2018-01-31T07:00:00-04:00</updated>
    <published>2018-01-31T07:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/"/>
    <summary type="html">&lt;div id="outline-container-orga67df5e" class="outline-2"&gt;
&lt;h2 id="orga67df5e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga67df5e"&gt;
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I'll try to get to them in the coming months.
&lt;/p&gt;

&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b98720" class="outline-2"&gt;
&lt;h2 id="org6b98720"&gt;UPDATE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6b98720"&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;

&lt;p&gt;
All you have to do is:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Go to &lt;b&gt;&lt;b&gt;chrome://extensions&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;On the bottom of the page you'll see a button to set &lt;b&gt;&lt;b&gt;keyboard shortcuts&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Set the shortcut for Atomic Chrome&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wyPZws66Sic" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 2017 Recap</title>
    <id>http://cestlaz.github.io/posts/using-emacs-2017-recap/</id>
    <updated>2017-12-29T14:17:53-04:00</updated>
    <published>2017-12-29T14:17:53-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-2017-recap/"/>
    <summary type="html">&lt;div id="outline-container-orga4ea7ab" class="outline-2"&gt;
&lt;h2 id="orga4ea7ab"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga4ea7ab"&gt;
&lt;p&gt;
This past year I recorded 14 Using Emacs videos. This is on top of the
25 videos I made last year. The fall off in production is
understandable. I got through my day to day configuration in the
late 20s and since then the videos have just been on things I've
rediscovered, things that became useful and things that I just found
interesting. It was also a busier year.
&lt;/p&gt;

&lt;p&gt;
Why did I start the series? Mostly for my students. There's the built
in Emacs tutorial and other beginner resources but how do you go from
the basics to a real working configuration? For years I would show my
kids Emacs and use it in class but there was never a path for them to
follow from beginner to craftsman. I hoped the videos would fill the
void.
&lt;/p&gt;

&lt;p&gt;
It probably didn't. I don't think I'm getting greater Emacs adoption
from my students but on the other hand, I've found making the series
rewarding for other reasons.
&lt;/p&gt;

&lt;p&gt;
First and foremost, it's allowed me to be an active contributing
member of the Emacs community. I haven't written any Emacs packages
nor am I an active guy on any Emacs forums but this is a way I can do
my part. 
&lt;/p&gt;

&lt;p&gt;
Second, although there hasn't been a great deal of comments on the
videos or blog posts I've gotten to know a few people that I wouldn't
have gotten to know otherwise.
&lt;/p&gt;

&lt;p&gt;
It also shows that that if you put things out there people might find
it useful. I don't know how many people saw my Emacs posts at the
start but a year and half later I've got 1,700 YouTube
subscribers. Sure, that's nothing compared to many YouTubers but 
for a guy making schlocky videos at his desk about an as much as I hate to admit it
non-maintream editor, I think it's pretty cool.
&lt;/p&gt;

&lt;p&gt;
The question is what to make videos on moving forward? 
&lt;/p&gt;

&lt;p&gt;
I thought I'd throw it out to the community. Here's an embedded
poll. Feel free to suggest other topics either on the blog or
as a Twitter reply.
&lt;/p&gt;

&lt;p&gt;
I can't promise I'll get to all or any but I'll certainly check out
the popular suggestions.
&lt;/p&gt;

&lt;script type="text/javascript" src="http://www.easypolls.net/ext/scripts/emPoll.js?p=5a46abd4e4b04ebe73ddc4de"&gt;&lt;/script&gt;&lt;a class="OPP-powered-by" href="http://www.objectplanet.com/opinio/" style="text-decoration:none;"&gt;&lt;div style="font: 9px arial; color: gray;"&gt;survey service&lt;/div&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
  </entry>
  <entry>
    <title>Using Emacs 39 - mu4e</title>
    <id>http://cestlaz.github.io/posts/using-emacs-39-mu4e/</id>
    <updated>2017-12-24T09:00:00-04:00</updated>
    <published>2017-12-24T09:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-39-mu4e/"/>
    <summary type="html">&lt;div id="outline-container-org5027cd9" class="outline-2"&gt;
&lt;h2 id="org5027cd9"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5027cd9"&gt;
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I've been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account. 
&lt;/p&gt;

&lt;p&gt;
I've had lots of requests for a video on what I do but I've been
hesitant for two reasons:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;There are parts of my configuration that are copied from others and
I really don't understand.&lt;/li&gt;
&lt;li&gt;I wasn't happy with the complexity and some of the tooling.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
While there are still parts of my configuration that I'm not 100%
clear on I've cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync. 
&lt;/p&gt;

&lt;p&gt;
Here's a writeup on configuring things with video at the end.
&lt;/p&gt;

&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Get the email from the server to the local machine using IMAP.&lt;/li&gt;
&lt;li&gt;Setting up mu.&lt;/li&gt;
&lt;li&gt;Access the email locally from Emacs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-org13f3b7b" class="outline-3"&gt;
&lt;h3 id="org13f3b7b"&gt;Part 1 Getting the email to your local machine using mbsync&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org13f3b7b"&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href="https://twitter.com/robstewartUK"&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html"&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href="https://sourceforge.net/p/isync/isync/ci/master/tree/"&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./autogen.sh
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I followed Rob's instructions basically verbatim for the password and
authentication stuff so I suggest you do the same. 
&lt;/p&gt;

&lt;p&gt;
You'll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1213d66" class="outline-3"&gt;
&lt;h3 id="org1213d66"&gt;Part 2 - setting up mu.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1213d66"&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html"&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.
&lt;/p&gt;


&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mu index
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href="http://www.djcbsoftware.nl/code/mu/cheatsheet.html"&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5cd1790" class="outline-3"&gt;
&lt;h3 id="org5cd1790"&gt;Setting up mu4e in emacs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5cd1790"&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob's
configuration in his post or my &lt;a href="https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el"&gt;sample&lt;/a&gt; config. You'll have to take a
few minutes to go through either and make the appropriate changes but 
the required changes should be cleared.
&lt;/p&gt;

&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.
&lt;/p&gt;

&lt;p&gt;
I'm very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.
&lt;/p&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/newRHXKm4H4" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 38 - dired</title>
    <id>http://cestlaz.github.io/posts/using-emacs-38-dired/</id>
    <updated>2017-11-24T09:00:00-04:00</updated>
    <published>2017-11-24T09:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-38-dired/"/>
    <summary type="html">&lt;div id="outline-container-orgeece936" class="outline-2"&gt;
&lt;h2 id="orgeece936"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeece936"&gt;
&lt;p&gt;
The 38th installment of Using Emacs is about &lt;b&gt;&lt;b&gt;dired&lt;/b&gt;&lt;/b&gt;, Emacs' built
in mode for navigating and working with directories.
&lt;/p&gt;

&lt;p&gt;
I'm not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I'd love to hear some configuration and
use suggestions from people who use it regularly.
&lt;/p&gt;

&lt;p&gt;
Here's the configuration I use:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dired+&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'dired+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which merely adds dired+ into the mix.
&lt;/p&gt;

&lt;p&gt;
I also started playing with &lt;a href="https://github.com/joddie/pcre2el"&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;pcre2el&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pcre-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href="http://irreal.org/blog/?p=6760"&gt;link&lt;/a&gt;, &lt;a href="https://oremacs.com/2017/11/18/dired-occur/"&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href="https://github.com/mhayashi1120/Emacs-wgrep"&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; which looks to be
useful.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;wgrep&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;counsel-fzf-cmd&lt;/span&gt; &lt;span class="s"&gt;"/home/zamansky/.fzf/bin/fzf -f %s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To help get started here are links to a couple of cheat sheets:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf"&gt;dired reference card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf"&gt;another dired cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll probably use dired more frequently but again, would love to hear
how other people are using it.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Fg7HmmRYWy8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 37 - Treemacs file browser</title>
    <id>http://cestlaz.github.io/posts/using-emacs-37-treemacs/</id>
    <updated>2017-09-24T11:22:54-04:00</updated>
    <published>2017-09-24T11:22:54-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-37-treemacs/"/>
    <summary type="html">&lt;div id="outline-container-org8a96964" class="outline-2"&gt;
&lt;h2 id="org8a96964"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8a96964"&gt;
&lt;p&gt;
I've been meaning to get back to making Emacs videos but I've been
having trouble figuring out what to record.
&lt;/p&gt;

&lt;p&gt;
People have asked for &lt;a href="https://github.com/magit/magit"&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I'd also like to
get more comfortable with DIRED mode and then do a video on it but I'm
not there yet. I've also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;

&lt;p&gt;
This morning I saw an post on the &lt;a href="https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/"&gt;Emacs subreddit&lt;/a&gt; about &lt;a href="https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs"&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It's pretty
slick. I particularly like the integration with &lt;a href="https://github.com/bbatsov/projectile"&gt;projectile&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I suspect I won't integrate a file browser side bar into my workflow -
I've probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ACg6RnVdw8k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 36 - A Touch of Elisp</title>
    <id>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</id>
    <updated>2017-07-30T11:22:54-04:00</updated>
    <published>2017-07-30T11:22:54-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/"/>
    <summary type="html">&lt;div id="outline-container-org63e8a83" class="outline-2"&gt;
&lt;h2 id="org63e8a83"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org63e8a83"&gt;
&lt;p&gt;
I've been working on a vue.js project this summer. During the school
year I really can't dive into code so it's been fun.
&lt;/p&gt;

&lt;p&gt;
I've already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn't easily do was arrange windows the way I
wanted.
&lt;/p&gt;

&lt;p&gt;
I've been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp.png" alt="touch-elisp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp2.png" alt="touch-elisp2.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;

&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/swap-windowsn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ace-swap-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aw-flip-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;z-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'z/swap-windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The video goes into more details but it shows that if you're not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/NQhud2ZNd1w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 35 - Blogging</title>
    <id>http://cestlaz.github.io/posts/using-emacs-35-blogging/</id>
    <updated>2017-06-27T11:22:54-04:00</updated>
    <published>2017-06-27T11:22:54-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-35-blogging/"/>
    <summary type="html">&lt;div id="outline-container-org76a7399" class="outline-2"&gt;
&lt;h2 id="org76a7399"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org76a7399"&gt;
&lt;p&gt;
Very little new Emacs in today's episode of Using Emacs. The video
shows my old blogging workflow and what I'm playing with now.
&lt;/p&gt;

&lt;p&gt;
The only new Emacs covered is the &lt;a href="https://github.com/rejeep/prodigy.el"&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href="https://getnikola.com/blog/index.html"&gt;Nikola&lt;/a&gt;'s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;

&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href="https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/"&gt;here&lt;/a&gt; and
&lt;a href="https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/"&gt;here&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
There's not much more to say here so enjoy the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wSeTic9obKw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 34 - ibuffer and emmet</title>
    <id>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</id>
    <updated>2017-06-15T14:00:26-05:00</updated>
    <published>2017-06-15T14:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/"/>
    <summary type="html">&lt;div id="outline-container-orgffb5b85" class="outline-2"&gt;
&lt;h2 id="orgffb5b85"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgffb5b85"&gt;
&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;

&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you'll start
to accumulate buffers. Last time, I talked about using &lt;a href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump"&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;

&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;b&gt;&lt;b&gt;list-buffers&lt;/b&gt;&lt;/b&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the list-buffers buffer brings up
more details. 
&lt;/p&gt;

&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the buffer
brings up help). 
&lt;/p&gt;

&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href="http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html"&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration (mostly stolen from Owen):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-saved-filter-groups&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dired"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dired-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^.*org$"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;js2-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eshell-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;shell-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mu4e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\*mu4e\*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"programming"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;python-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;c++-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emacs"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*scratch\\*$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*Messages\\*$"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-mode-hook&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-auto-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-switch-to-saved-filter-groups&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; don't show these&lt;/span&gt;
					&lt;span class="c1"&gt;;(add-to-list 'ibuffer-never-show-predicates "zowie")&lt;/span&gt;
&lt;span class="c1"&gt;;; Don't show filter groups if there are no buffers in that group&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-show-empty-filter-groups&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Don't ask for confirmation to delete marked buffers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-expert&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org140cd17" class="outline-2"&gt;
&lt;h2 id="org140cd17"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org140cd17"&gt;
&lt;p&gt;
The video also shows &lt;a href="https://github.com/smihica/emmet-mode"&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href="https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s"&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It's a real winner.
&lt;/p&gt;


&lt;p&gt;
Here's the config I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;emmet-mode&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'sgml-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'web-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'css-mode-hook&lt;/span&gt;  &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; enable Emmet's css abbreviation.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check them both out:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yUfA-7wWNKA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org22a8211" class="outline-2"&gt;
&lt;h2 id="org22a8211"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org22a8211"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 33 - projectile, dumb-jump</title>
    <id>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</id>
    <updated>2017-04-28T08:00:26-05:00</updated>
    <published>2017-04-28T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/"/>
    <summary type="html">&lt;div id="outline-container-org9d4e149" class="outline-2"&gt;
&lt;h2 id="org9d4e149"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d4e149"&gt;
&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href="https://github.com/ericdanan/counsel-projectile"&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; projectile&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;projectile-global-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;projectile-completion-system&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel-projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;counsel-projectile-on&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it's a
git or other source control repo, if it's created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;b&gt;&lt;b&gt;.projectile&lt;/b&gt;&lt;/b&gt; in
the root directory of the project.
&lt;/p&gt;

&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;

&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;b&gt;&lt;b&gt;which-key&lt;/b&gt;&lt;/b&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;

&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href="http://projectile.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The other package I show is &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;. It's basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;

&lt;p&gt;
Here's my current config:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"M-g o"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g x"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external-other-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-selector&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="c1"&gt;;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dumb-jump-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wBfZzaff77g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org771aaa5" class="outline-2"&gt;
&lt;h2 id="org771aaa5"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org771aaa5"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 32 - C++</title>
    <id>http://cestlaz.github.io/posts/using-emacs-32-cpp/</id>
    <updated>2017-03-04T08:00:26-05:00</updated>
    <published>2017-03-04T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-32-cpp/"/>
    <summary type="html">&lt;div id="outline-container-org8c86782" class="outline-2"&gt;
&lt;h2 id="org8c86782"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8c86782"&gt;
&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;

&lt;p&gt;
The big difference is instead of building on my &lt;a href="https://github.com/zamansky/using-emacs"&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It's all
pulled from the main config with one additional package.
&lt;/p&gt;

&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; in a
directory off of your home directory named &lt;b&gt;&lt;b&gt;.emacs.d&lt;/b&gt;&lt;/b&gt; and run emacs,
it will install everything and you'll be good to go.
&lt;/p&gt;

&lt;p&gt;
If you've been following this series, the only new package is &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Package&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;which-key&lt;/td&gt;
&lt;td class="org-left"&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;auto-complete&lt;/td&gt;
&lt;td class="org-left"&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;flycheck&lt;/td&gt;
&lt;td class="org-left"&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;yasnippet&lt;/td&gt;
&lt;td class="org-left"&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;ggtags&lt;/td&gt;
&lt;td class="org-left"&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;color-theme&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;moe-theme&lt;/td&gt;
&lt;td class="org-left"&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The video also show me using &lt;b&gt;&lt;b&gt;counsel-ag&lt;/b&gt;&lt;/b&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href="http://cestlaz.github.io/posts/using-emacs-6-swiper"&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;b&gt;&lt;b&gt;smartparens&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;hungry-delete&lt;/b&gt;&lt;/b&gt; and
probably a few more.
&lt;/p&gt;

&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;

&lt;p&gt;
If you're an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven't done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;

&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;


&lt;p&gt;
Here's the configuration code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; set up package sources&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; small interface tweaks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; bring up help for key bindings&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; Auto completion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; on the fly syntax checking&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; snippets and snippet expansion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;;; Theme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;color-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;moe-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;moe-light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7SQmleA4EMo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4fe293e" class="outline-2"&gt;
&lt;h2 id="org4fe293e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4fe293e"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 31 - elfeed part 3 - macros</title>
    <id>http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</id>
    <updated>2017-03-01T08:00:26-05:00</updated>
    <published>2017-03-01T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/"/>
    <summary type="html">&lt;div id="outline-container-org18633f6" class="outline-2"&gt;
&lt;h2 id="org18633f6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org18633f6"&gt;
&lt;p&gt;
In &lt;a href="http://cestlaz.github.io/posts/using-emacs-30-elfeed-2"&gt;part 2&lt;/a&gt; I talked about how I used &lt;a href="https://github.com/abo-abo/hydra"&gt;Hyrdas&lt;/a&gt; to quickly navigate through
elfeed tags. It was a nice step up but the fact that I still had to
manually edit my configuration code for every new tag to update the
hydra was a problem.
&lt;/p&gt;

&lt;p&gt;
Basically, I had to somehow or other, take a list of all the active
tags and with it build a &lt;b&gt;&lt;b&gt;defhydra&lt;/b&gt;&lt;/b&gt; command that will then make my
Hydra.
&lt;/p&gt;

&lt;p&gt;
Fortunately, emacs, being a lisp, has macros. I'm not talking about
keyboard macros which I talked about in &lt;a href="http://cestlaz.github.io/posts/using-emacs-15-macros/#.WLbj5t9idKQ"&gt;episode 15&lt;/a&gt; but rather &lt;a href="http://wiki.c2.com/?LispMacro"&gt;Lisp
style macros&lt;/a&gt;. Macros let you transform code and then execute the
transformed code. 
&lt;/p&gt;

&lt;p&gt;
The example I give in the video:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;infix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;infix&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; evaluates to 11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This transforms the &lt;b&gt;&lt;b&gt;3+8&lt;/b&gt;&lt;/b&gt; into &lt;b&gt;&lt;b&gt;(+ 3 8)&lt;/b&gt;&lt;/b&gt; and then evaluates it to
be 11.
&lt;/p&gt;

&lt;p&gt;
We can use this idea with our Hydra.
&lt;/p&gt;

&lt;p&gt;
We can use the call &lt;b&gt;&lt;b&gt;elfeed-db-get-all-tags&lt;/b&gt;&lt;/b&gt; to get a list of all
the tags in our database. I decided that if I had an uppercase letter
in the tag, I'd use the lowercase version of that letter as my "hotkey"
and if it didn't, I'd just use the first letter.
&lt;/p&gt;

&lt;p&gt;
So, given a tag list of:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;active&lt;/span&gt; &lt;span class="nv"&gt;blogs&lt;/span&gt; &lt;span class="nv"&gt;cs&lt;/span&gt; &lt;span class="nv"&gt;eDucation&lt;/span&gt; &lt;span class="nv"&gt;emacs&lt;/span&gt; &lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;misc&lt;/span&gt; &lt;span class="nv"&gt;sports&lt;/span&gt; &lt;span class="nv"&gt;star&lt;/span&gt; &lt;span class="nv"&gt;tech&lt;/span&gt; &lt;span class="nv"&gt;unread&lt;/span&gt; &lt;span class="nv"&gt;webcomics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'd want a "hotkey" of &lt;b&gt;&lt;b&gt;b&lt;/b&gt;&lt;/b&gt; for logs and &lt;b&gt;&lt;b&gt;d&lt;/b&gt;&lt;/b&gt; for eDucation.
&lt;/p&gt;

&lt;p&gt;
The routine &lt;b&gt;&lt;b&gt;z/hasCap&lt;/b&gt;&lt;/b&gt; tests to see if a tag has a capital letter in
it and &lt;b&gt;&lt;b&gt;z/get-hydra-option-key&lt;/b&gt;&lt;/b&gt; returns the final "hotkey:"
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/hasCap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;case-fold-search&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match-p&lt;/span&gt; &lt;span class="s"&gt;"[[:upper:]]"&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/get-hydra-option-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"returns single upper case letter (converted to lower) or first"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z/hasCap&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;loc&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;substring &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;loc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;loc&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;substring &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;mz/make-elfeed-cats&lt;/b&gt;&lt;/b&gt; takes a list of tags and returns a list of
items where each item is in the form expected by the hydra definition:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +tagname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"tagname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mz/make-elfeed-cats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Returns a list of lists. Each one is line for the hydra configuratio in the form&lt;/span&gt;
&lt;span class="s"&gt;     (c function hint)"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapcar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tagstring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;symbol-name&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z/get-hydra-option-key&lt;/span&gt; &lt;span class="nv"&gt;tagstring&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		   &lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-search-set-filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +%s"&lt;/span&gt; &lt;span class="nv"&gt;tagstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;tagstring&lt;/span&gt;  &lt;span class="p"&gt;)))&lt;/span&gt;
	  &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Finally, here's our macro:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;mz/make-elfeed-hydra&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="s"&gt;"filter"&lt;/span&gt;
     &lt;span class="o"&gt;,@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/make-elfeed-cats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-get-all-tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +star"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Starred"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt; &lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"All"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@1-day-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Today"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="s"&gt;"Quit Elfeed"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The line that starts with &lt;b&gt;&lt;b&gt;,@&lt;/b&gt;&lt;/b&gt; calls the routine that builds lines
of code for all the tags in the database and the macro leaves me with
the defhydra I need.
&lt;/p&gt;


&lt;p&gt;
I then redefine the hydra every time I need it, just in case tags
changed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/make-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
and bind &lt;b&gt;&lt;b&gt;mz/make-and-run-elfeed-hydra&lt;/b&gt;&lt;/b&gt; to j and J in my elfeed
keymap (this code goes in the bind section of my use-package elfeed
section):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As long as I remember to name my tags in a way that they don't
conflict with one another I can quickly navigate all around elfeed.
&lt;/p&gt;

&lt;p&gt;
Macros FTW!!!!
&lt;/p&gt;


&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5zuSUbAHH8c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgced1c8c" class="outline-3"&gt;
&lt;h3 id="orgced1c8c"&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgced1c8c"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 30 - elfeed part 2 - Hydras</title>
    <id>http://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</id>
    <updated>2017-02-25T08:00:26-05:00</updated>
    <published>2017-02-25T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-30-elfeed-2/"/>
    <summary type="html">&lt;div id="outline-container-orgd9c02ea" class="outline-2"&gt;
&lt;h2 id="orgd9c02ea"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd9c02ea"&gt;
&lt;p&gt;
In &lt;a href="http://cestlaz.github.io/posts/using-emacs-29%20elfeed/"&gt;part 1&lt;/a&gt;, I talked about &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;, a really awesome feed reader for
emacs. Generally, I'm really liking it but there's been one problem -
not being able to navigate quickly between groups of feeds with a
keystroke or two.
&lt;/p&gt;

&lt;p&gt;
It's emacs so there has to be a solution.
&lt;/p&gt;

&lt;p&gt;
Enter &lt;a href="https://github.com/abo-abo/hydra"&gt;hydra&lt;/a&gt; - a terrific emacs package from the same guy who brought
us &lt;a href="https://github.com/abo-abo/hydra"&gt;swiper&lt;/a&gt;, another one of my favorite emacs packages.
&lt;/p&gt;

&lt;p&gt;
Basically, Hydra allows us to create Hydras - a collection of emacs
commands tied o a single prefix along with a nice interface and help
system.
&lt;/p&gt;

&lt;p&gt;
Truth be told, I don't use hydra as much anymore since &lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;
does such a great job most of the time. Which-key, however, is no help
here.
&lt;/p&gt;

&lt;p&gt;
Here's the code to install hydra along with a some of sample Hydra's
I use:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;hydra&lt;/span&gt; 
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for modes that toggle on and off&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"toggle"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="nv"&gt;abbrev-mode&lt;/span&gt; &lt;span class="s"&gt;"abbrev"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="nv"&gt;flyspell-mode&lt;/span&gt; &lt;span class="s"&gt;"flyspell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="nv"&gt;toggle-debug-on-error&lt;/span&gt; &lt;span class="s"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;fci-mode&lt;/span&gt; &lt;span class="s"&gt;"fCi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt; &lt;span class="nv"&gt;auto-fill-mode&lt;/span&gt; &lt;span class="s"&gt;"fill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="nv"&gt;toggle-truncate-lines&lt;/span&gt; &lt;span class="s"&gt;"truncate"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt; &lt;span class="nv"&gt;whitespace-mode&lt;/span&gt; &lt;span class="s"&gt;"whitespace"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"cancel"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x j"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;gotoline&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;:pre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;linum-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="nv"&gt;:post&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;linum-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="s"&gt;"goto"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"top"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"bottom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"middle"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;end-of-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;recenter-top-bottom&lt;/span&gt; &lt;span class="s"&gt;"recenter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="nv"&gt;next-line&lt;/span&gt; &lt;span class="s"&gt;"down"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forward-line&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="s"&gt;"up"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt; &lt;span class="nv"&gt;goto-line&lt;/span&gt; &lt;span class="s"&gt;"goto-line"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for some org-mode stuff&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;hydra-global-org&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"Org"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-start&lt;/span&gt; &lt;span class="s"&gt;"Start Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-stop&lt;/span&gt; &lt;span class="s"&gt;"Stop Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-set-timer&lt;/span&gt; &lt;span class="s"&gt;"Set Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; This one requires you be in an orgmode doc, as it sets the timer for the header&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt; &lt;span class="nv"&gt;org-timer&lt;/span&gt; &lt;span class="s"&gt;"Print Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; output timer value to buffer&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-clock-in&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"Clock-In"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt; &lt;span class="nv"&gt;org-clock-out&lt;/span&gt; &lt;span class="s"&gt;"Clock-Out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; you might also want (setq org-log-note-clock-out t)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="nv"&gt;org-clock-goto&lt;/span&gt; &lt;span class="s"&gt;"Clock Goto"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; global visit the clocked task&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;org-capture&lt;/span&gt; &lt;span class="s"&gt;"Capture"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;rg-capture-goto-last-stored&lt;/span&gt; &lt;span class="s"&gt;"Last Capture"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Take a look at the &lt;a href="https://github.com/abo-abo/hydra"&gt;Hydra&lt;/a&gt; home page for detailed information.
&lt;/p&gt;

&lt;p&gt;
With Hydra installed, I can creat one for navigating in elfeed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="s"&gt;"filter"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +cs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"cs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +emacs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"emacs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +education"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"education"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +star"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Starred"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt; &lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"All"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@1-day-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Today"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="s"&gt;"Quit Elfeed"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and add a binding to the elfeed key map:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;elfeed-search-mode-map&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This isn't the actual Hydra I use – we'll get to that in the next
installment where I'll show how to make a Hydra on the fly that
contains keys for all your elfeed tags but this is a reasonable example.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tjnK1rkO7RU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgda40923" class="outline-2"&gt;
&lt;h2 id="orgda40923"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgda40923"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 29 -elfeed part 1</title>
    <id>http://cestlaz.github.io/posts/using-emacs-29%20elfeed/</id>
    <updated>2017-02-22T08:00:26-05:00</updated>
    <published>2017-02-22T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-29%20elfeed/"/>
    <summary type="html">&lt;div id="outline-container-orgdb5e2c2" class="outline-2"&gt;
&lt;h2 id="orgdb5e2c2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdb5e2c2"&gt;
&lt;p&gt;
Since the demise of Google Reader, I've been using &lt;a href="http://feedly.com"&gt;Feedly&lt;/a&gt; to read my
streams. Feedly's a nice product and it's been working well for me for
quite some time. 
&lt;/p&gt;

&lt;p&gt;
A few days ago, I decided to see what emacs had to offer on the feed
reader front. One solution was Gnus but then I've never been able to
get my head around Gnus. Another was &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I thought I'd give elfeed a go. 
&lt;/p&gt;

&lt;p&gt;
Combined with elfeed-goodies and elfeed-org it's a pretty nice
solution. You can easily search by either keywords or tags and tags
are particularly easy to set up with elfeed-org. 
&lt;/p&gt;

&lt;p&gt;
If I want to display all the items from the last month, I hit &lt;b&gt;&lt;b&gt;s&lt;/b&gt;&lt;/b&gt; (for
search) and enter the query:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@6-months-ago&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For only unread posts:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@6-months-ago&lt;/span&gt; &lt;span class="nv"&gt;+unread&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For unread posts tagged emacs:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@6-months-ago&lt;/span&gt; &lt;span class="nv"&gt;+unread&lt;/span&gt; &lt;span class="nv"&gt;+emacs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And for everything in the past 24 hours, read or not:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@1-day-ago&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's pretty easy and pretty slick. The only thing missing is easy
single key navigation. There's one solution to that problem over at
&lt;a href="http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/"&gt;Pragmatic Emacs&lt;/a&gt; and I'll present another one in the next two posts.
&lt;/p&gt;

&lt;p&gt;
I'm using some of the code from pragmatic emacs (the functions that start
with &lt;b&gt;&lt;b&gt;bjm&lt;/b&gt;&lt;/b&gt;) which makes things easier when sharing the elfeed
database on Dropbox (see the Pragmatic Emacs post above for details) and also a couple of routines I found via web
search). 
&lt;/p&gt;

&lt;p&gt;
Here's my basic configuration:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;elfeed-db-directory&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/shared/elfeeddb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;elfeed-mark-all-as-read&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mark-whole-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-untag-all-unread&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
&lt;span class="c1"&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-load-db-and-open&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Wrapper to load the elfeed db from disk before opening"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-update--force&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;;write to disk when quiting&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Wrapper to save the elfeed db to disk before burying buffer"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;quit-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;



&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'elfeed-toggle-star&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-expose&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'elfeed-search-toggle-all&lt;/span&gt; &lt;span class="ss"&gt;'star&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;elfeed-search-mode-map&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed-goodies&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-goodies/setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed-org&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;rmh-elfeed-org-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/shared/elfeed.org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check out elfeed and make sure to go to the links provided on the main
&lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt; page.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc9d41b4" class="outline-2"&gt;
&lt;h2 id="orgc9d41b4"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc9d41b4"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pOFqzK1Ymr4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb2d0880" class="outline-2"&gt;
&lt;h2 id="orgb2d0880"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb2d0880"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 28 -Rectangles</title>
    <id>http://cestlaz.github.io/posts/using-emacs-27-rectangles/</id>
    <updated>2017-02-09T08:00:26-05:00</updated>
    <published>2017-02-09T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-27-rectangles/"/>
    <summary type="html">&lt;div id="outline-container-org6a5f649" class="outline-2"&gt;
&lt;h2 id="org6a5f649"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6a5f649"&gt;
&lt;p&gt;
One of my favorite but little used emacs features is rectangular
editing. It's little used because I don't need it all that often. It's
one of my favorites because when I do need it, it's just so amazingly
useful.
&lt;/p&gt;

&lt;p&gt;
The idea is you can mark a rectangle of text, cut it and later paste
it.  This means that if you have three columns of text:
&lt;/p&gt;

&lt;pre class="example"&gt;
a b c
d e f
g h i
j k l
&lt;/pre&gt;

&lt;p&gt;
You can easily mark the middle column (b e h k) or even just the b e
and h, cut it and paste it elsewhere as a rectangle. You can also open
up a rectangular region (filled with whitespace). There are a couple
of other niceties but that's the basic idea.
&lt;/p&gt;

&lt;p&gt;
Here's a link to all the functions:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html"&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org97708c7" class="outline-2"&gt;
&lt;h2 id="org97708c7"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org97708c7"&gt;
&lt;p&gt;
And the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pcA5NeEudgU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgadf5749" class="outline-2"&gt;
&lt;h2 id="orgadf5749"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgadf5749"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 27 - shell and eshell</title>
    <id>http://cestlaz.github.io/posts/using-emacs-27-shell/</id>
    <updated>2017-01-27T08:00:26-05:00</updated>
    <published>2017-01-27T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-27-shell/"/>
    <summary type="html">&lt;div id="outline-container-orgc7ae192" class="outline-2"&gt;
&lt;h2 id="orgc7ae192"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc7ae192"&gt;
&lt;p&gt;
While I use emacs for all all sorts of things, one of the things I
haven't done much is run shells from within emacs. I'm not sure
why. I'm a command line wonk and adding command line goodness and
emacs together seems like a natural. Maybe it's because back in the
day I spent a lot of time on MS-DOS systems. You could get a
reasonable Unixy facsimile using tools like the &lt;a href="https://en.wikipedia.org/wiki/MKS_Toolkit"&gt;MKS toolkit&lt;/a&gt; and I like
so many other young computer scientists wrote our own small shells
when we learned C so I used that insted of command.com. 
&lt;/p&gt;

&lt;p&gt;
In any event, I'm trying to use the shell within emacs more. 
&lt;/p&gt;

&lt;p&gt;
Here's a quick video showing both &lt;b&gt;&lt;b&gt;shell&lt;/b&gt;&lt;/b&gt;, which runs whatever your
default shell is in an emacs buffer and &lt;b&gt;&lt;b&gt;eshell&lt;/b&gt;&lt;/b&gt; which is emacs own
shell.
&lt;/p&gt;

&lt;p&gt;
I use a couple of packages to smooth over a couple of things.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/porterjamesj/virtualenvwrapper.el"&gt;Virtuelenvwrapper&lt;/a&gt; smooths things voer with the python virtaulenv and
virtualenvwrapper linux packages:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;virtualenvwrapper&lt;/span&gt;
      &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;:config&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;venv-initialize-interactive-shells&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;venv-initialize-eshell&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Only relevant if you use Python and virtualenvs.
&lt;/p&gt;

&lt;p&gt;
and more importantly, &lt;a href="https://github.com/killdash9/better-shell"&gt;better shell&lt;/a&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;better-shell&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"C-'"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;better-shell-shell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;better-shell-remote-open&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
cleans things up when using a termianl to connect to a remote machine.
&lt;/p&gt;

&lt;p&gt;
If you use a shell from within emacs as part of your workflow, please
post how, or better, make a video!!!!
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5b92f2b" class="outline-2"&gt;
&lt;h2 id="org5b92f2b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5b92f2b"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pjhRFMUxBB4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org128d3ac" class="outline-2"&gt;
&lt;h2 id="org128d3ac"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org128d3ac"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 26 - Google Calendar, Org Agenda</title>
    <id>http://cestlaz.github.io/posts/using-emacs-26-gcal/</id>
    <updated>2017-01-05T10:00:26-05:00</updated>
    <published>2017-01-05T10:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-26-gcal/"/>
    <summary type="html">&lt;div id="outline-container-orgb07b70c" class="outline-2"&gt;
&lt;h2 id="orgb07b70c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb07b70c"&gt;
&lt;p&gt;
A while ago I did a couple of videos on how I use org-capture
(&lt;a href="http://cestlaz.github.io/posts/using-emacs-23-capture-1/"&gt;part 1&lt;/a&gt;, &lt;a href="http://cestlaz.github.io/posts/using-emacs-24-capture-2/"&gt;part 2&lt;/a&gt;). I didn't get into a big part of org-capture - how I
use org-mode and capture to manage my calendar and todo lists.
&lt;/p&gt;

&lt;p&gt;
I was waiting to see if I liked my current setup - using &lt;a href="https://github.com/myuhe/org-gcal.el"&gt;org-gcal&lt;/a&gt; to
sync with my Google Calendar for appointments while using my main org
file for my todo list.
&lt;/p&gt;

&lt;p&gt;
Coincidentally, Rainer König recently put up a video on how he &lt;a href="https://www.youtube.com/watch?v=cIzzjSaq2N8&amp;amp;amp;list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&amp;amp;amp;index=33"&gt;syncs
with his Google calendar&lt;/a&gt;. He uses a different method than the one I
present in this video so make sure to check out his approach. In fact,
you should check out his entire &lt;a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE"&gt;series on org-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here's the code I use install org-gcal. The video steps through
setting up things on the Google side. You'll have to replace the
&lt;b&gt;&lt;b&gt;client ID&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;client secrets&lt;/b&gt;&lt;/b&gt; in the code below as well as use
your calendar name and whatever org file you want to sync with.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-check-signature&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;org-gcal&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-gcal-client-id&lt;/span&gt; &lt;span class="s"&gt;"oauth 2.0 client ID"&lt;/span&gt;
	&lt;span class="nv"&gt;org-gcal-client-secret&lt;/span&gt; &lt;span class="s"&gt;"client secret"&lt;/span&gt;
	&lt;span class="nv"&gt;org-gcal-file-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"zamansky@gmail.com"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I use these two hooks to sync things semi-automatically. The first
hook syncs whenever I load the agenda. Since this happens in the
background, if I just added something to my calendar, I might have to
reload the agenda by hitting &lt;b&gt;&lt;b&gt;r&lt;/b&gt;&lt;/b&gt; in the agenda view. 
&lt;/p&gt;

&lt;p&gt;
The second hook syncs with my Google calendar when I capture.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-agenda-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-gcal-sync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-capture-after-finalize-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-gcal-sync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are the rest of my settings. The org files I want to include in
my agenda views:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;gcal.org – the one I'm syncing&lt;/li&gt;
&lt;li&gt;i.org – my main org file for todo items (the todo capture places
things in here)&lt;/li&gt;
&lt;li&gt;schedule.org – my old schedule before I was syncing with
Google. Not active anymore. I should probably remove it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Also, my capture settings:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-agenda-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt;
			     &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt;
			     &lt;span class="s"&gt;"~/Dropbox/orgfiles/schedule.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="s"&gt;"Appointment"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;  &lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="s"&gt;"Link"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/links.org"&lt;/span&gt; &lt;span class="s"&gt;"Links"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %? %^L %^g \n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="s"&gt;"Blog idea"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Blog Topics:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="s"&gt;"To Do Item"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"To Do"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* TODO %?\n%u"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="s"&gt;"Note"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Note space"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%u"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="s"&gt;"Journal"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+datetree&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/journal.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\nEntered on %U\n  %i\n  %a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="s"&gt;"Screencast"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/screencastnotes.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%i\n"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;
The end result is that I can add an event in my Google calendar (or
accept a calendar invite) and it appears in my org-mode
agenda. Likewise, I can add a scheduled event using capture and it
will sync up to Google. I can also just add an event by editing
gcal.org but then would have to run &lt;b&gt;&lt;b&gt;org-gcal-post-at-point&lt;/b&gt;&lt;/b&gt; to send
it up to Google.
&lt;/p&gt;

&lt;p&gt;
Now, I can use bring up a regular agenda &lt;b&gt;&lt;b&gt;C-a a&lt;/b&gt;&lt;/b&gt;, my todo list &lt;b&gt;&lt;b&gt;C-a
t&lt;/b&gt;&lt;/b&gt; or by adding a custom agenda command:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-agenda-custom-commands&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="s"&gt;"Simple agenda view"&lt;/span&gt;
	 &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;agenda&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;alltodo&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
a combined agenda and todo view using &lt;b&gt;&lt;b&gt;C-a n&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;
Finally, there's &lt;a href="https://github.com/kiwanami/emacs-calfw"&gt;calfw&lt;/a&gt;. It's a nice tool to view calendars in
Google. I don't use it much anymore but it is nice:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;calfw&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="c1"&gt;;TODO: &lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw-org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cfw:org-overwrite-default-keybinding&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw-ical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mycalendar&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cfw:open-calendar-buffer&lt;/span&gt;
     &lt;span class="nv"&gt;:contents-sources&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;
      &lt;span class="c1"&gt;;; (cfw:org-create-source "Green")  ; orgmode source&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cfw:ical-create-source&lt;/span&gt; &lt;span class="s"&gt;"gcal"&lt;/span&gt; &lt;span class="s"&gt;"https://somecalnedaraddress"&lt;/span&gt; &lt;span class="s"&gt;"IndianRed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; devorah calender&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cfw:ical-create-source&lt;/span&gt; &lt;span class="s"&gt;"gcal"&lt;/span&gt; &lt;span class="s"&gt;"https://anothercalendaraddress"&lt;/span&gt; &lt;span class="s"&gt;"IndianRed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; google calendar ICS&lt;/span&gt;
      &lt;span class="p"&gt;)))&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cfw:org-overwrite-default-keybinding&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;calfw-gcal&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
	&lt;span class="nv"&gt;:config&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw-gcal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orge908982" class="outline-2"&gt;
&lt;h2 id="orge908982"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge908982"&gt;
&lt;p&gt;
Better version:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vO_RF2dK7M0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Old, bad version:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/RyNBtfu9AJ4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9814205" class="outline-2"&gt;
&lt;h2 id="org9814205"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9814205"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 25 - Tramp</title>
    <id>http://cestlaz.github.io/posts/using-emacs-25-tramp/</id>
    <updated>2016-12-26T10:00:26-05:00</updated>
    <published>2016-12-26T10:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-25-tramp/"/>
    <summary type="html">&lt;div id="outline-container-orgb7599f1" class="outline-2"&gt;
&lt;h2 id="orgb7599f1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb7599f1"&gt;
&lt;p&gt;
Today's video talks about using emacs &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;Tramp&lt;/a&gt; mode.
&lt;/p&gt;

&lt;p&gt;
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.
&lt;/p&gt;

&lt;p&gt;
To edit a file on a machine &lt;b&gt;&lt;b&gt;www.cstuy.org&lt;/b&gt;&lt;/b&gt; I would first
&lt;b&gt;&lt;b&gt;find-file&lt;/b&gt;&lt;/b&gt; using &lt;b&gt;&lt;b&gt;C-c C-f&lt;/b&gt;&lt;/b&gt; and then for the file name to open:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;/ssh:www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;cstuy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;org:/home/zamansky/sc/testfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
this would open the file &lt;b&gt;&lt;b&gt;testfile&lt;/b&gt;&lt;/b&gt; in the absolute directory
&lt;b&gt;&lt;b&gt;/home/zamansky/sc&lt;/b&gt;&lt;/b&gt;. If my username on the remote machine is
different:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;/ssh:username@www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;cstuy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;org:/home/zamansky/sc/testfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And I can also work relative to my home directory:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;/ssh:username@www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;cstuy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;org:sc/testfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If I just hit enter after the machine name and &lt;b&gt;&lt;b&gt;:&lt;/b&gt;&lt;/b&gt; - 
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;/ssh:username@www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;cstuy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;org:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I end up in a dired buffer on the remote machine.
&lt;/p&gt;

&lt;p&gt;
Likewise if I run a &lt;b&gt;&lt;b&gt;shell&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;eshell&lt;/b&gt;&lt;/b&gt; in the tramp buffer, it
will run the shell on the remote machine. In the video I showed how
shell didn't work because locally, I'm configured to use zsh and I
don't have zsh installed remotely. Eshell, however, worked fine.
&lt;/p&gt;

&lt;p&gt;
Using tramp in this way gives us all of the power of our local emacs
configuration to edit a file on a remote machine.
&lt;/p&gt;

&lt;p&gt;
You can also use tramp to edit local files as root using sudo:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;sudo::/tmp/sc/rootfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note the double colon. 
&lt;/p&gt;

&lt;p&gt;
Finally, you can do the double-whammy - remote root editing:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ssh::www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;cstu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;org|sudo:www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;cstuy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;org:/home/zamansky/sc/rootfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
If you use zsh and any of this freezes, just do a search on "zsh
tramp" and the top couple of hits will tell you what to add to your
configuration files to fix things.
&lt;/p&gt;

&lt;p&gt;
Finally, I mentioned in the video that I don't use tramp all that much
anymore. That's mostly because I don't do much remote editing
anymore. I used it more when I was administering a number of machines
at Stuyvesant. 
&lt;/p&gt;

&lt;p&gt;
I still use it periodically, but I also use &lt;a href="https://github.com/libfuse/sshfs"&gt;sshfs&lt;/a&gt;, a Linux tool (which
may be available for other operating systems) that allows me to mount
a directory tree from a remote machine and use it on my local machine.
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Iqh50fgbIVk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;




&lt;div id="outline-container-orga25eeac" class="outline-2"&gt;
&lt;h2 id="orga25eeac"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga25eeac"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 24 - Org Capture 2</title>
    <id>http://cestlaz.github.io/posts/using-emacs-24-capture-2/</id>
    <updated>2016-12-03T15:45:26-05:00</updated>
    <published>2016-12-03T15:45:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-24-capture-2/"/>
    <summary type="html">&lt;div id="outline-container-org2dbf139" class="outline-2"&gt;
&lt;h2 id="org2dbf139"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2dbf139"&gt;
&lt;p&gt;
Not much in today's actual post. The video is a continuation of the last one on &lt;a href="http://cestlaz.github.io/posts/using-emacs-23-capture-1"&gt;org-capture&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The video goes over how I set things up to pop up a new frame to do a
capture even if emacs isn't on screen (as long as it's running) by
hitting &lt;b&gt;&lt;b&gt;F1&lt;/b&gt;&lt;/b&gt;. I would  have preferred to bind to &lt;b&gt;&lt;b&gt;C-c c&lt;/b&gt;&lt;/b&gt; - the
same as within emacs but I havn't figured out how to do that in Ubuntu
or Mint Linux yet.
&lt;/p&gt;

&lt;p&gt;
Here's the elisp code for the configuration file to do the heavy
lifting. I can't for th elife of me remember who's blog I found it
on. If anyone knows, please leave a comment - I'd like to give credit
where credit's due:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;org-capture-finalize&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;delete-capture-frame&lt;/span&gt; &lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="s"&gt;"Advise capture-finalize to close the frame"&lt;/span&gt;  
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;equal&lt;/span&gt; &lt;span class="s"&gt;"capture"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-parameter&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;'name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-frame&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;org-capture-destroy&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;delete-capture-frame&lt;/span&gt; &lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="s"&gt;"Advise capture-destroy to close the frame"&lt;/span&gt;  
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;equal&lt;/span&gt; &lt;span class="s"&gt;"capture"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-parameter&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;'name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-frame&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;noflet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;make-capture-frame&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Create a new frame and run org-capture."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-frame&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"capture"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-frame-by-name&lt;/span&gt; &lt;span class="s"&gt;"capture"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-other-windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;noflet&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;switch-to-buffer&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-capture&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emacsclient -ne "(make-capture-frame)"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There will be a third capture video in a few weeks where I'll talk
about scheduling and agendas. Right now, I'm playing with org-gcal to
sync with my Google calendar and want to figure out a config I'm happy
with before making that video.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gjr9mP01oWE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org2c41a8f" class="outline-2"&gt;
&lt;h2 id="org2c41a8f"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2c41a8f"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 23 - Org Capture 1</title>
    <id>http://cestlaz.github.io/posts/using-emacs-23-capture-1/</id>
    <updated>2016-11-29T12:00:00-04:00</updated>
    <published>2016-11-29T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-23-capture-1/"/>
    <summary type="html">&lt;div id="outline-container-org7d9bf1c" class="outline-2"&gt;
&lt;h2 id="org7d9bf1c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7d9bf1c"&gt;
&lt;p&gt;
Org mode has an amazing feature - &lt;b&gt;&lt;b&gt;org-capture&lt;/b&gt;&lt;/b&gt;. I only started
using it recently but it's really awesome. 
&lt;/p&gt;

&lt;p&gt;
What took me so long?
&lt;/p&gt;

&lt;p&gt;
Probably that the manual seemed a little intimidating. 
&lt;/p&gt;

&lt;p&gt;
It really isn't hard, though. Combined with what I'll go over in the
next video and post (and a future one for Google calendar sync) it's
what I use for:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;recording blog ideas&lt;/li&gt;
&lt;li&gt;managing bookmarks&lt;/li&gt;
&lt;li&gt;taking short Notes&lt;/li&gt;
&lt;li&gt;managing my calendar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I use the binding:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c c"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="ss"&gt;'org-capture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By default, running org-capture brings up a form to capture a "task"
but things get really cool when you start making your own capture
templates. With capture templates, you can speed up recording
information and then tell org-mode to store it where you want it.
&lt;/p&gt;

&lt;p&gt;
Here are my template settings. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="s"&gt;"Appointment"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;  &lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt; &lt;span class="s"&gt;"Appointments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="s"&gt;"Note"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/notes.org"&lt;/span&gt; &lt;span class="s"&gt;"Notes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* Note %?\n%T"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="s"&gt;"Link"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/links.org"&lt;/span&gt; &lt;span class="s"&gt;"Links"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %? %^L %^g \n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="s"&gt;"Blog idea"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Blog Topics:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="s"&gt;"To Do Item"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"To Do Items"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="s"&gt;"Journal"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+datetree&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/journal.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\nEntered on %U\n  %i\n  %a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="s"&gt;"Screencast"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/screencastnotes.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%i\n"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Let's look at the &lt;b&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/b&gt; entry:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="s"&gt;"Blog idea"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Blog Topics:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
It's a list with a bunch of options. The first string &lt;b&gt;&lt;b&gt;b&lt;/b&gt;&lt;/b&gt; is the
key to type to select this template, &lt;b&gt;&lt;b&gt;Blog idea&lt;/b&gt;&lt;/b&gt; is the actual name
for this template. 
&lt;/p&gt;

&lt;p&gt;
The next item, &lt;b&gt;&lt;b&gt;entry&lt;/b&gt;&lt;/b&gt; describes the type of template you're
creating. &lt;b&gt;&lt;b&gt;entry&lt;/b&gt;&lt;/b&gt; says you're going to create an org node with a
headline which can then be added to an org-file. You can also have
your template create things like an org list &lt;b&gt;&lt;b&gt;item&lt;/b&gt;&lt;/b&gt; a checkbox
&lt;b&gt;&lt;b&gt;checkitem&lt;/b&gt;&lt;/b&gt; or even &lt;b&gt;&lt;b&gt;plain&lt;/b&gt;&lt;/b&gt; text. You can see the full set of
options &lt;a href="http://orgmode.org/manual/Template-elements.html#Template-elements"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Next, in parentheses, you have the target - where to store the captured
info. The &lt;b&gt;&lt;b&gt;Blog idea&lt;/b&gt;&lt;/b&gt; template says &lt;b&gt;&lt;b&gt;file+headline&lt;/b&gt;&lt;/b&gt; followed by a
filename in quotes and a headline in quotes. This says to store the
new org heading you're capturing in the file
"~/Dropbox/orgfiles/i.org" under the heading "Blog Topics:" Contrast
this to the &lt;b&gt;&lt;b&gt;appointments&lt;/b&gt;&lt;/b&gt; template which just specifies &lt;b&gt;&lt;b&gt;file&lt;/b&gt;&lt;/b&gt;
and a filename. The &lt;b&gt;&lt;b&gt;appointments&lt;/b&gt;&lt;/b&gt; template will just append the new
appointment to its specified file whereas &lt;b&gt;&lt;b&gt;Blog idea&lt;/b&gt;&lt;/b&gt; will prepend
(due to the &lt;b&gt;&lt;b&gt;:prepend&lt;/b&gt;&lt;/b&gt; option at the end of the template) to the
"Blog Topics:" heading in &lt;b&gt;&lt;b&gt;i.org&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
After this we have the actual template: "* %?\n%T" - the %? and %T are
placeholders for substitutions. The &lt;b&gt;&lt;b&gt;%T&lt;/b&gt;&lt;/b&gt; prompts for a date with a
timestamp and the &lt;b&gt;&lt;b&gt;%?&lt;/b&gt;&lt;/b&gt; is where to leave the cursor for final input
before saving the capture.
&lt;/p&gt;

&lt;p&gt;
Finally, &lt;b&gt;&lt;b&gt;:prepend&lt;/b&gt;&lt;/b&gt; and other options can be found at the above link.
&lt;/p&gt;

&lt;p&gt;
All the substitutions can be found in &lt;a href="http://orgmode.org/manual/Template-expansion.html#Template-expansion"&gt;the docs&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Once you've set up your templates, it's quick and easy to capture
information. 
&lt;/p&gt;

&lt;p&gt;
This video shows the basics. The next one shows how to pop up a
capture even when you're not in emacs and how I use org-capture to
maintain my web bookmarks.
&lt;/p&gt;

&lt;p&gt;
More information on capture templates can be found &lt;a href="http://orgmode.org/manual/Capture-templates.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-wPfxuxIfeU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org4857a18" class="outline-2"&gt;
&lt;h2 id="org4857a18"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4857a18"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 21 - web mode</title>
    <id>http://cestlaz.github.io/posts/using-emacs-21-web-mode/</id>
    <updated>2016-11-16T12:00:00-04:00</updated>
    <published>2016-11-16T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-21-web-mode/"/>
    <summary type="html">&lt;div id="outline-container-org478b94b" class="outline-2"&gt;
&lt;h2 id="org478b94b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org478b94b"&gt;
&lt;p&gt;
Quick post today. 
&lt;/p&gt;

&lt;p&gt;
The video goes over web-mode - my preferred weapon for html and all the goodies you embed in an html file.
&lt;/p&gt;

&lt;p&gt;
It's multi-modal so it acts sensibly regardless of wether you're editing html, css, javascript or even templates in a single file.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; In the video, web-mode wasn't automatically inserting
quotes. I had to set hte following variable to fix this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(setq web-mode-enable-auto-quoting t)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Giving the final configuration I'm currently using: 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:config&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.html?\\'"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-engines-alist&lt;/span&gt;
	       &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"django"&lt;/span&gt;    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\\.html\\'"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-ac-sources-alist&lt;/span&gt;
	       &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"css"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-source-css-property&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-source-words-in-buffer&lt;/span&gt; &lt;span class="nv"&gt;ac-source-abbrev&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-enable-auto-closing&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-enable-auto-quoting&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; this fixes the quote problem I mentioned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The web-mode &lt;a href="http://web-mode.org"&gt;documentation&lt;/a&gt; has more information including a nice chart of all the key bindings.
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/69bQa5n23jc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgd16db53" class="outline-2"&gt;
&lt;h2 id="orgd16db53"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd16db53"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 22 - emacsclient</title>
    <id>http://cestlaz.github.io/posts/using-emacs-22-emacsclient/</id>
    <updated>2016-11-16T12:00:00-04:00</updated>
    <published>2016-11-16T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-22-emacsclient/"/>
    <summary type="html">&lt;div id="outline-container-org42c1935" class="outline-2"&gt;
&lt;h2 id="org42c1935"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org42c1935"&gt;
&lt;p&gt;
Another quick hit today.
&lt;/p&gt;

&lt;p&gt;
This video is really setting the stage for hte next two, where I talk about org-mode capturing.
&lt;/p&gt;

&lt;p&gt;
Today, we're demoing the use of the emacs server and client.
&lt;/p&gt;

&lt;p&gt;
Back in the old days, emacs took a LOOONG time to load. A complex
conviguration could take on the order of 10 to 20 seconds. This
resulted in people loading emacs at the start of the day and leaving
it up forever. While load times aren't much of an issue anymore, it's
still nice to leave emacs around all the time.
&lt;/p&gt;

&lt;p&gt;
That's where running emacs as a server comes in.. I set up a keyboard shortcut my window manager to run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emacsclient -a &lt;span class="s2"&gt;""&lt;/span&gt; -c
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Rather than trying to run emacs, this tries to connect to an already
running emacs server. The &lt;b&gt;&lt;b&gt;-c&lt;/b&gt;&lt;/b&gt; creates a new frame. Instead if you
use &lt;b&gt;&lt;b&gt;-t&lt;/b&gt;&lt;/b&gt; it will open emacs in the terminal. The &lt;b&gt;&lt;b&gt;-a ""&lt;/b&gt;&lt;/b&gt; tells
emacs to run itself as a server (daemon) if it isn't already running.
&lt;/p&gt;


&lt;p&gt;
Later on, running &lt;b&gt;&lt;b&gt;emacsclient -c&lt;/b&gt;&lt;/b&gt; will very quickly bring up a new frame to the server.
&lt;/p&gt;

&lt;p&gt;
In addition to instant loading, Running emacs this way has the
advantage, or some may say disadvantage of keeping buffers around
forever since you just keep emacs up and running.  
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9AHGsCtsClg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgbdca2ee" class="outline-2"&gt;
&lt;h2 id="orgbdca2ee"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbdca2ee"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 20 - yanking</title>
    <id>http://cestlaz.github.io/posts/using-emacs-20-yanking/</id>
    <updated>2016-11-13T12:00:00-04:00</updated>
    <published>2016-11-13T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-20-yanking/"/>
    <summary type="html">&lt;div id="outline-container-org6a1cc12" class="outline-2"&gt;
&lt;h2 id="org6a1cc12"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6a1cc12"&gt;
&lt;p&gt;
Today's video is a bit of a follow up on the last one as well as a few
miscillaneous configuration.
&lt;/p&gt;

&lt;p&gt;
We got some comments on alternate ways to load a file if it exists -
it's always cool to see how different people end up doing similar things.
&lt;/p&gt;

&lt;p&gt;
We then talk about three little configurations. Two I found out about
reading Jon Sander's (jcs) blog &lt;a href="http://irreal.org/blog"&gt;Irreal&lt;/a&gt;. Jon's blog is a terrific
source of emacs info - if you don't subscribe, you should.
&lt;/p&gt;

&lt;p&gt;
I go over using counsel for working with the kill-ring. The command
counsel-yank-pop acts as a replamcement for yank-pop and it lets you
easily yank anything from the kill ring - not just the most previously
killed/whacked piece. 
&lt;/p&gt;

&lt;p&gt;
You just hit &lt;b&gt;&lt;b&gt;M-y&lt;/b&gt;&lt;/b&gt; and then either keep hitting it or use up and
down to select what you want to yank. 
&lt;/p&gt;

&lt;p&gt;
Here's the original post from Irreal: &lt;a href="http://irreal.org/blog/?p=5707"&gt;http://irreal.org/blog/?p=5707&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I then briefly talk about smoothing things over between the system
clipboard and the kill ring, also from Irreal:
&lt;a href="http://irreal.org/blog/?p=5702"&gt;http://irreal.org/blog/?p=5702&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, I talk about auto-revert-mode - this monitors files on your
file system and when they change, they reload your buffer. I find this
very useful to keep multiple machines in sync when I'm working with
files in a could based filesystem like Dropbox or Owncloud.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LReZI7VAy8w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org28b9a12" class="outline-2"&gt;
&lt;h2 id="org28b9a12"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org28b9a12"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 19 - moving to a live config</title>
    <id>http://cestlaz.github.io/posts/using-emacs-19-live/</id>
    <updated>2016-11-10T12:00:00-04:00</updated>
    <published>2016-11-10T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-19-live/"/>
    <summary type="html">&lt;div id="outline-container-orgc2ccccc" class="outline-2"&gt;
&lt;h2 id="orgc2ccccc"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc2ccccc"&gt;
&lt;p&gt;
Some of the videos I want to make are going to be much easier to do if
I'm working in my own account where my whole file tree is available. 
&lt;/p&gt;

&lt;p&gt;
It's also a little annoying changing between my full emacs config and
the one I'm developing here.
&lt;/p&gt;

&lt;p&gt;
So, I decided to move to this config for my real config and as I make
more videos move parts of my old configuration over to this new one.
&lt;/p&gt;

&lt;p&gt;
The only problem is that I &lt;b&gt;&lt;b&gt;need&lt;/b&gt;&lt;/b&gt; some of my current config right
now – things like my email setup.
&lt;/p&gt;

&lt;p&gt;
This video talks about how I'm going to set things up to take care of
everything.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8RwQNXOjSis" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgcd05cd6" class="outline-2"&gt;
&lt;h2 id="orgcd05cd6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcd05cd6"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 18 - Narrowing and iedit</title>
    <id>http://cestlaz.github.io/posts/using-emacs-18-narrow/</id>
    <updated>2016-11-02T12:00:00-04:00</updated>
    <published>2016-11-02T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-18-narrow/"/>
    <summary type="html">&lt;div id="outline-container-org1ff72aa" class="outline-2"&gt;
&lt;h2 id="org1ff72aa"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1ff72aa"&gt;
&lt;p&gt;
I meant to cover these last time but decided not to so as to keep the
videos to about 10 minutes each.
&lt;/p&gt;

&lt;p&gt;
First up this time round is &lt;a href="https://github.com/victorhge/iedit"&gt;iedit&lt;/a&gt; - a really cool mode that lets you
select all the instances of the marked selection at the same time and
edit them all at once. By default it's bound to &lt;b&gt;&lt;b&gt;C-l&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
For example, let's say you had the following code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;somevar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;somevar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;somevar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;somevar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You could mark one instance of &lt;b&gt;&lt;b&gt;somevar&lt;/b&gt;&lt;/b&gt;, hit &lt;b&gt;&lt;b&gt;C-;&lt;/b&gt;&lt;/b&gt; and you'd be
editing them all at once. When you're done, you hit &lt;b&gt;&lt;b&gt;C-;&lt;/b&gt;&lt;/b&gt; again and
everything is un-selected.
&lt;/p&gt;

&lt;p&gt;
There are other ways to modify multiple instances of a selection. You
can always search and replace or use Magnar Sveen's really cool
&lt;a href="https://github.com/magnars/multiple-cursors.el"&gt;multiple cursors&lt;/a&gt; package and I'm sure there are others but I like
iedit since it's small and simple. It also works for rectangular
editing but I didn't cover that in the video. I'll probably demo it
when I cover rectangular editing in general.
&lt;/p&gt;

&lt;p&gt;
Iedit has limitations. For insance, since it works globally, it isn't
perfect for renaming variables. If the above code snippet was part of
a larger program with many other instances of &lt;b&gt;&lt;b&gt;somevar&lt;/b&gt;&lt;/b&gt;, iedit
wouldn't, by itself, be as useful.
&lt;/p&gt;

&lt;p&gt;
You could reach for a language specific refactoring package but for
me, that's where &lt;b&gt;&lt;b&gt;narrowing&lt;/b&gt;&lt;/b&gt; comes in. You can mark a region and
tell emcas to &lt;b&gt;&lt;b&gt;narrow-to-region&lt;/b&gt;&lt;/b&gt; which hides everything outside the
region and temporarily (until you &lt;b&gt;&lt;b&gt;widen&lt;/b&gt;&lt;/b&gt;) treats the region as the
whole document. 
&lt;/p&gt;

&lt;p&gt;
So, you could narrow to the section of code you want to edit and then
use iedit from within.
&lt;/p&gt;

&lt;p&gt;
To make things easier, I grabed &lt;a href="http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html"&gt;narrow-or-winden-dwim&lt;/a&gt; from &lt;a href="http://endlessparentheses.com/"&gt;Endless
Parentheses&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I think the video makes the behaviour pretty clear.
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xne0kS1DfVs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgac447e7" class="outline-2"&gt;
&lt;h2 id="orgac447e7"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgac447e7"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 17 - misc small packages</title>
    <id>http://cestlaz.github.io/posts/using-emacs-17-misc/</id>
    <updated>2016-10-28T12:00:00-04:00</updated>
    <published>2016-10-28T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-17-misc/"/>
    <summary type="html">&lt;div id="outline-container-orgf1e5029" class="outline-2"&gt;
&lt;h2 id="orgf1e5029"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf1e5029"&gt;
&lt;p&gt;
I'm working on getting enough of my real configuration into this
series so that I can dump my current one and use this one all them
time and grow it back up an episode at a time.
&lt;/p&gt;

&lt;p&gt;
I think we're almost there.
&lt;/p&gt;

&lt;p&gt;
This time, we're looking at a few small packages that I use all the
time.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc8a841f" class="outline-3"&gt;
&lt;h3 id="orgc8a841f"&gt;Highlight line Mode&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc8a841f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(global-hl-line-mode t)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
this turns on highlight line mode.  It makes it easy to see the line
the cursor's on. Nothing huge, I just like it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org668a7e9" class="outline-3"&gt;
&lt;h3 id="org668a7e9"&gt;&lt;a href="https://github.com/Malabarba/beacon"&gt;Beacon mode&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org668a7e9"&gt;
&lt;p&gt;
&lt;a href="https://github.com/Malabarba/beacon"&gt;Beacon mode&lt;/a&gt; flashes the cursor whenever you scroll. It makes things
easy to locate the cursor when scrolling
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; flashes the cursor's line when you scroll&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;beacon&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beacon-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; this color looks good for the zenburn theme but not for the one&lt;/span&gt;
&lt;span class="c1"&gt;; I'm using for the videos&lt;/span&gt;
&lt;span class="c1"&gt;; (setq beacon-color "#666600")&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc12f468" class="outline-3"&gt;
&lt;h3 id="orgc12f468"&gt;&lt;a href="https://github.com/nflath/hungry-delete"&gt;Hungry Delete mode&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc12f468"&gt;
&lt;p&gt;
&lt;a href="https://github.com/nflath/hungry-delete"&gt;This mode&lt;/a&gt; deletes all the whitespace after the cursor (or before it)
when you use delete or backspace.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="c1"&gt;; deletes all the whitespace when you hit backspace or delete&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;hungry-delete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-hungry-delete-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2a1c084" class="outline-3"&gt;
&lt;h3 id="org2a1c084"&gt;&lt;a href="https://github.com/magnars/expand-region.el"&gt;Expand Region&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a1c084"&gt;
&lt;p&gt;
&lt;a href="https://github.com/magnars"&gt;Magnar Sveen's&lt;/a&gt; awesome expand region mode is a must have. He also
wrote the amazing &lt;a href="https://github.com/magnars/multiple-cursors.el"&gt;multiple cursors&lt;/a&gt; package. I highly recommend
checking out his work.
&lt;/p&gt;

&lt;p&gt;
Expand region expands the marked region by semantic units. It's my go
to way of marking text for manipulation
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; expand the marked region in semantic increments (negative prefix to reduce region)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;expand-region&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'er/expand-region&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
I also tried to look at aggressive indent but that had some problems
so we'll come back to that later.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vKIFi1h0I5Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org549866c" class="outline-2"&gt;
&lt;h2 id="org549866c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org549866c"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 16 - Undo Tree</title>
    <id>http://cestlaz.github.io/posts/using-emacs-16-undo-tree/</id>
    <updated>2016-10-09T12:00:00-04:00</updated>
    <published>2016-10-09T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-16-undo-tree/"/>
    <summary type="html">&lt;div id="outline-container-orge134918" class="outline-2"&gt;
&lt;h2 id="orge134918"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge134918"&gt;
&lt;p&gt;
If you use emacs, you should keep an eye on Jon Snader's &lt;a href="http://irreal.org/blog/"&gt;blog&lt;/a&gt;,
&lt;a href="http://irreal.org/blog/"&gt;irreal.org&lt;/a&gt;. A few days he posted on &lt;a href="http://irreal.org/blog/?p=5621"&gt;Undo Tree&lt;/a&gt; - a package that extends
Emacs's built in undo functionality.
&lt;/p&gt;

&lt;p&gt;
Basic emacs has undo, bound to &lt;b&gt;&lt;b&gt;C-/&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;C-_&lt;/b&gt;&lt;/b&gt; but that's about
it. Undo tree, which you can set up with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;undo-tree&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-undo-tree-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
adds two key features. First is redo, which you get by adding the
shift key to the undo keychords. 
&lt;/p&gt;

&lt;p&gt;
The other, is the visual undo tree. You can bring that up wit &lt;b&gt;&lt;b&gt;C-x
u&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Once you bring up the undo tree, you can use the up and down arrows or
&lt;b&gt;&lt;b&gt;C-n&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;C-p&lt;/b&gt;&lt;/b&gt; to move between undo and redos. When you get to
what you want, just quit the undo tree visualizer with &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The cool part is that once you undo a few things and add new stuff,
you get a tree that you can navigate through using the arrows. 
&lt;/p&gt;

&lt;p&gt;
It's much easier to get the flavor of this by watching the video
(which also has a lame example of using artist-mode which I'll come
back t at some point).
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/zL0FJ-jbDPU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>User friendly - I do not think that means what you think it means</title>
    <id>http://cestlaz.github.io/posts/user-friendly/</id>
    <updated>2016-09-28T11:13:37-04:00</updated>
    <published>2016-09-28T11:13:37-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/user-friendly/"/>
    <summary type="html">&lt;div id="outline-container-org4354684" class="outline-2"&gt;
&lt;h2 id="org4354684"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4354684"&gt;
&lt;p&gt;
Saw this post the other day: &lt;a href="https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/"&gt;Emacs is hurting Clojure&lt;/a&gt; and this response: &lt;a href="http://irreal.org/blog/?p=5597"&gt;Is Emacs Really HJard to Learn / Use&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This called to mind those countless discussions about tools being user
friendly. I'm frequently on the unpopular side of these
discussions. Linux vs Windows vs Mac, Shell vs GUI, Emacs vs
fill-in-the-blank-editor-or-IDE and on and on.
&lt;/p&gt;


&lt;p&gt;
Don't use Emacs, it isn't user
friendly. Don't use Linux, it isn't user friendly.
&lt;/p&gt;

&lt;p&gt;
The thing is, I don't think that word means what they think it does. 
&lt;/p&gt;

&lt;p&gt;
I tell my kids that Linux and the shell is amazingly user friendly and
Windows and Macs aren't user friendly at all. Windows, rather, is 
"Learner Friendly." For years, it's been easy to learn what you can do
on Windows or Mac (as used via the GUI, not dropping to a shell) but
the truth is you can't do that much. They're designed as program
loaders not tool kits.
&lt;/p&gt;

&lt;p&gt;
You can learn how to get around and load programs and files very
quickly - much more quickly at first than using a command line
interface. The problem is, at that point, you hit a wall. No doubt
those operating systems are more learner friendly than Linux and the
shell but once you learn the command line, it can be leveraged for all
sorts of things and pretty easily at that - user friendly (see these
posts for some examples: &lt;a href="http://localhost:8000/categories/cli/"&gt;Shell posts&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
This is important because we have our students use all sorts of tools
and we should be thinking about things like usability but we really
should be thinking about them a little differently. 
&lt;/p&gt;

&lt;p&gt;
First, is it learner friendly. Part of this is cost of
entry. Linux has a high cost of entry. On the other hand, while Emacs
might look uglier than other modern editors, the cost of entry is
pretty much the same as any other editor - click or type a command and then you can use
the mouse and drop down menus to get started. Vim, in my opinion, on
the other hand has a higher cost of entry due to its modal nature. 
&lt;/p&gt;

&lt;p&gt;
So, there's no reason not to use Emacs (vs another editor) but you
might pause before using Linux. My approach is to start as if it were
Windows - use the gui, icons and menus, and then slowly introduce the
command line.
&lt;/p&gt;

&lt;p&gt;
Once your past the cost of entry, the we can think about being learner
friendly. As I mentioned, Linux, not so much. Emacs, sure - just like
any other editor with drop downs that then give you keyboard
equivalents. 
&lt;/p&gt;

&lt;p&gt;
The keyboard equivalents lead us to another part of learner friendly
– discoverability - can you easily discover new things about the
tool. Here Emacs shines. Linux, maybe not so much.
&lt;/p&gt;

&lt;p&gt;
Once past learner friendly we get to user friendly. The core question
is "can I do what I need to and want to do easily." For most people, it
comes down to - the tool I know is user friendly and the one I don't
know and don't want to take the time to know isn't. There are some
things that are cumbersome no matter what, but really, when we say
user friendly, most people mean "what I like." To me, it's a little
more - is the tool expressive and powerful as well.
&lt;/p&gt;

&lt;p&gt;
So, why is this important? First, we shouldn't allow our biases to
color the way we expose our kids to tools but at the same time, we
should pay attention to learnability, cost of entry, discoverability,
and indeed, true user friendliness.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="all" frame="border" border-spacing="10px" padding="10px"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Low Power&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;High Power&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;b&gt;&lt;b&gt;Low Learnability&lt;/b&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;CP/M&lt;/td&gt;
&lt;td class="org-left"&gt;Linux Shell, Mac Terminal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;b&gt;&lt;b&gt;High Learnability&lt;/b&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Windows / Mac OS GUI&lt;/td&gt;
&lt;td class="org-left"&gt;Most editors, including Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
So, let's stop with this "your tool isn't easy to use" nonsense. Any
tool we don't know isn't easy to use until we learn it. Let's focus on
the path to learning the useful ones.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cli" label="cli"/>
    <category term="emacs" label="emacs"/>
    <category term="linux" label="linux"/>
    <category term="shell" label="shell"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 15 - Macros</title>
    <id>http://cestlaz.github.io/posts/using-emacs-15-macros/</id>
    <updated>2016-09-02T17:26:02-04:00</updated>
    <published>2016-09-02T17:26:02-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-15-macros/"/>
    <summary type="html">&lt;div id="outline-container-org727b506" class="outline-2"&gt;
&lt;h2 id="org727b506"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org727b506"&gt;
&lt;p&gt;
I originally planned on do some videos on C++ development but I'm just
not feeling it. Probably because I'm excited to be working with my
new class and we're working in Python. We're not going to be using
C+++ for a few months so I'll get to those videos a little later.
&lt;/p&gt;

&lt;p&gt;
Today, I want to cover what I consider a leatherman or multi-tool for
Emacs. Something that isn't perfect for any particular job but can get
almost any job done: Macros.
&lt;/p&gt;

&lt;p&gt;
In their simplest form, macros let you record and play back
keystrokes. 
&lt;/p&gt;

&lt;p&gt;
The video goes over the specifics. 
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Y1oVNBuIoXo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Here are the main functions / keystrokes.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Command&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;kmacro-start-macro-or-insert-counter&lt;/td&gt;
&lt;td class="org-left"&gt;F3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;kmacro-end-and-call-macro&lt;/td&gt;
&lt;td class="org-left"&gt;F4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;kmacro-name-last-macro&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;insert-kbd-macro&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
This covers most of my use of macros but there's more. You can adjust
or set the counter, edit old macros and there's even a way to have a
macro pause for input in the middle.
&lt;/p&gt;

&lt;p&gt;
Here are some links with more information:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros"&gt;Emacs manual on macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ergoemacs.org/emacs/emacs_macro_example.html"&gt;http://ergoemacs.org/emacs/emacs_macro_example.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html"&gt;http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
If you're interested in checking out &lt;a href="http://repl.it"&gt;Repl.it&lt;/a&gt;, which I reference in the
video, check out &lt;a href="http://cestlaz.github.io/posts/new-term-new-tool-replit/#.V8n_Ed9vH0o%0A"&gt;my blog post&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 14 - Thoughts</title>
    <id>http://cestlaz.github.io/posts/using-emacs-14-thoughts/</id>
    <updated>2016-08-17T00:00:00-04:00</updated>
    <published>2016-08-17T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-14-thoughts/"/>
    <summary type="html">&lt;div id="outline-container-orgdaea40e" class="outline-2"&gt;
&lt;h2 id="orgdaea40e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdaea40e"&gt;
&lt;p&gt;
Sorry for the incosistancy of the posts. I hope to get to that one
video a week soon but I've still got a hectic couple of weeks ahead.
&lt;/p&gt;

&lt;p&gt;
No new material this week, or at least very little. This week, I talk
about some thoughts on the "Using Emacs" series. 
&lt;/p&gt;

&lt;p&gt;
In the video I talk about Sacha Chua and her work as a leader in the
Emacs community. Check out her stuff here: &lt;a href="http://sachachua.com/blog/"&gt;http://sachachua.com/blog/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the video - I hope you enjoy it.
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/tSx_sGgoVNk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
As always, please leave feedback here or on the video.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 13 - Yasnippet</title>
    <id>http://cestlaz.github.io/posts/using-emacs-13-yasnippet/</id>
    <updated>2016-08-04T00:00:00-04:00</updated>
    <published>2016-08-04T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet/"/>
    <summary type="html">&lt;div id="outline-container-org35f7778" class="outline-2"&gt;
&lt;h2 id="org35f7778"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org35f7778"&gt;
&lt;p&gt;
It turns out that &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;Elpy&lt;/a&gt;, a popular emacs package for python development
is much easier to set up than I remember. It turns out all you need
is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elpy&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elpy-enable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The video shows how to install and a bit of use. I don't think it's a
package I'm going to use much since I use other tools to do similar
things but it's worth checking out. 
&lt;/p&gt;

&lt;p&gt;
The main event this week is &lt;a href="https://github.com/joaotavora/yasnippet"&gt;yasnippet&lt;/a&gt;, a package that lets you expand
text aliases. Let's say you want to put the fairly standard:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
in my file. I can just type &lt;b&gt;&lt;b&gt;ifm&lt;/b&gt;&lt;/b&gt; and then hit the &lt;b&gt;&lt;b&gt;TAB&lt;/b&gt;&lt;/b&gt; key and
it would expand to the above code. Yasnippet also lets you leave
placeholders for variables, function names and more. It's a pretty
neat package.
&lt;/p&gt;

&lt;p&gt;
I use it for boilerplate code. The example in the video shows how I
set up a snippet for the boilerplate code used when creating an
application with the &lt;b&gt;&lt;b&gt;Flask&lt;/b&gt;&lt;/b&gt; python microframework.
&lt;/p&gt;

&lt;p&gt;
Setting up yasnippet is as easy as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and it has built in support for &lt;a href="https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d"&gt;tons of langauges&lt;/a&gt;. You can also easily
create your own snippets. See the documentation for details on the
file format. Just create a text file for the snippet and place it in a
subidectory under the snippets subdirectory of .emacs.d. The name of
the subdirectory should be the name of the emacs mode for which the
snippet is defined. I put up the snippet I use for flask so feel free
to check that out.
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/4aYMa8f6B0o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Yasnippet:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/joaotavora/yasnippet"&gt;Home Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joaotavora.github.io/yasnippet/"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d"&gt;Included snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Elpy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/jorgenschaefer/elpy"&gt;Home Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flask:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org"&gt;Flask Home Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 12 - Flycheck, Jedi, Python</title>
    <id>http://cestlaz.github.io/posts/using-emacs-12-python/</id>
    <updated>2016-07-27T00:00:00-04:00</updated>
    <published>2016-07-27T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-12-python/"/>
    <summary type="html">&lt;div id="outline-container-org7a1ab28" class="outline-2"&gt;
&lt;h2 id="org7a1ab28"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7a1ab28"&gt;
&lt;p&gt;
This week, we're going to look at my setup for Python programming. 
&lt;/p&gt;

&lt;p&gt;
I'm an educator, not a professional developer so I'm not working in
huge code bases with dozens or more files at a time. I do periodically
work in medium size code bases and will talk about cross file
navigation and project management later on. There are also more
powerful emacs Python packages. One being &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy&lt;/a&gt;. Elpy looks pretty cool
but for me, it's overkill.
&lt;/p&gt;

&lt;p&gt;
Today's about the basics.
&lt;/p&gt;

&lt;p&gt;
The first tool I show is &lt;a href="http://www.flycheck.org/en/latest/"&gt;flycheck&lt;/a&gt;. It does code checking on the fly
and supports &lt;a href="http://www.flycheck.org/en/latest/languages.html#flycheck-languages"&gt;tons of languages&lt;/a&gt;. You might have to install some
external checkers though. For instance, I installed &lt;b&gt;&lt;b&gt;pylint&lt;/b&gt;&lt;/b&gt; for
python syntax checking with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pylint
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Cofiguring flycheck is as easy as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The video all shows how I like to run Python from within emacs.
&lt;/p&gt;

&lt;p&gt;
The other tool I use is &lt;a href="https://github.com/tkf/emacs-jedi"&gt;Jedi&lt;/a&gt;. It provides more extensive completion
for Python.
&lt;/p&gt;

&lt;p&gt;
Here's the setup:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;jedi&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:ac-setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The last hook sets up the autocomplete. 
&lt;/p&gt;

&lt;p&gt;
For jedi to work, you'll need to install the jedi server which is done
in emacs by running &lt;b&gt;&lt;b&gt;M-x jedi:install-server&lt;/b&gt;&lt;/b&gt;. For that to work,
though, you'll need to have &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;Python Virtualenv&lt;/a&gt; istalled. I did that
with:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;EDIT:&lt;/b&gt;&lt;/b&gt; I just got a report that you might need to also install epc (&lt;b&gt;&lt;b&gt;sudo pip install epc&lt;/b&gt;&lt;/b&gt;).
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/wbj_Wjm1Tuw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Flycheck:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://flycheck.org"&gt;Flycheck home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/"&gt;Flake8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jedi:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 11 - Reveal.js presentations</title>
    <id>http://cestlaz.github.io/posts/using-emacs-11-reveal/</id>
    <updated>2016-07-19T11:53:15-04:00</updated>
    <published>2016-07-19T11:53:15-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-11-reveal/"/>
    <summary type="html">&lt;div id="outline-container-orgc7bdb59" class="outline-2"&gt;
&lt;h2 id="orgc7bdb59"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc7bdb59"&gt;
&lt;p&gt;
Happy to be back after a couple of weeks.
&lt;/p&gt;

&lt;p&gt;
My wife and son spent some time in San Francisco, Mountain View, and
Seattle. The main reason was to see our daughter who's interning out
there for the summer but it was also a great opportunity to catch up
with over 100 former students. If you're interested in seeing more, I
wrote a bit about it &lt;a href="http://cestlaz.github.io/posts/end-to-act-1/#.V45OGt9vGAk"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I was originally going to start talking about Python development but
then saw &lt;a href="https://www.reddit.com/r/emacs/comments/4sp0xs/emacs_org_mode_and_revealjs/"&gt;this&lt;/a&gt; post on reddit about &lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt; and using it with
org-mode. Since reveal.js with org-mode  is my goto presentation tool
I thought I'd do a video on that before getting back to "your
regularly schedueld program."
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/psDpCpcIVYs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
The main package you have to use for reveal.js presentations in
org-mode is org-reveal. The package to install is &lt;b&gt;&lt;b&gt;ox-reveal&lt;/b&gt;&lt;/b&gt;. I also
installed &lt;b&gt;&lt;b&gt;htmlize&lt;/b&gt;&lt;/b&gt; for syntax highlighting. Here's the code from
our configuration file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ox-reveal&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;ox-reveal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-reveal-root&lt;/span&gt; &lt;span class="s"&gt;"http://cdn.jsdelivr.net/reveal.js/3.0.0/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-reveal-mathjax&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;htmlize&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The org-reveal-root setq tells your presentation where to find the
reveal.js code. In this example, we're getting from the cloud. You can
also install it locally.
&lt;/p&gt;

&lt;p&gt;
The org-reveal-mathjax is just so that LaTeX equations will look nice.
&lt;/p&gt;

&lt;p&gt;
I'm hoping the video is pretty self-explanitory and the org-reveal
&lt;a href="https://github.com/yjwen/org-reveal%0A"&gt;home page&lt;/a&gt; is pretty thorough but since the documentation is lagging a
bit behind the code and due to some versioning issues, here are a
couple of things to watch out for:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I made a &lt;b&gt;&lt;b&gt;samples&lt;/b&gt;&lt;/b&gt; folder where I'll put code for this series that
isn't part of the configurations.&lt;/li&gt;
&lt;li&gt;I showed &lt;b&gt;&lt;b&gt;:frag (roll-in)&lt;/b&gt;&lt;/b&gt; as an example of revealing list items
one at a time. Those parens are important and are needed but weren't
in earlier versions - this took me far too long to figure out.&lt;/li&gt;
&lt;li&gt;If you read the docs you'll see that there are many more transitions
and you can mix and match them on a page.&lt;/li&gt;
&lt;li&gt;You might have to upgrade your emacs packages. If you
&lt;b&gt;&lt;b&gt;list-packages&lt;/b&gt;&lt;/b&gt;  in eamcs it will tell you if you have packages to
upgrade. You mark them for upgrading by typing &lt;b&gt;&lt;b&gt;U&lt;/b&gt;&lt;/b&gt; and then do the
upgrade with &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt;. If this doesn't work, you can try getting rid fo
the &lt;b&gt;&lt;b&gt;elpa&lt;/b&gt;&lt;/b&gt; folder and then re-installing.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://github.com/zamansky/mazelesson"&gt;mazelesson&lt;/a&gt; sample presentation shows more features, many that we
haven't covered yet. Check it out but remember that it's for an
earlier version of org-reveal.&lt;/li&gt;
&lt;li&gt;Github pages and rawgit are cool.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;
Hope you enjoy this. Please add any reveal.js tips and tricks of your
own.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Reveal.js related linls:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yjwen/org-reveal%0A"&gt;org-reveal home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/zamansky/mazelesson"&gt;Sample org reveal site (mazelesson from video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rawgit.com - serving stuff from github&lt;/li&gt;
&lt;li&gt;Github pages: &lt;a href="https://pages.github.com/"&gt;https://pages.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 10 - org init files</title>
    <id>http://cestlaz.github.io/posts/using-emacs-10-org-init/</id>
    <updated>2016-07-01T00:00:00-04:00</updated>
    <published>2016-07-01T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-10-org-init/"/>
    <summary type="html">&lt;div id="outline-container-org449a187" class="outline-2"&gt;
&lt;h2 id="org449a187"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org449a187"&gt;
&lt;p&gt;
I'll be traveling for the next couple of weeks so I probably won't
have time for another video until mid to late July. I'll probably
write a post about this series and do some regular blogging over that
time but probably no new videos for a couple of weeks.
&lt;/p&gt;

&lt;p&gt;
Also, a couple of notes about the series:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Instead of making a separate git branch for each episode, I'm just
adding on to the master branch on GitHub. If you're not familiar
with Git and GitHub don't worry about this. Hardly anyone will
notice a difference.&lt;/li&gt;
&lt;li&gt;If this theme doesn't show well on video, please let me know, I'll
change it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Ok, now to this installments video.
&lt;/p&gt;

&lt;p&gt;
It talks about using org-mode to store our emacs init file.
&lt;/p&gt;

&lt;p&gt;
The first key is that you can put code-blocks in org-mode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC emacs-lisp
(emacs-lisp code goes here)
(more emacs lisp goes here)
(and you can have even more here)
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Since it's elisp you can run the individual line using the usual &lt;b&gt;&lt;b&gt;C-x C-e&lt;/b&gt;&lt;/b&gt;
but you can run the entire block by placing your cursor anywhere in
the block and typing &lt;b&gt;&lt;b&gt;C-c C-c&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
One minor annoyance about editing code blocks is that it doesn't do
syntax highlighting or auto indentation. To solve this, emacs lets you
pull up an editing buffer by typing &lt;b&gt;&lt;b&gt;C-c '&lt;/b&gt;&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
You're supposed to be able to save your changes with &lt;b&gt;&lt;b&gt;C-c '&lt;/b&gt;&lt;/b&gt; again
or &lt;b&gt;&lt;b&gt;C-x C-s&lt;/b&gt;&lt;/b&gt; and kill the buffer without saving changes with &lt;b&gt;&lt;b&gt;C-x
C-k&lt;/b&gt;&lt;/b&gt; 
but the version of org-mode that came with my version of emacs
didn't support it - I had to install a newer version of org-mode from
melpa. 
&lt;/p&gt;

&lt;p&gt;
I couldn't figure out how to do this via use-package, but if this
problem happens to you, you can just type &lt;b&gt;&lt;b&gt;Alt-x package-install&lt;/b&gt;&lt;/b&gt;
and then type &lt;b&gt;&lt;b&gt;org&lt;/b&gt;&lt;/b&gt; and hit enter to install it.
&lt;/p&gt;

&lt;p&gt;
Once you do that, you might have to reload emacs but then everything
should work. 
&lt;/p&gt;

&lt;p&gt;
This lets us move most of our configuration to a separate file. We're
calling it &lt;b&gt;&lt;b&gt;myinit.org&lt;/b&gt;&lt;/b&gt; and storing it in our .emacs.d
directory. You can use any name &lt;b&gt;&lt;b&gt;except&lt;/b&gt;&lt;/b&gt; init.org as I mentioned in
the video.
&lt;/p&gt;

&lt;p&gt;
The file's a little big so here's a link to it:
&lt;a href="https://github.com/zamansky/using-emacs/blob/master/myinit.org"&gt;https://github.com/zamansky/using-emacs/blob/master/myinit.org&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Notice how GitHub formats it to look all nice.
&lt;/p&gt;

&lt;p&gt;
Here's the raw file so you can see the gory details:
&lt;a href="https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org"&gt;https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Since we're loading the file in overview mode, when we load it in
emacs we see:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;interface&lt;/span&gt; &lt;span class="nv"&gt;tweaks&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;which&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Org&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Ace&lt;/span&gt; &lt;span class="nv"&gt;windows&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;easy&lt;/span&gt; &lt;span class="nv"&gt;window&lt;/span&gt; &lt;span class="nv"&gt;switching&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Swiper&lt;/span&gt; &lt;span class="nv"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;Ivy&lt;/span&gt; &lt;span class="nv"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;Counsel&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Avy&lt;/span&gt; &lt;span class="nv"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;navigate&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;searching&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;screen&lt;/span&gt; &lt;span class="k"&gt;and &lt;/span&gt;&lt;span class="nv"&gt;jumping&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Autocomplete&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Themes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We can tab open and close each section and add text to clarify things
around the code blocks.
&lt;/p&gt;

&lt;p&gt;
All that's left in &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/myinit.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
With the last line performing the magic of loading our org file and
running all the code blocks.
&lt;/p&gt;

&lt;p&gt;
Finally, we added a couple of small interface changes:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The first line lets us type y or n instead of yes or no and the second
let's us reload a file into our current buffer using the &lt;b&gt;&lt;b&gt;f5&lt;/b&gt;&lt;/b&gt; key.
&lt;/p&gt;

&lt;p&gt;
I hope you enjoy this video and find it useful:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/EX9PKK3EMaw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 9 - Themes</title>
    <id>http://cestlaz.github.io/posts/using-emacs-9-themes/</id>
    <updated>2016-06-28T00:00:00-04:00</updated>
    <published>2016-06-28T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-9-themes/"/>
    <summary type="html">&lt;div id="outline-container-org9627457" class="outline-2"&gt;
&lt;h2 id="org9627457"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9627457"&gt;
&lt;p&gt;
Now that we have a nice basic configuration, let's make Emacs look a
little nicer.
&lt;/p&gt;

&lt;p&gt;
Like most editors, Emacs can be extensively themed. 
&lt;/p&gt;

&lt;p&gt;
As shown in the video, you can quickly see the built in themes using
the &lt;b&gt;&lt;b&gt;customize-themes&lt;/b&gt;&lt;/b&gt; command.
&lt;/p&gt;

&lt;p&gt;
You can load one of these themes by using the &lt;b&gt;&lt;b&gt;load-theme&lt;/b&gt;&lt;/b&gt; command
interactively or, more likely by putting:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'leuven&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
in your init.el. The above code loads the built in &lt;b&gt;&lt;b&gt;leuven&lt;/b&gt;&lt;/b&gt; theme.
&lt;/p&gt;

&lt;p&gt;
I prefer the &lt;b&gt;&lt;b&gt;zenburn&lt;/b&gt;&lt;/b&gt; theme. For that, you have to load the zenburn
package. Here's the code in our init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;zenburn-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'zenburn&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the video, I also mention the color theme package.
&lt;/p&gt;

&lt;p&gt;
So, customize away.
&lt;/p&gt;

&lt;p&gt;
In the links, you'll find some links to some Emacs theme gallery sites
to help find something you like.
&lt;/p&gt;

&lt;p&gt;
Thanks for reading and watching and as always, please leave comments,
suggestions and favorite themes.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/cod2ABxlrV8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Zenburn theme home page: &lt;a href="https://github.com/bbatsov/zenburn-emacs"&gt;https://github.com/bbatsov/zenburn-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs theme gallery: &lt;a href="https://pawelbx.github.io/emacs-theme-gallery/"&gt;https://pawelbx.github.io/emacs-theme-gallery/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another one: &lt;a href="https://emacsthemes.com/"&gt;https://emacsthemes.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-9-themes"&gt;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 8 - Autocomplete</title>
    <id>http://cestlaz.github.io/posts/using-emacs-8-autocomplete/</id>
    <updated>2016-06-26T00:00:00-04:00</updated>
    <published>2016-06-26T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"/>
    <summary type="html">&lt;div id="outline-container-org7db94fd" class="outline-2"&gt;
&lt;h2 id="org7db94fd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7db94fd"&gt;
&lt;p&gt;
Out of the box, Emacs supports various types of completion.
&lt;/p&gt;

&lt;p&gt;
Tab completion for filenames and commands basically work right out of
the box and Emacs has built in modes like &lt;a href="https://www.emacswiki.org/emacs/AbbrevMode"&gt;Abbrev&lt;/a&gt;, &lt;a href="https://www.emacswiki.org/emacs/HippieExpand"&gt;Hippie Expand&lt;/a&gt;, and
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html"&gt;Dabbrev&lt;/a&gt; provide a manner of completion for in buffer text.
&lt;/p&gt;

&lt;p&gt;
I briefly show Dabbrev (Dynamic Abbrevs) in the video and if you're
interested in the others, follow the links.
&lt;/p&gt;

&lt;p&gt;
We saw ow the built in Ido mode and third party packages like Ivy,
which I prefer, and Helm make for better completions on functions,
filenames, and the like and Emacs also has third party packages for in
buffer completion. 
&lt;/p&gt;

&lt;p&gt;
The two main contenders are &lt;a href="https://github.com/auto-complete/auto-complete"&gt;auto-complete Mode&lt;/a&gt; and &lt;a href="http://company-mode.github.io/%0A"&gt;company Mode&lt;/a&gt;. I use
auto-complete, others swear by company. The video shows the basics of
auto-complete mode but check both out and decide for yourself.
&lt;/p&gt;

&lt;p&gt;
If you feel strongly about one or the other, please share in the
comments.
&lt;/p&gt;


&lt;p&gt;
Here's a basic configuration:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We'll modify this as move along in the series.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/5FBVhdyU4dA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Autocomplete home page: &lt;a href="https://github.com/auto-complete/auto-complete"&gt;https://github.com/auto-complete/auto-complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Autocomplete manual: &lt;a href="http://auto-complete.org/doc/manual.html"&gt;http://auto-complete.org/doc/manual.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete"&gt;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 7- Navigation with Avy</title>
    <id>http://cestlaz.github.io/posts/using-emacs-7-avy/</id>
    <updated>2016-06-24T00:00:00-04:00</updated>
    <published>2016-06-24T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-7-avy/"/>
    <summary type="html">&lt;div id="outline-container-org6919e1d" class="outline-2"&gt;
&lt;h2 id="org6919e1d"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6919e1d"&gt;
&lt;p&gt;
Here's a really cool navigation method that I've been meaning to use
more. Avy is a replacement for ace-jump mode which is an
implementation of easymotion, a vim plugin.
&lt;/p&gt;

&lt;p&gt;
It's pretty cool and lets you quickly navigate to any spot on the
screen.
&lt;/p&gt;

&lt;p&gt;
After triggering avy, or more specifically the &lt;b&gt;&lt;b&gt;avy-goto-char&lt;/b&gt;&lt;/b&gt;
function, emacs prompts you for a single character. When you type it,
all instances of the character that start out words change to a
highlighted letter. Type the highlighted letter and you jump to that
location.
&lt;/p&gt;

&lt;p&gt;
The avy package comes with a bunch of options including a 2 character
search variant, a timed variant which drops into search, and more.
&lt;/p&gt;

&lt;p&gt;
The Avy home page has all the details.
&lt;/p&gt;


&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/ziytRbASKeU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Here's the configuration I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;avy&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-s"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;avy-goto-char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can check the &lt;a href="https://github.com/abo-abo/avy"&gt;avy home page&lt;/a&gt; for their recommended configuration
which you get by configuring this way instead:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;avy&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;avy-setup-default&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Avy: &lt;a href="https://github.com/abo-abo/avy"&gt;https://github.com/abo-abo/avy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-7-avy"&gt;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Better Comments or tooling as a time sink</title>
    <id>http://cestlaz.github.io/posts/better-comments/</id>
    <updated>2016-06-22T18:09:17-04:00</updated>
    <published>2016-06-22T18:09:17-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/better-comments/"/>
    <summary type="html">&lt;p&gt;
The other day my friend and fellow CS Ed Blogger &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt; wrote
about &lt;a href="http://blog.acthompson.net/2016/06/better-comments-in-visual-studio.html"&gt;Better Comments&lt;/a&gt;, an extension for visual studio that displays
comments that are marked up  with special characters in order to
highlight them. Here's a screenshot:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/omsharp/BetterComments/master/screenshots/ClassificationC.png" alt="ClassificationC.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
So, the first thing I though was "I bet emacs could do that pretty
easily" and down the rabbit hole I went.
&lt;/p&gt;

&lt;p&gt;
I had to figure out something about how emacs themes and font-locking
(emacs for syntax highlighting) works and of course spent far too much
time learning about Emacs, my favored tool, rather than getting actual
work done, but I came up with this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-foreground&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="s"&gt;"#00ff00"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-foreground&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-attribute&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt;
		    &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;:strike-through&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"adds a few special keywords"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-lock-add-keywords&lt;/span&gt; 
   &lt;span class="nv"&gt;nil&lt;/span&gt;
   &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"cx \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ct \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ci \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'js2-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'js-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's a hack but it does indeed work. In action, it looks something
like this:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/3TLw1yOMKMc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Truth be told, it really colors anything following cx, ct, or ci, not
just in comments – I have to look a bit more into how emacs handles
comments to figure that one out.
&lt;/p&gt;

&lt;p&gt;
In any event, even though I spent too much time doing this, it's nice
to know I'm working in a tool in which I can.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;UPDATE:&lt;/b&gt;&lt;/b&gt; Thanks to user ncsuwolf on /r/emacs on reddit, here's a
fully working, more properly done solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-strike&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:strike-through&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="s"&gt;"For strike-through comments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-important&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"#00ff00"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="s"&gt;"For important"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-todo&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="s"&gt;"For todo comments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
		&lt;span class="s"&gt;"adds a few special keywords"&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-lock-add-keywords&lt;/span&gt;
		 &lt;span class="nv"&gt;nil&lt;/span&gt;
		 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+x[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+t[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+i[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 6 - Searching a Swiper</title>
    <id>http://cestlaz.github.io/posts/using-emacs-6-swiper/</id>
    <updated>2016-06-20T00:00:00-04:00</updated>
    <published>2016-06-20T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-6-swiper/"/>
    <summary type="html">&lt;div id="outline-container-org93878c5" class="outline-2"&gt;
&lt;h2 id="org93878c5"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org93878c5"&gt;
&lt;p&gt;
This video is all about using incremental search to navigate through your emacs buffers.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/0mwwN0S1dnQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
You can use the default incremental searchb, bound to &lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt; for
isearch-forward &lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt; to search backwards (reverse).
&lt;/p&gt;

&lt;p&gt;
They work really well as is but I prefer using &lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt;. The video demos
both and the &lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt; home page has loads of details.
&lt;/p&gt;

&lt;p&gt;
Part of the Swiper package includes ivy and counsel which I use instead of ido.
&lt;/p&gt;

&lt;p&gt;
The video also mentions lorem-ipsum mode for generating text quickly and &lt;b&gt;&lt;b&gt;describe-mode&lt;/b&gt;&lt;/b&gt; in the help system.
&lt;/p&gt;

&lt;p&gt;
Here's the code we added for swiper:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; it looks like counsel is a requirement for swiper&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;swiper&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ivy-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ivy-use-virtual-buffers&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="s"&gt;"\C-s"&lt;/span&gt; &lt;span class="ss"&gt;'swiper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c C-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ivy-resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f6&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ivy-resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"M-x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-M-x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-find-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-describe-function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; v"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-describe-variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-load-library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f2&amp;gt; i"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-info-lookup-symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f2&amp;gt; u"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-unicode-char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c g"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-git&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c j"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-git-grep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-ag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-locate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-S-o"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-rhythmbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;read-expression-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-expression-history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and we commented out the ido stuff:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; using swiper so ido no longer needed&lt;/span&gt;
&lt;span class="c1"&gt;;;(setq ido-enable-flex-matching t)&lt;/span&gt;
&lt;span class="c1"&gt;;;(setq ido-everywhere t)&lt;/span&gt;
&lt;span class="c1"&gt;;;(ido-mode 1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you want to see a nice video specifically on swiper by the author, here it is:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VvnJQpTFVDc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;



&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Swiper: &lt;a href="https://github.com/abo-abo/swiper"&gt;https://github.com/abo-abo/swiper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Swiper Manual: &lt;a href="http://oremacs.com/swiper/"&gt;http://oremacs.com/swiper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-6-swiper"&gt;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 5 - Windows</title>
    <id>http://cestlaz.github.io/posts/using-emacs-5-windows/</id>
    <updated>2016-06-14T00:00:00-04:00</updated>
    <published>2016-06-14T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-5-windows/"/>
    <summary type="html">&lt;div id="outline-container-org7aac6c6" class="outline-2"&gt;
&lt;h2 id="org7aac6c6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7aac6c6"&gt;
&lt;p&gt;
Sorry for the delay in getting this next video / post up. I spent the
last part of last week at &lt;a href="http://go.personaldemocracy.com/"&gt;The Personal Democracy Forum 2016&lt;/a&gt; which is really an exceptional conference.
&lt;/p&gt;

&lt;p&gt;
I posted a bit about it in my &lt;a href="http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/#.V2B9th9vGAk"&gt;last post&lt;/a&gt; and plan to write some more on it, but for now, more Emacs.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D6OUMVbPKSA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
This video concerns using windows. By using buffers and windows and
the basics you got from the tutorial, you shouldn't have to ever leave emacs.
&lt;/p&gt;

&lt;p&gt;
From here, we'll be able to start going over effective Emacs and then
using it for things like development or document creation.
&lt;/p&gt;


&lt;p&gt;
Some of the key window bindings:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;what it does&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;C-x 2&lt;/td&gt;
&lt;td class="org-left"&gt;split-window-below (vertically)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;C-x 3&lt;/td&gt;
&lt;td class="org-left"&gt;split-window-right (horizontally)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;C-x 0&lt;/td&gt;
&lt;td class="org-left"&gt;delete-window (this one)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;C-x 1&lt;/td&gt;
&lt;td class="org-left"&gt;delete-other-windows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;C-x o&lt;/td&gt;
&lt;td class="org-left"&gt;other-window (moves foxus to the next window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
You also have frames which use &lt;b&gt;&lt;b&gt;C-x 5&lt;/b&gt;&lt;/b&gt; as the prefix, so &lt;b&gt;&lt;b&gt;C-x 5 2&lt;/b&gt;&lt;/b&gt;
creats a new frame and &lt;b&gt;&lt;b&gt;C-x 5 1&lt;/b&gt;&lt;/b&gt; closes the other frames.
&lt;/p&gt;

&lt;p&gt;
Remember, you can always use the help system, in particular &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
to describe a key and &lt;b&gt;&lt;b&gt;C-x f&lt;/b&gt;&lt;/b&gt; to describe a function.
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; can be a little clunky so some people like to use
&lt;b&gt;&lt;b&gt;windmove&lt;/b&gt;&lt;/b&gt; which lets you move between windows by holding the shift
key and with the arrows. To set that up, you can add this to your
&lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;windmove-default-keybindings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I prefer using &lt;b&gt;&lt;b&gt;ace-window&lt;/b&gt;&lt;/b&gt; mode which still uses &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; add this to init.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ace-window&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;remap&lt;/span&gt; &lt;span class="nv"&gt;other-window&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;'ace-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;custom-set-faces&lt;/span&gt;
     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;aw-leading-char-face&lt;/span&gt;
       &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;ace-jump-face-foreground&lt;/span&gt; &lt;span class="nv"&gt;:height&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; 
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The other mode I mention in the video is winner mode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;winner-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which will allow you to use &lt;b&gt;&lt;b&gt;C-c left or right&lt;/b&gt;&lt;/b&gt; to move through past
window configurations.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Ace window mode: &lt;a href="https://github.com/abo-abo/ace-window"&gt;https://github.com/abo-abo/ace-window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-5-windows"&gt;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 3 - How to think about Emacs</title>
    <id>http://cestlaz.github.io/posts/using-emacs-3-elisp/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-3-elisp/"/>
    <summary type="html">&lt;div id="outline-container-org361e650" class="outline-2"&gt;
&lt;h2 id="org361e650"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org361e650"&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nyQxRarVYH4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
&lt;/p&gt;

&lt;p&gt;
In some ways, it's like those new fangled interactive programming environments where you type in code and the updates are reflected instantly. 
&lt;/p&gt;

&lt;p&gt;
In this video, I try to explain the way I think about Emacs and why it's so cool.
&lt;/p&gt;

&lt;p&gt;
The only change we made to our configuration was adding:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gets rid of the tool bar at the top.
&lt;/p&gt;

&lt;p&gt;
Next time, we start talking about efficiently using Emacs.
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 4 - Buffers</title>
    <id>http://cestlaz.github.io/posts/using-emacs-4-buffers/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-4-buffers/"/>
    <summary type="html">&lt;div id="outline-container-org15bf0a5" class="outline-2"&gt;
&lt;h2 id="org15bf0a5"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org15bf0a5"&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/v5eTK5lC0xs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Now that we're past the intro material, we'll start looking at emacs
features one at a time. This will let you focus on using the one
feature we're covering, fit it into your work flow, and really get
comfortable with it. 
&lt;/p&gt;

&lt;p&gt;
This time we'll dive into using Emacs effectively with buffers.
&lt;/p&gt;

&lt;p&gt;
Watch the video and then make a real effort to use buffers over the
next few emacs sessions. Before you know it, they'll be a natural part
of your work flow.
&lt;/p&gt;

&lt;p&gt;
The idea of incrementally learning a tool this way seems to be called
&lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;developing micro-habits&lt;/a&gt; and I first read about the idea from &lt;a href="https://twitter.com/sachac"&gt;Sacha
Chua&lt;/a&gt; who is an amazing member of the emacs community.
&lt;/p&gt;

&lt;p&gt;
When seeing beginners, I'll frequently observe this work flow:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Open a terminal&lt;/li&gt;
&lt;li&gt;Load emacs on a file&lt;/li&gt;
&lt;li&gt;Edit the file&lt;/li&gt;
&lt;li&gt;Save and quit emacs&lt;/li&gt;
&lt;li&gt;Try to compile and run the program (since usually this is in a programming class)&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If the beginner needs to see multiple files at once, they fire up multiple separate emacs.
&lt;/p&gt;

&lt;p&gt;
All of this causes me physical pain.
&lt;/p&gt;

&lt;p&gt;
In emacs, your editor can load several buffers at once, each
associated with a separate file. You can quickly switch between them,
search across them, and more. The video will get you started.
&lt;/p&gt;

&lt;p&gt;
The video also mentions &lt;b&gt;ido&lt;/b&gt; mode. To set up &lt;b&gt;ido&lt;/b&gt; mode, add the
following code to your init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-enable-flex-matching&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-everywhere&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ido-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And here's a great little write up on it by &lt;a href="https://www.masteringemacs.org/reading-guide"&gt;Mickey Petersen&lt;/a&gt;:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://www.masteringemacs.org/article/introduction-to-ido-mode"&gt;https://www.masteringemacs.org/article/introduction-to-ido-mode&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
As I mentioned in the video, I actually use another mode for completions (&lt;a href="https://github.com/abo-abo/swiper"&gt;swiper&lt;/a&gt;),
which I'll cover in a future video and another popular option is &lt;a href="https://github.com/emacs-helm/helm"&gt;helm&lt;/a&gt;
which we'll also cover.
&lt;/p&gt;

&lt;p&gt;
For buffers, the keys to remember are:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Key&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;C-x b&lt;/td&gt;
&lt;td class="org-left"&gt;switch-buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;C-x C-b&lt;/td&gt;
&lt;td class="org-left"&gt;list-buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
To use ibuffer, which is more powerful than list-buffers you can add
either:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'list-buffers&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; make ibuffer default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Or if you want to open ibuffer in another Window:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'list-buffers&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; make ibuffer default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are a couple of useful links on ibuffer and buffer switching:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://ergoemacs.org/emacs/emacs_buffer_switching.html"&gt;http://ergoemacs.org/emacs/emacs_buffer_switching.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/"&gt;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Finally, if you like a tab bar, you can add the following to your
init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;tabbar&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tabbar-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There's also a package &lt;a href="https://github.com/mattfidler/tabbar-ruler.el"&gt;tabbar-ruler&lt;/a&gt; which is supposed to make the
tabbar look nicer but since I don't use the tabbar at all, I haven't
checked it out.
&lt;/p&gt;

&lt;p&gt;
Hope this gets you using emacs more effectively.
&lt;/p&gt;

&lt;p&gt;
Stay tuned for our next video on window management.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-4-buffers"&gt;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Intro to Org Mode</title>
    <id>http://cestlaz.github.io/posts/using-emacs-2-org/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-2-org/"/>
    <summary type="html">&lt;div id="outline-container-org50e7bc5" class="outline-2"&gt;
&lt;h2 id="org50e7bc5"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org50e7bc5"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/x5KiYDd9s8k?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
This video is a brief introduction to org-mode, a mode I use for all
sorts of things.
&lt;/p&gt;

&lt;p&gt;
We'll dive into org-mode later in the series. Right now I just want
you to see the basics since we'll be using org-mode for any notes that
are written up during this series. 
&lt;/p&gt;

&lt;p&gt;
Actually, all my blog posts are written in org-mode.
&lt;/p&gt;

&lt;p&gt;
Here are the important lines to add to your Emacs &lt;b&gt;init.el&lt;/b&gt; file  to
get the nice looking bullets when in org-mode:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;org-bullets&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-bullets-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
About a month ago, Emacs user Harry Schwartz gave a nice overview talk
on org-mode. If you want to get a better idea as to all the things you
can do with it, check it out: &lt;a href="https://www.youtube.com/watch?v=SzA2YODtgK4"&gt;https://www.youtube.com/watch?v=SzA2YODtgK4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Next time, we'll look at a little Elisp. After that, we'll dive in to
using Emacs effectively and efficiently. 
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;https://github.com/zamansky/using-emacs/tree/lesson-2-org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/sabof/org-bullets"&gt;org-bullets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Setting up the Package Manager</title>
    <id>http://cestlaz.github.io/posts/using-emacs-1-setup/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-1-setup/"/>
    <summary type="html">&lt;div id="outline-container-org0647a57" class="outline-2"&gt;
&lt;h2 id="org0647a57"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0647a57"&gt;
&lt;p&gt;
This video will step you through setting up Emacs to use &lt;a href="http://melpa.org/#/"&gt;MELPA&lt;/a&gt; for packages.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/49kBWM3RQQ8?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
We configured emacs by creating a folder named &lt;b&gt;.emacs.d&lt;/b&gt; and creating a
file within it named &lt;b&gt;init.el&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
Here's the contents of that file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
	&lt;span class="nv"&gt;:config&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The last two &lt;b&gt;inituse-package&lt;/b&gt; clauses install two helpful packages:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;try&lt;/b&gt;: let's you try packages without installing them.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;which-key&lt;/b&gt;: brings up help on key combinations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Relavent links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Melpa and packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://melpa.org"&gt;http://melpa.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/larstvei/Try"&gt;try&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Introduction</title>
    <id>http://cestlaz.github.io/posts/using-emacs-introduction/</id>
    <updated>2016-05-23T10:07:18-04:00</updated>
    <published>2016-05-23T10:07:18-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-introduction/"/>
    <summary type="html">&lt;div id="outline-container-org0c8fbae" class="outline-2"&gt;
&lt;h2 id="org0c8fbae"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0c8fbae"&gt;
&lt;p&gt;
I'm sure I've mentioned that I've been an Emacs wonk for
decades. Since the mid-80's in fact. I've spent time using other
editors, word processors, and development tools but always find my way
back.
&lt;/p&gt;

&lt;p&gt;
I recommend that budding computer science students develop a good tool
set and encourage them to explore Emacs but while it's pretty easy to
load Emacs and find your way around, particularly if you use the mouse
and menus there isn't a clear path to take you from beginner to using
it as an efficient tool let alone customizing it.
&lt;/p&gt;

&lt;p&gt;
Inspired by &lt;a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/featured"&gt;Mattias Petter Johansson&lt;/a&gt;, or MPJ who make a weekly video,
I decided to try to create a series of YouTube videos and matching
blog posts. I'll try to post one a week and I'll try to keep the
videos, at least after the first couple to just a few minutes and have
them focus on &lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;micro-habits&lt;/a&gt; - one or two small things that you can
bring to your work flow and internalize.
&lt;/p&gt;

&lt;p&gt;
The first three four (this one and the next three) will focus on
setting things up. After this post we'll have
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Setting up the package manager&lt;/li&gt;
&lt;li&gt;Intro to org-mode (just so that you recognize the markup)&lt;/li&gt;
&lt;li&gt;Intro to Elisp (just so you have an idea of those configuration
lines)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then we're off to the races. Here's what I'm thinking about for
the first few topics after the above mentioned ones:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Efficient Navigation&lt;/li&gt;
&lt;li&gt;Windows and Buffers&lt;/li&gt;
&lt;li&gt;Theming&lt;/li&gt;
&lt;li&gt;Auto Completion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then a series of short topics to show some of my favorite editing
tools. We'll also cover some larger topics including:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Python Development&lt;/li&gt;
&lt;li&gt;C/C++ Development&lt;/li&gt;
&lt;li&gt;Document Preparation&lt;/li&gt;
&lt;li&gt;Scheduling / Calendaring / Note Taking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll put together an index to these posts along with any ancillary
materials here: &lt;a href="file:///stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfc153e2" class="outline-2"&gt;
&lt;h2 id="orgfc153e2"&gt;Getting started&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfc153e2"&gt;
&lt;p&gt;
This series is going to assume you've installed emacs and worked your
way through the included tutorial.
&lt;/p&gt;

&lt;p&gt;
To help you get to that point, here are some links to posts and sites
that I've found useful:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.braveclojure.com/basic-emacs/"&gt;http://www.braveclojure.com/basic-emacs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.masteringemacs.org/article/beginners-guide-to-emacs"&gt;https://www.masteringemacs.org/article/beginners-guide-to-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs"&gt;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux"&gt;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here's a 10 minute getting started guide:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/K3_SFerNIeI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
So, stay tuned.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Blogging with Emacs, Jekyll and Nikola</title>
    <id>http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/</id>
    <updated>2016-04-17T13:12:26-04:00</updated>
    <published>2016-04-17T13:12:26-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/"/>
    <summary type="html">&lt;div id="outline-container-org2d9c4f5" class="outline-2"&gt;
&lt;h2 id="org2d9c4f5"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2d9c4f5"&gt;
&lt;p&gt;
Switched over from &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; to &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; yesterday.
&lt;/p&gt;

&lt;p&gt;
One of the primary reasons was that I got fed up with managing a Ruby
development environment across all my machines. In spite of my
rantings, I'm sure Ruby and Ruby installs are fine - it's just
something that I'd have to deal with on a recurring basis for one
specific task - other than for Jekyll blogging, I don't use Ruby.
&lt;/p&gt;

&lt;p&gt;
So while a platform based on Python - generally my go to language,
made sense, the other driving force for the switch was the fact that
&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; and &lt;a href="http://orgmode.org/"&gt;org-mode&lt;/a&gt; have become such major parts of my workflow and
productivity.
&lt;/p&gt;

&lt;p&gt;
What do I use org-mode for?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;lesson planning&lt;/li&gt;
&lt;li&gt;document preparation (instead of LaTeX)&lt;/li&gt;
&lt;li&gt;note taking&lt;/li&gt;
&lt;li&gt;blogging&lt;/li&gt;
&lt;li&gt;email (with mu4e)&lt;/li&gt;
&lt;li&gt;managing my schedule&lt;/li&gt;
&lt;li&gt;tracking bookmarks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and probably a lot more.
&lt;/p&gt;

&lt;p&gt;
Jekyll is actually a really nice tool. It's simple. You put together a
simple directory structure: Templates in _layouts, blog posts in
_posts, drafts in _drafts. Other directories that start with an
underscore are ignored and everything else is copied up to your site.
&lt;/p&gt;

&lt;p&gt;
I love that it's "close to the metal" You can put in html files with
some meta information up top or markdown. 
&lt;/p&gt;

&lt;p&gt;
You can take a look at my old site at
&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;https://github.com/cestlaz/cestlaz.github.io-jekyll&lt;/a&gt; if you want to
take a look.
&lt;/p&gt;

&lt;p&gt;
The beauty is that you just push your files up to GitHub and it
automatically runs Jekyll and builds your site (&lt;a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/"&gt;more info here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The problem is that Jekyll doesn't play well with org-mode and
org-markup so my workflow became something like this
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Create a post &lt;b&gt;&lt;b&gt;something.org&lt;/b&gt;&lt;/b&gt; in the _org directory.&lt;/li&gt;
&lt;li&gt;From within emacs, publish it. I've configured org-mode to publish
by exporting the org-mode markup file to html and saving it in the
_drafts directory.&lt;/li&gt;
&lt;li&gt;If it looks good, copy and rename the file from _drafts to the
_posts directory and push it up to GitHub.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
A little clunky, but it works. The bigger problem was the amount of
time I'd spend putting html blocks into my org formatted posts to get
them to look the way I wanted (or at least close enough).
&lt;/p&gt;

&lt;p&gt;
Enter Nikola.
&lt;/p&gt;

&lt;p&gt;
Nikola's a much more powerful tool. It does much more but as a result
is much more complex. Normally, that's not my style but in this case
since It's Python, things balance out.
&lt;/p&gt;

&lt;p&gt;
I still have to figure out the entire templating system and all the
plugins but getting started was pretty quick.
&lt;/p&gt;

&lt;p&gt;
The big win is that Nikola supports a ton of formats for your posts
and pages. Native org-mode support for me was what did it for me. On top of
that, although I haven't tested it yet, is that there's also an
org-mode plugin to export to Nikola restructure text.
&lt;/p&gt;

&lt;p&gt;
My new workflow:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Write the post as an org-mode file.&lt;/li&gt;
&lt;li&gt;run &lt;b&gt;&lt;b&gt;nikola github_deploy&lt;/b&gt;&lt;/b&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
And that's it. You can look at my Nikola site here:
&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;https://github.com/cestlaz/cestlaz.github.io&lt;/a&gt;.
The source code is in the &lt;b&gt;&lt;b&gt;src&lt;/b&gt;&lt;/b&gt; branch, the actual rendered blog in
the &lt;b&gt;&lt;b&gt;master&lt;/b&gt;&lt;/b&gt; branch.
&lt;/p&gt;

&lt;p&gt;
So far, I'm pretty happy with the setup.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="mathjax" label="mathjax"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Know your tools - intermediate Emacs</title>
    <id>http://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/</id>
    <updated>2015-10-28T00:00:00-04:00</updated>
    <published>2015-10-28T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
A good workman is known by his tools, or so the saying goes. My tools
of choice are my terminal shell and Emacs.
&lt;/p&gt;

&lt;p&gt;
I suppose if I was a full time developer working with a limited set of
tools I might like an IDE like JetBrains or Eclipse but no matter how
many alternatives I try, I always end back in Emacs.
&lt;/p&gt;

&lt;p&gt;
I recommend that my students spend time not only in Emacs but also in
tools like Vim or Sublime Text.
&lt;/p&gt;

&lt;p&gt;
I do warn them, though, that as a commercial product, Sublime might
not be around forever, I mean before Sublime was sublime, TextMate was
sublime. If you go back to the 1980s, Brief was sublime. 
&lt;/p&gt;

&lt;p&gt;
Commercial tools come and go but I've been using Emacs since the mid
eighties.
&lt;/p&gt;

&lt;p&gt;
A few students have been asking me for some pointers on going past the
basics of Emacs so here we go.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-orgheadline2" class="outline-2"&gt;
&lt;h2 id="orgheadline2"&gt;Notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline2"&gt;
&lt;p&gt;
This post just has some getting started notes. There are mode powerful
and advanced ways of doing most things.
&lt;/p&gt;

&lt;p&gt;
I think I'll just talk about a few of the basics here and will write
about code development with Emacs in a later post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline3" class="outline-2"&gt;
&lt;h2 id="orgheadline3"&gt;Starting out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline3"&gt;
&lt;p&gt;
Once you're OK with the basics (by using the built in tutorial or
on line resources) start to fore yourself to get to know:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-3"&gt;
&lt;h3 id="orgheadline4"&gt;Buffers&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgheadline4"&gt;
&lt;p&gt;
when you find a new file &lt;b&gt;&lt;b&gt;(C-x C-f)&lt;/b&gt;&lt;/b&gt; it opens it into a new
buffer. You can also open a new buffer using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and rather than
selecting a buffer typing in a new buffer name.
&lt;/p&gt;

&lt;p&gt;
Each buffer can hold a file and you can switch quickly between them
using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and hitting &lt;b&gt;&amp;lt;Enter&amp;gt;&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
You can kill the current buffer with &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Using buffers lets you edit multiple files in a project quickly and
efficiently.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline5" class="outline-3"&gt;
&lt;h3 id="orgheadline5"&gt;Windows&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgheadline5"&gt;
&lt;p&gt;
Your Emacs frame can be split into multiple windows. &lt;b&gt;&lt;b&gt;C-x 2&lt;/b&gt;&lt;/b&gt; splits
the window top and bottom, &lt;b&gt;&lt;b&gt;C-x3&lt;/b&gt;&lt;/b&gt; left and right. You can switch
between windows using &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; for other window. Switching to one
window is done with &lt;b&gt;&lt;b&gt;C-x 1&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgheadline6" class="outline-2"&gt;
&lt;h2 id="orgheadline6"&gt;Getting Help&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline6"&gt;
&lt;p&gt;
Get to know the built in help. You can always use functions like
&lt;b&gt;&lt;b&gt;M-x describe-function&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;M-x describe-key&lt;/b&gt;&lt;/b&gt; and of course
you can use completion to help speed things up but the help functions
are bound to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;C-h k  for describe key&lt;/li&gt;
&lt;li&gt;C-h f  for describe function&lt;/li&gt;
&lt;li&gt;C-h a for search for command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can usually type &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt; to close the help.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline7" class="outline-2"&gt;
&lt;h2 id="orgheadline7"&gt;Navigation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline7"&gt;
&lt;p&gt;
Use search for navigation rather than arrow keys.
&lt;/p&gt;

&lt;p&gt;
This can change the way you edit. 
&lt;/p&gt;

&lt;p&gt;
For example ,if I wanted to go up to the word Navigation, above,
rather than using traditional motion keys, I'd do a reverse search
(&lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt;) and search for Nav.
&lt;/p&gt;

&lt;p&gt;
Incremental search forward (&lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt;) and back are your friends.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline8" class="outline-2"&gt;
&lt;h2 id="orgheadline8"&gt;Packages&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline8"&gt;
&lt;p&gt;
You can check out my emacs configuration here: 
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/zamansky/dotemacs"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/dotemacs"&gt;https://github.com/zamansky/dotemacs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
You can find basic installation instructions there or you can use the
interactive package manager, invoking it with &lt;b&gt;&lt;b&gt;M-x list-packages&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Some of my favorite general purpose packages are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt; - for navigation and finding files&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nflath/hungry-delete"&gt;Hungry Delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/magnars/expand-region.el"&gt;Expand Region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/ace-window"&gt;Ace Window&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline9" class="outline-2"&gt;
&lt;h2 id="orgheadline9"&gt;Next steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline9"&gt;
&lt;p&gt;
We haven't even talked about code development or killer packages like
org-mode but I think this will do for a start.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
</feed>
