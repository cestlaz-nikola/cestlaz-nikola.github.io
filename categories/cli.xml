<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about cli)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/cli.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 19 Sep 2018 23:47:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>User friendly - I do not think that means what you think it means</title><link>http://cestlaz.github.io/posts/user-friendly/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org4354684" class="outline-2"&gt;
&lt;h2 id="org4354684"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4354684"&gt;
&lt;p&gt;
Saw this post the other day: &lt;a href="https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/"&gt;Emacs is hurting Clojure&lt;/a&gt; and this response: &lt;a href="http://irreal.org/blog/?p=5597"&gt;Is Emacs Really HJard to Learn / Use&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This called to mind those countless discussions about tools being user
friendly. I'm frequently on the unpopular side of these
discussions. Linux vs Windows vs Mac, Shell vs GUI, Emacs vs
fill-in-the-blank-editor-or-IDE and on and on.
&lt;/p&gt;


&lt;p&gt;
Don't use Emacs, it isn't user
friendly. Don't use Linux, it isn't user friendly.
&lt;/p&gt;

&lt;p&gt;
The thing is, I don't think that word means what they think it does. 
&lt;/p&gt;

&lt;p&gt;
I tell my kids that Linux and the shell is amazingly user friendly and
Windows and Macs aren't user friendly at all. Windows, rather, is 
"Learner Friendly." For years, it's been easy to learn what you can do
on Windows or Mac (as used via the GUI, not dropping to a shell) but
the truth is you can't do that much. They're designed as program
loaders not tool kits.
&lt;/p&gt;

&lt;p&gt;
You can learn how to get around and load programs and files very
quickly - much more quickly at first than using a command line
interface. The problem is, at that point, you hit a wall. No doubt
those operating systems are more learner friendly than Linux and the
shell but once you learn the command line, it can be leveraged for all
sorts of things and pretty easily at that - user friendly (see these
posts for some examples: &lt;a href="http://localhost:8000/categories/cli/"&gt;Shell posts&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
This is important because we have our students use all sorts of tools
and we should be thinking about things like usability but we really
should be thinking about them a little differently. 
&lt;/p&gt;

&lt;p&gt;
First, is it learner friendly. Part of this is cost of
entry. Linux has a high cost of entry. On the other hand, while Emacs
might look uglier than other modern editors, the cost of entry is
pretty much the same as any other editor - click or type a command and then you can use
the mouse and drop down menus to get started. Vim, in my opinion, on
the other hand has a higher cost of entry due to its modal nature. 
&lt;/p&gt;

&lt;p&gt;
So, there's no reason not to use Emacs (vs another editor) but you
might pause before using Linux. My approach is to start as if it were
Windows - use the gui, icons and menus, and then slowly introduce the
command line.
&lt;/p&gt;

&lt;p&gt;
Once your past the cost of entry, the we can think about being learner
friendly. As I mentioned, Linux, not so much. Emacs, sure - just like
any other editor with drop downs that then give you keyboard
equivalents. 
&lt;/p&gt;

&lt;p&gt;
The keyboard equivalents lead us to another part of learner friendly
– discoverability - can you easily discover new things about the
tool. Here Emacs shines. Linux, maybe not so much.
&lt;/p&gt;

&lt;p&gt;
Once past learner friendly we get to user friendly. The core question
is "can I do what I need to and want to do easily." For most people, it
comes down to - the tool I know is user friendly and the one I don't
know and don't want to take the time to know isn't. There are some
things that are cumbersome no matter what, but really, when we say
user friendly, most people mean "what I like." To me, it's a little
more - is the tool expressive and powerful as well.
&lt;/p&gt;

&lt;p&gt;
So, why is this important? First, we shouldn't allow our biases to
color the way we expose our kids to tools but at the same time, we
should pay attention to learnability, cost of entry, discoverability,
and indeed, true user friendliness.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="all" frame="border" border-spacing="10px" padding="10px"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Low Power&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;High Power&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;b&gt;&lt;b&gt;Low Learnability&lt;/b&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;CP/M&lt;/td&gt;
&lt;td class="org-left"&gt;Linux Shell, Mac Terminal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;b&gt;&lt;b&gt;High Learnability&lt;/b&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Windows / Mac OS GUI&lt;/td&gt;
&lt;td class="org-left"&gt;Most editors, including Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
So, let's stop with this "your tool isn't easy to use" nonsense. Any
tool we don't know isn't easy to use until we learn it. Let's focus on
the path to learning the useful ones.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>emacs</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/user-friendly/</guid><pubDate>Wed, 28 Sep 2016 15:13:37 GMT</pubDate></item><item><title>Shell short - tagging old posts in Nikola</title><link>http://cestlaz.github.io/posts/shell-short-tagging/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgf31ea35" class="outline-2"&gt;
&lt;h2 id="orgf31ea35"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf31ea35"&gt;
&lt;p&gt;
Quick post to add to the recent command line fu I've been writing
about.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/dougpete"&gt;Douglas Peterson&lt;/a&gt; had another &lt;b&gt;&lt;b&gt;Whatever happened to&lt;/b&gt;&lt;/b&gt; post. This time
on &lt;a href="https://dougpete.wordpress.com/2016/05/15/whatever-happened-to-6/"&gt;Logo&lt;/a&gt;. I wanted to reply, talk about NetLogo  and link to some of my
old NetLogo posts to help show how cool it is.
&lt;/p&gt;

&lt;p&gt;
Nikola supports tags, makes a nice &lt;a href="http://cestlaz.github.io/categories"&gt;tags&lt;/a&gt; page and for each tag, a nice
page of all the &lt;a href="http://cestlaz.github.io/categories/netlogo"&gt;links&lt;/a&gt;. 
&lt;/p&gt;


&lt;p&gt;
Nikola has a plugin &lt;b&gt;&lt;b&gt;tags&lt;/b&gt;&lt;/b&gt; which lets you manage tags from the
command line. For instance:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola tags -a netlogo posts/somepost.org
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Would add the tag &lt;b&gt;&lt;b&gt;netlogo&lt;/b&gt;&lt;/b&gt; to the specified post.
&lt;/p&gt;

&lt;p&gt;
The problem: The tags plugin only works if the post has a &lt;b&gt;&lt;b&gt;tag:&lt;/b&gt;&lt;/b&gt;
line already present in it's header comment and I hadn't put them in
my older posts.
&lt;/p&gt;

&lt;p&gt;
I had a bunch of posts, all of them in one directory. All the new ones
were &lt;b&gt;&lt;b&gt;.org&lt;/b&gt;&lt;/b&gt; files and had the tag slug. The others were &lt;b&gt;&lt;b&gt;.md&lt;/b&gt;&lt;/b&gt; markdown
files and &lt;b&gt;&lt;b&gt;.html&lt;/b&gt;&lt;/b&gt; html files. 
&lt;/p&gt;

&lt;p&gt;
Here's what a typical top block looks like:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!--
.. title: Looking for interesting questions
.. slug: 2010-01-03-looking-for-interesting-questions.html
.. date: 2010-01-03
.. type: text
--&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Sed to the rescue. Here's the what I ended up typing (from within the
posts directory) to add the
&lt;b&gt;&lt;b&gt;tags&lt;/b&gt;&lt;/b&gt; slug to the top comments right above the &lt;b&gt;&lt;b&gt;.. type: text:&lt;/b&gt;&lt;/b&gt; line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls *md *html | while read filename
do
    sed "/type: text/ i .. tags: " $filename
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
A line at a time:
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3f82fe8" class="outline-3"&gt;
&lt;h3 id="org3f82fe8"&gt;ls *md *html&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3f82fe8"&gt;
&lt;p&gt;
This lists all the files with that end in &lt;b&gt;&lt;b&gt;md&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;html&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3ecda0a" class="outline-3"&gt;
&lt;h3 id="org3ecda0a"&gt;| while read filename&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3ecda0a"&gt;
&lt;p&gt;
The vertical bar (pipe) sends the output of &lt;b&gt;&lt;b&gt;ls&lt;/b&gt;&lt;/b&gt; into the &lt;b&gt;&lt;b&gt;while read&lt;/b&gt;&lt;/b&gt;
command. The &lt;b&gt;&lt;b&gt;while&lt;/b&gt;&lt;/b&gt; command sets up a loop which, each time
through, reads the next input and places into the variable
&lt;b&gt;&lt;b&gt;filename&lt;/b&gt;&lt;/b&gt;. The body of the loop is between the &lt;b&gt;&lt;b&gt;do&lt;/b&gt;&lt;/b&gt; and the
&lt;b&gt;&lt;b&gt;done&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc417ef1" class="outline-3"&gt;
&lt;h3 id="orgc417ef1"&gt;sed "/ type: text/  i .. tags: " $filename&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc417ef1"&gt;
&lt;p&gt;
Sed is the stream editor. The stuff between the slashes finds the line
with the text &lt;b&gt;&lt;b&gt;type: text&lt;/b&gt;&lt;/b&gt; in it. The &lt;b&gt;&lt;b&gt;i&lt;/b&gt;&lt;/b&gt; inserts a line above and
the rest of the stuff in the quotes is what to insert. The
&lt;b&gt;&lt;b&gt;$filename&lt;/b&gt;&lt;/b&gt; expands to each filename, one each time through the
loop.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org50c42d2" class="outline-2"&gt;
&lt;h2 id="org50c42d2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org50c42d2"&gt;
&lt;p&gt;
Now all of my files have blank &lt;b&gt;&lt;b&gt;tag&lt;/b&gt;&lt;/b&gt; slugs so I can find my netlogo
posts and tag them:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola tags -a netlogo `grep -i -l netlogo posts/*`
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Any command in backticks expands to the result of the commmand. The
grep command has two argiments: &lt;b&gt;&lt;b&gt;-i&lt;/b&gt;&lt;/b&gt; means ignore case so it will
find netlogo, NetLogo, NETLOGO, etc.. The &lt;b&gt;&lt;b&gt;-l&lt;/b&gt;&lt;/b&gt; tells grep to just
output the filenames. So, the grep command will expand to a list of
files that mention netlogo. The full command adds the netlogo tag to
all of them.
&lt;/p&gt;

&lt;p&gt;
So, just a bit of quick shell scripting and I've:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;modified all old posts to accept tags.&lt;/li&gt;
&lt;li&gt;added the netlogo tag to all my netlogo posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can find all those posts &lt;a href="http://cestlaz.github.io/categories/netlogo"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>nikola</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/shell-short-tagging/</guid><pubDate>Sun, 15 May 2016 13:58:44 GMT</pubDate></item><item><title>REPOST - Shell games - who confirmed attendance</title><link>http://cestlaz.github.io/posts/duplicate-emails/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgf3a7807" class="outline-2"&gt;
&lt;h2 id="orgf3a7807"&gt;Repost&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf3a7807"&gt;
&lt;p&gt;
This is a repost from March 2015. It didn't transfer when I rebooted the blog.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdda01a4" class="outline-2"&gt;
&lt;h2 id="orgdda01a4"&gt;Original&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdda01a4"&gt;
&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;

&lt;p&gt;
We're busy organizing &lt;a href="http://cstuy.org"&gt;CSTUY's&lt;/a&gt; first &lt;a href="http://cstuy.org/programs/defhacks"&gt;hackathon&lt;/a&gt;. It's going to be at
&lt;a href="http://sumall.com"&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href="http://cstuy.org/programs/hacking_sessions"&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;

&lt;p&gt;
The kids signed up on a Google doc but we all know the story – when
people sign up for a free event, even one with free food and t-shirts,
many don't show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;

&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn't confirmed on
the second. 
&lt;/p&gt;

&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren't on sheet 2. I'm sure there's some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn't so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;

&lt;p&gt;
So, here's how a command line guy would do this.
&lt;/p&gt;

&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;e1&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;e2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;a@a.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;b@b.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;b@b.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;F@f.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;c@c.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;c@c.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;d@d.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;d@d.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;e@e.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;f@f.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;g@g.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;h@h.com&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
If we put these lists together, any email that appears twice would
indicate that it's the email of someone that confirmed entry. Here we
use cat to catenate e1 and e2 and pipe them through sort.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | sort 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
First problem –the upper case F – let's use &lt;b&gt;&lt;b&gt;tr&lt;/b&gt;&lt;/b&gt; to make
everything lower case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 |  tr A-Z a-z | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now we can see the duplicates next to each other. Next, &lt;b&gt;&lt;b&gt;uniq
-c&lt;/b&gt;&lt;/b&gt; tells us how many times each line appears:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-Z a-z | sort | uniq -c | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I added the sort at the end, but we didn't need it.
&lt;/p&gt;

&lt;p&gt;
Here's what we get:
&lt;/p&gt;

&lt;p class="verse"&gt;
1 a@a.com&lt;br&gt;
 1 c@c.com&lt;br&gt;
 1 c@c.dom&lt;br&gt;
 1 e@e.com&lt;br&gt;
 1 g@g.com&lt;br&gt;
 1 h@hc.om&lt;br&gt;
 2 b@b.com&lt;br&gt;
 2 d@d.com&lt;br&gt;
 2 f@f.com&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
To pull out the ones that haven't replied I used egrep with a regex
that means "any line that starts with 1 or more spaces followed by the
number 1":
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep "^ +1"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and finally to isolate the emails using sed which removes the spaces
and number 1 from the beginning of the line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep "^ +1" | sed "s/\ \+1 //g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Each of the little utilities aren't all too useful by themselves but
if you learn them over time you start thinking about how you can
combine them to solve problems. 
&lt;/p&gt;

&lt;p&gt;
If you think this way and know some basic tools, all of a sudden all
manner of text manipulation problems become pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/duplicate-emails/</guid><pubDate>Thu, 12 May 2016 13:52:25 GMT</pubDate></item><item><title>BASH scripting?</title><link>http://cestlaz.github.io/posts/bash-scripting/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgc8b556c" class="outline-2"&gt;
&lt;h2 id="orgc8b556c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc8b556c"&gt;
&lt;p&gt;
Over in the Facebook AP Computer Science Teachers group someone asked
for thoughts on covering BASH scripting as a post AP topic.
&lt;/p&gt;

&lt;p&gt;
A number of us made suggestions. I linked to &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzR7Et9vETt"&gt;this&lt;/a&gt; old blog post.
&lt;/p&gt;

&lt;p&gt;
One group member said she asked around for similar suggestions and the
response she got was "vi and awk." I wanted to jokingly respond "and
after they suggested that they got into their time machine and went
back to the 70's."
&lt;/p&gt;

&lt;p&gt;
In all seriousness though, I think that suggesting specific tools or
commands is off base.
&lt;/p&gt;

&lt;p&gt;
The important thing to know about Vi is how to get out of it but it
isn't really a tool in the scripting sense. I do think students should
spend a good amount of time learning a powerful editor and should try
bot Emacs (my choice) and Vim but that's another story.
&lt;/p&gt;

&lt;p&gt;
I also use AWK but as it's a programming language in it's own right,
I'm not sure if I'd introduce it right off the bat.
&lt;/p&gt;

&lt;p&gt;
There are a number of important ideas kids can take away from learning
some Linux (or other Unix flavor):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;There's something out there besides Windows and MacOS&lt;/li&gt;
&lt;li&gt;All about free software&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;The Unix Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That last one is the biggie and more specifically, there's a huge
upside in teaching kids the value of "OS as Toolset" where they can
compose the many tools that comprise the Linux experience to get
things done. 
&lt;/p&gt;

&lt;p&gt;
I gave an example of that in the &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzSBHt9vETu"&gt;post&lt;/a&gt; I previously linked to.
&lt;/p&gt;

&lt;p&gt;
For the teacher, that means wrapping your head around that way of
working. Living in the shell and using pipes to connect program to
progarm to program.
&lt;/p&gt;

&lt;p&gt;
I'd recommend getting into a time
machine ourselves and taking a look at: 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Unix_Programming_Environment" width="250px" align="center"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif" alt="English4.gif" width="250px" align="center"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It's dated but it's really a great book on getting into the Unix way
of doing things, particularly the chapter about filters. It also has
one of the best and clearest introductions to writing a compiler in
the chapter on program development.
&lt;/p&gt;

&lt;p&gt;
As I said, it is dated - shells are much easier to use and much more
robust, there are many more tools now, and they've evolved but it's
really a must read book.
&lt;/p&gt;

&lt;p&gt;
In terms of tools, I get a lot of mileage out of:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;description&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;example&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;cat&lt;/td&gt;
&lt;td class="org-left"&gt;catenate or display a file&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tr&lt;/td&gt;
&lt;td class="org-left"&gt;Translate characters&lt;/td&gt;
&lt;td class="org-left"&gt;tr A-Z a-z&lt;/td&gt;
&lt;td class="org-left"&gt;convert upper to lower case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;sed&lt;/td&gt;
&lt;td class="org-left"&gt;Stream editor&lt;/td&gt;
&lt;td class="org-left"&gt;sed "s/a/b/g"&lt;/td&gt;
&lt;td class="org-left"&gt;Replace all a with b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;wc&lt;/td&gt;
&lt;td class="org-left"&gt;word count&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;counts words lines and chars&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;cut&lt;/td&gt;
&lt;td class="org-left"&gt;cut columns&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;sort&lt;/td&gt;
&lt;td class="org-left"&gt;sort lines&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org361c68b" class="outline-2"&gt;
&lt;h2 id="org361c68b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org361c68b"&gt;
&lt;p&gt;
A nice simple thing you can do with these is clean data. Let's say you
want to do some analytics on a book from Project Gutenberg. You might
want to convert all non letters to spaces, and all letters to lower
case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat book.txt | sed "s/[^a-zA-Z ]/ /g | tr A-Z a-z"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That sends book.txt into sed which uses a regular expression to convert
no space and letters to spaces. The tr command converts all upper case
letters to lower case.
&lt;/p&gt;

&lt;p&gt;
If you want one word per line, add:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "s/\n/g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and maybe get rid of blank lines:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "/^$/d"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We can now count the number of words in the file using &lt;b&gt;&lt;b&gt;*wc&lt;/b&gt;&lt;/b&gt; or even
get counts of all the words:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sort | uniq -c | sort -n
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;sort&lt;/b&gt;&lt;/b&gt; will sort all the lines, &lt;b&gt;&lt;b&gt;uniq -c&lt;/b&gt;&lt;/b&gt; will compress the lines that are
adjacent and the same and give you a count and then &lt;b&gt;&lt;b&gt;sort -n&lt;/b&gt;&lt;/b&gt; will
sort the results numerically.
&lt;/p&gt;

&lt;p&gt;
I wrote another post a while ago about using the shell to detect
who responded on a Google form. It looks like it didn't convert when
I moved to my current blogging platform - I'll repost that shortly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/bash-scripting/</guid><pubDate>Thu, 12 May 2016 12:39:25 GMT</pubDate></item><item><title>Should We Teach HTML?</title><link>http://cestlaz.github.io/posts/teaching-html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Yesterday, &lt;a href="https://twitter.com/dougpete"&gt;Doug Peterson&lt;/a&gt; wrote a "Whatever happened to" post subtitled
&lt;a href="https://dougpete.wordpress.com/2016/05/08/whatever-happened-to-5/"&gt;HTML as an essential 21st Century skill?&lt;/a&gt; It's a nice post.
&lt;/p&gt;

&lt;p&gt;
I left a comment but thought I'd elaborate here.
&lt;/p&gt;

&lt;p&gt;
No, knowing HTML is not programming - it's markup. Even so, when I
help people design CS programs, I'll frequently recommend starting
with HTML or at least introducing it early.
&lt;/p&gt;

&lt;p&gt;
Why? 
&lt;/p&gt;

&lt;p&gt;
It's a gateway and not just to programming.
&lt;/p&gt;

&lt;p&gt;
HTML is pretty easy, you want &lt;b&gt;&lt;b&gt;something&lt;/b&gt;&lt;/b&gt; bold, you just wrap the
word in &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;b&amp;gt;something&amp;lt;/b&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's also empowering and demystifies the web. Kids can create a simple
web page and load it right into their browser.
&lt;/p&gt;

&lt;p&gt;
It's true that today's web pages are chock-full-o javascript and css
but with just the basics, students can get the idea. You can also show
them pages by right clicking and viewing source.
&lt;/p&gt;

&lt;p&gt;
You can even have them change a live page.
&lt;/p&gt;

&lt;p&gt;
Try it. 
&lt;/p&gt;

&lt;p&gt;
Right click on the top of this page where it says "Musings about…"
Chose &lt;b&gt;&lt;b&gt;inspect element&lt;/b&gt;&lt;/b&gt;. In the "debugger" window double click the
text, change it and hit enter. This is just temporary - just reload
the page but it's pretty neat for a kid to change an article and then
screenshot it.
&lt;/p&gt;

&lt;p&gt;
HTML is also a nice stepping stone towards coding. You're working in a
plain text editor by adding special code words to basic text which are
then interpreted by, in this case, the web browser.
&lt;/p&gt;

&lt;p&gt;
The big reason for teaching html actually goes beyond this. Next step
after learning HTML is having the kids programatically generating web
pages in whatever language you're using for the class. I like using
Python. This requires a little infrastructure setup to serve kids work
but then there are two huge wins.
&lt;/p&gt;

&lt;p&gt;
First, as the kids learn programming, instead of just printing out
results, they can make a web site with their results and share it with
friends, family, and the world.
&lt;/p&gt;

&lt;p&gt;
The other big bonus is that kids might be able to leverage take these
skills to other classes. If the student has a history paper to write,
maybe the teacher will accept a history web site where the student can
write code to do their analytics and build nice looking tables and
graphs with results.
&lt;/p&gt;

&lt;p&gt;
So while knowledge of HTML in and of itself isn't really needed
anymore it's still an important part of the programs I build. 
&lt;/p&gt;</description><category>cli</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/teaching-html/</guid><pubDate>Mon, 09 May 2016 23:08:58 GMT</pubDate></item><item><title>Shell games - who confirmed attendence</title><link>http://cestlaz.github.io/posts/2015-03-19-duplicate-emails.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;

&lt;p&gt;
We're busy organizing &lt;a href="http://cstuy.org"&gt;CSTUY's&lt;/a&gt; first &lt;a href="http://cstuy.org/programs/defhacks"&gt;hackathon&lt;/a&gt;. It's going to be at
&lt;a href="http://sumall.com"&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href="http://cstuy.org/programs/hacking_sessions"&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;

&lt;p&gt;
The kids signed up on a Google doc but we all know the story – when
people sign up for a free event, even one with free food and t-shirts,
many don't show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;

&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn't confirmed on
the second. 
&lt;/p&gt;

&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren't on sheet 2. I'm sure there's some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn't so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;

&lt;p&gt;
So, here's how a command line guy would do this.
&lt;/p&gt;

&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-org"&gt;|&lt;/pre&gt;&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/2015-03-19-duplicate-emails.html/</guid><pubDate>Thu, 19 Mar 2015 04:00:00 GMT</pubDate></item><item><title>Spreadsheet? I'd rather use the command line.</title><link>http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Spreadsheets are terrific - we've all used them. I particularly like
Google spreadsheets - I use them all the time to collect data, usually
from students. 
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Go to Google Drive
&lt;/li&gt;
&lt;li&gt;Make a form 
&lt;/li&gt;
&lt;li&gt;Send the form out to the students
&lt;/li&gt;
&lt;li&gt;Wait
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All the data gets dumped into a Google spreadsheet. The trouble is,
what to do with it once it's in the spreadsheet. 
&lt;/p&gt;

&lt;p&gt;
The other day, I wrote on a few basic stats for our upcoming SHIP
program. The data I reported on was all collected in a spreadsheet. I
also collected participant and parent emails in the spreadsheet. 
&lt;/p&gt;

&lt;p&gt;
So, here's the task, compute some simple numbers form the spreadsheet
and also extract and use the email addresses.
&lt;/p&gt;

&lt;p&gt;
I'm sure one could use some fancy spreadsheet magic to get the job
done, but I'm a command line wonk – here's how I take care of tasks
like these.
&lt;/p&gt;

&lt;p&gt;
First, I downloaded the spreadsheet as a csv (comma separated value)
file. Each line looked something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-csv"&gt;last,first,email,address,gender,grade,school,...
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
First question, how many applicants did we have:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;cat cstuy.csv | wc -l
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Which gave:
&lt;/p&gt;
&lt;pre class="example"&gt;
47
&lt;/pre&gt;



&lt;p&gt;
The |, or pipe means take the output of the first command and send it
to the  next one. &lt;b&gt;Cat&lt;/b&gt; just outputs the original file and &lt;b&gt;wc -l&lt;/b&gt; counts all
the lines in the file.
&lt;/p&gt;

&lt;p&gt;
Next, how many young ladies:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;cat cstuy.csv | grep female | wc -l
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The results: 
&lt;/p&gt;
&lt;pre class="example"&gt;
17
&lt;/pre&gt;

&lt;p&gt;
How many schools? Well, that's a little trickier. Here, I use a few
extra commands:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;cut - this will cut out one column from the csv file - in this case
the school column (the -d, says use a comma as delimiter and -f7 for
field 7).
&lt;/li&gt;
&lt;li&gt;sort - takes the lines and sorts them.
&lt;/li&gt;
&lt;li&gt;uniq - eliminates duplicate lines in a sorted file
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Putting it all together:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;cat cstuy.csv | cut -d, -f7 | sort | uniq | wc -l
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Results: 
&lt;/p&gt;
&lt;pre class="example"&gt;
30
&lt;/pre&gt;


&lt;p&gt;
Thirty different schools.
&lt;/p&gt;

&lt;p&gt;
Finally I needed the emails - here I wanted to be able to paste them
into Gmail's bcc field. I could have just used &lt;b&gt;cat&lt;/b&gt; and &lt;b&gt;cut&lt;/b&gt; and
then used the mouse, but instead:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;cat cstuy.csv | cut -d, -f3 | xclip -sel clip
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then I can just do a Ctrl-v in Gmail and I'm good to go.
&lt;/p&gt;

&lt;p&gt;
The cool thing is that the tools here - cut, sort, uniq, grep  - are
all general purpose tools that do simple text manipulations. Once you
know them and a few others, you can really quickly and efficiently do
all sorts of data processing without even thinking about it. I still
go to the spreadsheet for data collection ad also for when I need more
hardcore formulas but for day to day manipulations, I'll take the
command line.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/</guid><pubDate>Sun, 06 Jul 2014 04:00:00 GMT</pubDate></item><item><title>Shell Games - an introduction</title><link>http://cestlaz.github.io/posts/2014-02-04-shellgames-1-intro.md/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div&gt;&lt;p&gt;A few weeks ago, I noticed this Twitter conversation between &lt;a href="http://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;  and &lt;a href="http://twitter.com/keinath"&gt;Steve Keinath&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;I'd love to see an Intro to Linux (way more than just install) as a 3-hour workshop at &lt;a href="https://twitter.com/search?q=%23CSTA14&amp;amp;src=hash"&gt;#CSTA14&lt;/a&gt; &lt;a href="https://twitter.com/csteachersa"&gt;@csteachersa&lt;/a&gt;— Steve Keinath (@keinath) &lt;a href="https://twitter.com/keinath/statuses/400333558603997184"&gt;November 12, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;a href="https://twitter.com/alfredtwo"&gt;@alfredtwo&lt;/a&gt; &lt;a href="https://twitter.com/csteachersa"&gt;@csteachersa&lt;/a&gt; Right. I know very little &amp;amp; would love a "zero to hero" Linux workshop.— Steve Keinath (@keinath) &lt;a href="https://twitter.com/keinath/statuses/400335634297937920"&gt;November 12, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I briefly considered proposing a session for the conference but it was just a day or two before the deadline, I don't know if I'm going to be able to attend the conference, and besides, who said anything I proposed would be accepted.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Still, I liked the idea - I've been an educator for 23 years, a Linux user for most of that time and an  Unix user for longer. I'm a firm believer in operating system as toolkit and so I think I'll take Steve and Alfred's suggestion and try to put together a series of posts on using Linux from a CS educators point of view.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;So, before we begin - a little background.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I can proudly say that I've been Windows free since about 2000. That's when I decided to wipe the lat traces of Microsoft from my hard drives. Prior to that I just booted up MS-DOS or Windows to play games or to use a Excel or Word.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Since the early days of Linux - back before Slackware, I dual booted. Before Linux, I dialed into public Unix systems such as &lt;a href="http://www.panix.com"&gt;Panix&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/The_Big_Electric_Cat"&gt;The Big Electric Cat&lt;/a&gt;. At home, I tried to make MS-DOS as Unix like as I could. I ran the &lt;a href="http://en.wikipedia.org/wiki/MKS_Toolkit"&gt;MKS Toolkti&lt;/a&gt;, and used my own shell (a project every young programmer should attempt).
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Why am I posting this now? It's a new semester and I find myself, as usual, leveraging the Linux shell. It was time to set up a mailing list for the class.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I'm able to go to our school's data system and grab a tab delimited file that looks something like this:
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;
Code    Section Period  Last    First   ID  Official    Advisor OSIS    Email
grY22tBs    01  6   Hxk Blu GFy 9272    7rr gEs 274989649   zlu3lxk@QylKR.oqy
grY22tBs    01  6   HiQqvlRu    Blku    9918    7PP YHZHm   200878353   zzl8@yu.oqy
grY22tBs    01  6   plxk    ClSKv   9226    7II PHXrNY  274661826   olxkvl@QylKR.oqy
grY22tBs    01  6   pxKk    BqVxFl  9026    7II PHXrNY  224608174   zo6461@lqR.oqy
grY22tBs    01  6   pqxuk   NRK 9234    7dd gHAMmNd 270217219   uRKo90@QylKR.oqy
  &lt;/pre&gt;  &lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It's tab delimited but I scrambled the letters so as to not reveal any student info.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Oh, how did I do that scrambling? Easy. First, I combined some basic utilities to make a random permutation of the upper and lower case letters and stored them in a shell variable. Don't worry, I'll explain these commands in upcoming posts:
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
perm=`echo "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | sed "s/\(.\)/\1\n/g" | sort -R | tr -t "\\n" ":" | sed "s/[^a-zA-Z0-9,@]//g"`
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Then I used tr (translate) to exchange the real letters for the matching letter in the random permutation:
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
cat students.tsv | tr a-zA-Z $perm &amp;gt; students.scrambled
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So back to the real work. I needed to isolate the students email addresses. The process:
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ol&gt;
    &lt;li&gt;convert the tabs to commas&lt;/li&gt;
    &lt;li&gt;Pull out the students in my AP class (code MKX22X) from the list of all students&lt;/li&gt;
    &lt;li&gt;Pull out the 10th column&lt;/li&gt;
    &lt;li&gt;These are the emails, save them to a file&lt;/li&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;So, I typed:
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
cat students.tsv | grep MKS22X | sed "s/\t/,/g" | cut -d, -f10 &amp;gt; emails
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;grep filters out lines that have MKS22X in them and sed replaces the tabs (\t) with commas and cut pulls out the email addresses. It's all stored in a file named emails.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Now, I just have to import these into my maillist software (mailman).
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;
    add_members -r emails myclasslist
  &lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;So, that's it, easy peasy.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I'll be away for most of this week at the Tapia conference and then I'll be playing catch up, but I'm hoping to do a series of posts talking about my Linux toolset and how I use it.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I hope you all find it interesting and maybe even useful.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/ol&gt;&lt;/div&gt;</description><category>cli</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/2014-02-04-shellgames-1-intro.md/</guid><pubDate>Tue, 04 Feb 2014 05:00:00 GMT</pubDate></item><item><title>Why we script</title><link>http://cestlaz.github.io/posts/2013-01-24-why-we-script.md/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div&gt;&lt;p&gt;I tell my students "the cool thing about what we do is that if we're not happy with the way something works, we've got a shot at fixing it."&lt;/p&gt;
&lt;p&gt;That came up this morning so I thought I'd share.&lt;/p&gt;
&lt;p&gt;I
recently &lt;a href="http://cestlaz.github.com/2012/12/09/real-projects.html#.UQFhh1L6s7x"&gt;posted&lt;/a&gt;
about the in-term projects my Software Development kids were working
on. Well, now it's time to grade their final projects.&lt;/p&gt;
&lt;p&gt;The code is up on GitHub. This morning I was faced with independently
going to every project page and cloning each one:&lt;/p&gt;
&lt;div align="center"&gt;
&lt;a href="http://cestlaz.github.com/img/github-projects.png" rel="lightbox"&gt;
&lt;img width="50%" src="http://cestlaz.github.io/img/github-projects.png" class="" alt=""&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Not fun!!!!&lt;/p&gt;
&lt;p&gt;There had to be a better way. Fortunately all the projects were under a single "organization" and a little digging into the GitHub API reminded me that I could use this url:&lt;/p&gt;
&lt;pre&gt;
https://api.github.com/orgs/stuycs-ml7-projects/repos 
&lt;/pre&gt;

&lt;p&gt;which brought up all this nice JSON data.&lt;/p&gt;
&lt;div align="center"&gt;
&lt;a href="http://cestlaz.github.io/img/github-api.png" rel="lightbox"&gt;
&lt;img width="50%" src="http://cestlaz.github.io/img/github-api.png" class="" alt=""&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;A little poking around in the data finds that each project url is part of a line that starts with "ssh_url." &lt;/p&gt;
&lt;p&gt;a little wget, sed, grep and  sh magic later:&lt;/p&gt;
&lt;pre&gt;
urls=`wget --quiet -O - https://api.github.com/orgs/stuycs-ml7-projects/repos | grep ssh_url | sed "s/.*\(git.*\.git\).*/\1/g"`

for url in $urls 
do
  git clone git@$url
done
&lt;/pre&gt;

&lt;p&gt;Now, as long as all the projects are under a single Github organization I can easily clone or pull them without having to navigate the Github web site. &lt;/p&gt;
&lt;p&gt;Commandline FTW!!!!!!&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><category>shell</category><guid>http://cestlaz.github.io/posts/2013-01-24-why-we-script.md/</guid><pubDate>Thu, 24 Jan 2013 05:00:00 GMT</pubDate></item></channel></rss>