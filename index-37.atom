<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xmlns:fh="http://purl.org/syndication/history/1.0" xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z (old posts, page 37)</title>
  <id>http://cestlaz.github.io/index-37.atom</id>
  <updated>2018-09-19T23:47:49Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index-37.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-36.atom"/>
  <link rel="previous" type="application/atom+xml" href="http://cestlaz.github.io/index-38.atom"/>
  <link rel="current" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-38.atom"/>
  <link rel="prev-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-36.atom"/>
  <fh:archive/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/index-37.html"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Refactoring</title>
    <id>http://cestlaz.github.io/posts/refactoring/</id>
    <updated>2018-03-21T08:11:38-04:00</updated>
    <published>2018-03-21T08:11:38-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/refactoring/"/>
    <summary type="html">&lt;div id="outline-container-org15eecc3" class="outline-2"&gt;
&lt;h2 id="org15eecc3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org15eecc3"&gt;
&lt;p&gt;
One of my laments on teaching computer science is that students are
rarely taught and given the chance to develop  good programming
practices. There's usually not enough time. Beginners work on small
"toys" which don't lend themselves to good software development
practices and later on, there's so much other material like
algorithms, data structures etc. to teach and
learn that programming practices usually amount to lines like:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
"Make sure to comment your code.."
&lt;/p&gt;

&lt;p&gt;
"Indent properly…"
&lt;/p&gt;

&lt;p&gt;
"Use functions…"
&lt;/p&gt;

&lt;p&gt;
"It's important to test your code…"
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
so when I see an opportunity to use a simple example to drive home a
good practice,  I try to jump on it.
&lt;/p&gt;

&lt;p&gt;
Drawing shapes with text is a typical early project. I've seen it in
text books and online and have been doing it for years. I recall doing
it back in the 80s in Fortran IV when the programs we wrote were on &lt;a href="https://en.wikipedia.org/wiki/Punched_card"&gt;punch cards&lt;/a&gt;, run
overnight on an &lt;a href="https://en.wikipedia.org/wiki/IBM_1130"&gt;IBM 1130&lt;/a&gt;, and printouts picked up the next day.
&lt;/p&gt;

&lt;p&gt;
It's a nice use of nested loops. The students will write functions to
create assorted shapes out of asterisks  like rectangles and
triangles. Typical solutions look like this:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which results in shapes like these:
&lt;/p&gt;

&lt;pre class="example"&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
|                 |    |                 |
| *************** |    | *               |
| *************** |    | **              |
| *************** |    | ***             |
| *************** |    | ****            |
| *************** |    | *****           |
| *************** |    | ******          |
| *************** |    | *******         |

&lt;/pre&gt;

&lt;p&gt;
Then there will be more interesting shapes including things like:
&lt;/p&gt;

&lt;pre class="example"&gt;

   *       *            *****
  **      ***           *   *            and more
 ***     *****          *   *
****      ***           *****
           *   

&lt;/pre&gt;

&lt;p&gt;
This is a great time to talk about refactoring.  All of the shape
drawing functions follow the same pattern - there's an outer loop for
the height and then one or more inner loops to draw each line. We can
factor out the inner loops in to a separate &lt;code&gt;line()&lt;/code&gt; function.
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     &lt;span class="c1"&gt;//&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// &amp;lt;----- This can be factored out&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;                                 &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;//&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;// &amp;lt;---------------- along with this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;                               &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's just like factoring in algebra:
&lt;/p&gt;

&lt;div class="LATEX"&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
(RectangleOuterLoop × Line) + (TriangleOuterLoop × Line) ⇒ Line  (Rectangleouterloop × TriangleOuterloop)
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
We end up with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
It's simpler, cleaner, and also can lead us to thinking about the
"harder" shapes in an interesting way. Instead of looking at the right
justified triangle as a triangle, we can think of each level as two
lines - one of spaces (shown here as dashes) followed by a line of
stars:
&lt;/p&gt;


&lt;pre class="example"&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****

&lt;/pre&gt;

&lt;p&gt;
Noticing that  for a height of 5, the dashed lines count down in
length 4,3,2,1,0 and the star lines count up 1,2,3,4,5, we get:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tri2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here we have typical early CS assignment that really lends itself to
talking about structuring programs and refactoring. Where else can we
inject good programming practices in ways that make sense early on?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Testing Part 2</title>
    <id>http://cestlaz.github.io/posts/testing-part2/</id>
    <updated>2018-03-18T17:04:04-04:00</updated>
    <published>2018-03-18T17:04:04-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/testing-part2/"/>
    <summary type="html">&lt;div id="outline-container-org571046e" class="outline-2"&gt;
&lt;h2 id="org571046e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org571046e"&gt;
&lt;p&gt;
A few weeks ago I wrote about &lt;a href="https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE"&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.
&lt;/p&gt;

&lt;p&gt;
My class interleaves with Hunter's CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing. 
&lt;/p&gt;

&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;
C++ testing framework.
&lt;/p&gt;

&lt;p&gt;
I think this proved to be a valuable exercise. 
&lt;/p&gt;

&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn't even build the tests.
&lt;/p&gt;

&lt;p&gt;
The code looked right. Something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEST_CASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Lab 4 Tests"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3/12/2016"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;54.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It looked like at textbook example of a test case but it wouldn't even
compile.
&lt;/p&gt;

&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Testing getValue for 3/12/2016: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3/12/2016"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This stumped everyone for a while - why wouldn't the test even
compile.
&lt;/p&gt;

&lt;p&gt;
The answer was "data types." The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.
&lt;/p&gt;

&lt;p&gt;
As it turns out, I was pretty excited about this – even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing. 
&lt;/p&gt;

&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.
&lt;/p&gt;

&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn't seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make tests
./tests -s
... watch the tests run
make
./main
--- watch the program run
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Easy peasy.
&lt;/p&gt;

&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.
&lt;/p&gt;

&lt;p&gt;
Is it a win? 
&lt;/p&gt;

&lt;p&gt;
At the very worst, they're learning an
industry practice and at best, it's going to help them improve as
software engineers. Add on the fact that it's making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="software-engineering" label="software engineering"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>On Prestigious Competitons And High Schools</title>
    <id>http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/</id>
    <updated>2018-03-17T15:49:59-04:00</updated>
    <published>2018-03-17T15:49:59-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/"/>
    <summary type="html">&lt;div id="outline-container-orgf18558e" class="outline-2"&gt;
&lt;h2 id="orgf18558e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf18558e"&gt;
&lt;p&gt;
The ACM recently announced this year's winners of the Cutler-Bell
Prize in High School Computing. Over on his blog, &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;
noted that the winners were either from independent or magnet public
schools. Alfred also noted that most of the winners of prestigious
science competitions like the Regeneron Science Talent Search (nee
Intel, nee Westinghouse) were from public magnet schools. In &lt;a href="http://blog.acthompson.net/2018/03/impressive-high-school-computer-science.html%0A"&gt;his post&lt;/a&gt;,
Alfred ruminates on this and wonders "how to we add the flexibility
and support to more students at more schools?"
&lt;/p&gt;

&lt;p&gt;
As someone who spent over 25 years at Stuyvesant, arguably the
granddaddy of these public magnet schools, I wanted to share some
thoughts. I can only share my experiences from Stuy along with what I
know from a few other schools but I still hope this is worth a read.
&lt;/p&gt;

&lt;p&gt;
The Regeneron competitions under it's various names is the oldest and
most established of these competition so it's pretty easy to get some
data. Stuy is at or near the top of the list in terms of Regeneron
finalists and semi finalists. The &lt;a href="https://en.wikipedia.org/wiki/Regeneron_Science_Talent_Search"&gt;Wikipediapage&lt;/a&gt; lists Stuy as second
to Montgomery Blair with 22 finalists to 40 but the data only goes
back to 1999. I personally know of at least 7 more finalists from my
early years at Stuy, 4 more from the early 90s, 8 more listed under
the page's "notable" entries and who kows how many from the 80s and
earlier. 
&lt;/p&gt;

&lt;p&gt;
Stuy had a strong run of finalists in the early 90's and the early
2000's but there has been a fall off in recent years.
&lt;/p&gt;

&lt;p&gt;
Let's look at what makes Stuy "special" and then at the fall off.
&lt;/p&gt;


&lt;p&gt;
In terms of money, Stuy gets a basic budget similar to other NYC
public schools plus some extra due to the extra graduation
requirements (other schools get extra money for an assortment of
reasons). I seem to recall that the Parents Association raises
somewhere in the low to mid six figures and the Alumni Association has
been historically dysfunctional as a fundraising body.
&lt;/p&gt;

&lt;p&gt;
So, it's not money.
&lt;/p&gt;

&lt;p&gt;
Flexible scheduling? That's something that Alfred mentioned. Stuy kids
have super packed programs. Some kids take 10 classes a day with no
lunch so that's not it either.
&lt;/p&gt;

&lt;p&gt;
Teachers? Stuy gets its teachers the same way as other public
schools and just like other public schools they have some terrific
teachers and some absolute disasters. Stuy also gets a slice of a
particular class of teacher that starts their career at Stuy, never
learns to teach because the kids figure it out but thinks they're gods
gift to teaching.
&lt;/p&gt;

&lt;p&gt;
So, no, it's not the teachers, at least not on the whole.
&lt;/p&gt;

&lt;p&gt;
So, what does Stuy do?
&lt;/p&gt;

&lt;p&gt;
It collects talent and this is the same thing that the other magnet
schools and the elite private schools do as well. Get a bunch of
bright, hard working, motivated kids together and good things
happen. It gets high achieving students from a combination of entrance
exam, reputation, and location &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
I'm not arguing against this – I think there is a need for public
magnet schools like Stuy but I think it's important to recognize that
this is a major contributor to competition results and doesn't
necessarily say anything about the school in terms of leadership or
instruction.
&lt;/p&gt;

&lt;p&gt;
It's similar to a college coach who gets the best recruits. Are they
really a great coach? Can they develop talent or are they just getting
the best talent and getting out of the way. Who's the better coach?
The one who gets all the 5 star recruits every years and frequently
wins it all or the coach who gets 3 star recruits, doesn't win as much
but develops those 3 stars to a point where they can compete against the 5 star
programs.
&lt;/p&gt;

&lt;p&gt;
That's the starting point but then there's the targeting of the top
prospects. Stuy had a run of finalists during the early 2000s. At the
time, a friend of mine ran the math research program. His strategy? He
would scour the school for the kids most likely to win the
competition, get those kids into his class, and hook them  up with
professors with the most promising project potential. It worked
more often than not. Contrast that to what I did when I ran our CS
research program. I didn't take the program seriously for a variety of
reasons but my job was to give EVERY kid in my class the opportunity
to explore some aspect of CS. I had a few semi-finalists which is
neither here nor there but never the stream of winners that my friend
had.
&lt;/p&gt;

&lt;p&gt;
Looking back to Stuy's earlier success, we had a Bio Chair who ran a
similar program. I knew people in that program from when I was a
student. The top talent was recruited and nurtured, the rest, pretty
much ignored. Makes a school look good but not really the hallmark of
a great school
&lt;/p&gt;

&lt;p&gt;
Other schools had a similar strategy. Back in the '80s Cardozo - a
neighborhood high school in Bayside Queens had a great run of
Westinghouse results but that's because the science chair at the time
had a similar program - rope in the top talent early (sophomore year)
and nurture them. After a while the school got a reputation and would
then attract more "science talent."
&lt;/p&gt;

&lt;p&gt;
Stuy's had a falloff in finalists in recent years and I believe that's
due to not having anyone focusing on recruiting kids specifically for
results. Personally, I think this is a good thing but others
disagree. A school with one finalist is perceived to be better than a
school that gives a great research experience to every student but
produces no finalists. In recent years, there's been talk of "what
can we do to get more winners again." I think that's a shame, the
conversation should always be "what can we do to improve the
educational experience we offer all of our students."
&lt;/p&gt;

&lt;p&gt;
None of this is to take away from any of the winners of  any of these
competitions. All the finalists and winners I've known have been
exceptional intellects and top people in their fields. This is just a
commentary on what role a school does, should, and shouldn't play.
&lt;/p&gt;

&lt;p&gt;
In my early years at Stuy, I worked with our top kids on CS
competitions, The kids would place very well in the USACO competitions
throughout the year. One year we entered the ACSL and I realized that
I had a choice - focus on the top handful of kids to make a winning
team that could compete for the title or focus on all the kids but not
expect that great single result. I realized that the top kids
would probably be alright without that extra attention. 
&lt;/p&gt;

&lt;p&gt;
I still think I did right by those kids but that realization also led
me to design my intro class, hack required CS into Stuy and probably
end up positively affecting far more students than if I just focused
on the top percent of a percent.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;That said, students have also been
drawn to Stuy for the CS program which is fairly unique and also for a
couple of specific math teachers.&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="competitions" label="competitions"/>
    <category term="education" label="education"/>
  </entry>
  <entry>
    <title>Using Emacs 46 Auto Yasnippets</title>
    <id>http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</id>
    <updated>2018-03-15T20:05:36-04:00</updated>
    <published>2018-03-15T20:05:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/"/>
    <summary type="html">&lt;div id="outline-container-orgd91d8fd" class="outline-2"&gt;
&lt;h2 id="orgd91d8fd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd91d8fd"&gt;
&lt;p&gt;
The other day I discovered &lt;a href="https://github.com/abo-abo/auto-yasnippet"&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href="https://github.com/abo-abo"&gt;Oleh Krehel&lt;/a&gt; or abo-abo.
&lt;/p&gt;

&lt;p&gt;
It looks like it's going to be a great way to solve a particular
problem that come up now and again.
&lt;/p&gt;

&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of_red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue. 
&lt;/p&gt;

&lt;p&gt;
You could use a yasnippet but it's unlikely that you'll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.
&lt;/p&gt;

&lt;p&gt;
Very cool.
&lt;/p&gt;


&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/utrMabxgXbg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="editing" label="editing"/>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Sigcse2018 Making theory more acccesible</title>
    <id>http://cestlaz.github.io/posts/sigcse2018-theory/</id>
    <updated>2018-03-13T19:21:43-04:00</updated>
    <published>2018-03-13T19:21:43-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse2018-theory/"/>
    <summary type="html">&lt;div id="outline-container-org1d3fe8d" class="outline-2"&gt;
&lt;h2 id="org1d3fe8d"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1d3fe8d"&gt;
&lt;p&gt;
Next up from SIGCSE 2018 is John MacCormick's session on
&lt;a href="https://dl.acm.org/citation.cfm?id=3159557"&gt;Strategies for Baing the CS Theory Course on Non-decision Problems&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
MacCormicks's stance is that CS theory  is tough the first time around
and using non-decision problems is a viable approach to make theory
more accessible to beginners. As MacCormick said in his paper:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
… a decision problem may ask the yes/no question, "Does this graph
have a Hamilton cycle?" The corresponding non-decision problem is,
"Please give me a Hamilton cycle of this graph if it has one."
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
This leads to writing programs to explore concepts in CS theory rather
than just living in the world of proof. 
&lt;/p&gt;

&lt;p&gt;
MacCormick goes on to say that:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
For this audience, the key advantage of non-decision problems
is that they are more realistic: they match the previous programming
and algorithms experience of undergraduates more closely.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I love the idea. Writing a program can make an abstract problem more
concrete and can lead to better understanding for those of us who are
less math inclined.
&lt;/p&gt;

&lt;p&gt;
My next thought was that this shouldn't just be a change implemented
in theory courses. Some of these ideas should move down to more
introductory CS classes. Not the hardcore stuff but light
introductions to the topics so that we can layer the learning. If we
introduce some of these concepts in CS 1 classes then when they get to
the theory class it won't be the students first rodeo.
&lt;/p&gt;

&lt;p&gt;
I've had success with this when teaching recursion early. I've also
done it with other concepts. When we teach the Towers of Hanoi, yes,
it's a nice recursion problem but really it's to get the students
thinking about run time and a bit of proof. likewise, when we do a
maze solver in NetLogo we're alluding to dynamic programming, search,
and path finding.
&lt;/p&gt;

&lt;p&gt;
I don't have too much more to say on this topic right now. I'm not
enough of a theory guy to sensibly design these experiences. The good
news is that MacCormick has written an soon to be released &lt;a href="https://www.amazon.com/What-Can-Computed-Practical-Computation/dp/0691170665/ref=asap_bc?ie=UTF8"&gt;book&lt;/a&gt; on the subject. I
signed up for a reviewer copy at SIGCSE and look forward to receiving
a copy. Once I do I hope to be able to find some gems that I can work
into CS 1 experiences.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="theory" label="theory"/>
  </entry>
  <entry>
    <title>Using Emacs 45 - Company or Autocomplete</title>
    <id>http://cestlaz.github.io/posts/using-emacs-45-company/</id>
    <updated>2018-03-11T08:05:45-04:00</updated>
    <published>2018-03-11T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-45-company/"/>
    <summary type="html">&lt;div id="outline-container-orgd1e710c" class="outline-2"&gt;
&lt;h2 id="orgd1e710c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd1e710c"&gt;
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://planet.emacsen.org/"&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what's going on in emacs every week on her &lt;a href="http://sachachua.com/blog/category/geek/emacs/"&gt;blog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
on the video front, &lt;a href="https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g"&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we'll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.
&lt;/p&gt;

&lt;p&gt;
today, i watched dave's video on &lt;a href="https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s"&gt;company&lt;/a&gt; mode for auto
completion. I've always used &lt;a href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.
&lt;/p&gt;

&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href="https://github.com/zamansky/using-emacs"&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I've also pulled
out the relevant code and am placing it down under the video.
&lt;/p&gt;

&lt;p&gt;
Here's what I've found so far:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/srFQwTvbaxY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org847a512" class="outline-2"&gt;
&lt;h2 id="org847a512"&gt;Company config (so far):&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org847a512"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-idle-delay&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-company-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-irony&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-cdb-autosetup-compile-options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony-eldoc&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'irony-eldoc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:config&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/python-mode-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-jedi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'my/python-mode-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org87aa19b" class="outline-2"&gt;
&lt;h2 id="org87aa19b"&gt;Autocomplete config&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org87aa19b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;py-python-command&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:ac-setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>How my views on education research were shaped</title>
    <id>http://cestlaz.github.io/posts/practitioners-and-researchers/</id>
    <updated>2018-03-07T19:41:16-04:00</updated>
    <published>2018-03-07T19:41:16-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/practitioners-and-researchers/"/>
    <summary type="html">&lt;div id="outline-container-org6b6b700" class="outline-2"&gt;
&lt;h2 id="org6b6b700"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6b6b700"&gt;
&lt;p&gt;
After reading a couple of comments on my &lt;a href="http://cestlaz.github.io/posts/sigcse2018-code-tracing/"&gt;last post&lt;/a&gt; where I talked a
bit about practitioners vs researchers I thought I'd expand and
expound a bit.
&lt;/p&gt;

&lt;p&gt;
While there are education researchers that I very much respect,
overall, I'm skeptical of education research. Note
that I'm not talking specifically about CS Ed research but rather
education research in general.
&lt;/p&gt;

&lt;p&gt;
Let's go back to the beginning. I entered teaching from
industry. Goldman Sachs to be specific. I started in a shortage area -
math and barely had the credentials to do so. The transcript evaluator
at the DOE counted my Algorithms and Numerical Methods courses as Math
courses to get me over the credit hump.
&lt;/p&gt;

&lt;p&gt;
I had zero ed courses under my belt and was thrown into the
fire. Fortunately, I landed in a school, Seward Park High School, with
a very supportive faculty. I wouldn't have survived my first year
without Mike G, Bruce B, Jonathan G, and many others.
&lt;/p&gt;

&lt;p&gt;
Then, I had to start taking education credits to make my license
permanent. Some classes were taught by professors some by
adjuncts. The adjuncts were invariably experienced teachers and the
professors were research faculty. In many classes, I had to read the
latest research. 
&lt;/p&gt;

&lt;p&gt;
I found that what "the research" told us to do was contrary to what
some of the best teachers did in practice. I kept hearing about the
"right" way to teach but it frequently didn't jive with reality. When
the true way worked, circumstances were right and the technique
aligned with the teacher's natural tendencies. When it didn't, why
not? Many reasons.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;lack of prep time.&lt;/li&gt;
&lt;li&gt;too many students (per class, per day, per term)&lt;/li&gt;
&lt;li&gt;different populations than the one researched&lt;/li&gt;
&lt;li&gt;factors the researcher didn't include (and there are tons of them)&lt;/li&gt;
&lt;li&gt;teachers with different personalities and skill sets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and each of the above points opens up to scores of specifics. 
&lt;/p&gt;


&lt;p&gt;
This theme continued throughout my career. I'd ask teachers in other
subject areas about the current state of the art research. What was
the current trends in their fields. Generally the best teachers would
summarize what was going on and then either say that it didn't work
for them or that if it did, they didn't take it seriously because in
five or ten years "the research" would tell them to do something
different and then they would all of a sudden be bad teachers.
&lt;/p&gt;

&lt;p&gt;
This was another point. The right way to do it has changed over and
over during my career.
&lt;/p&gt;

&lt;p&gt;
Then there's the reproducibility problem. Apparently it's pretty bad
in education research. I mentioned in my &lt;a href="http://cestlaz.github.io/posts/sigcse2018-code-tracing"&gt;earlier post&lt;/a&gt; that when a
researched does it once on a small group it's research but when a
teacher did it over and over it's an anecdote.
&lt;/p&gt;

&lt;p&gt;
When I was young I would listen to a master teacher tell me about how
he set up some experience - the one I'm remembering now is an
experiential / discovery lesson on triangle geometry. He'd talk about
all the hard work that went into prepping his class for this type of
lesson as well as the prep time for the lesson itself. He told me how
he did it four years ago and it was great but then the year after it
fell flat and how he changed it for the next year. How it worked in
third period but not seventh and why he thought it played out the way
it did. That's a lot more reproduction than most 'research' actually
gets and this is what a master teacher does all the time.
&lt;/p&gt;

&lt;p&gt;
Finally, I got tired of hearing how to do it by people who don't
actually have to. If you're going to talk the talk, you should walk
the walk. As a side, this problem is really bad with "thought leaders."
&lt;/p&gt;

&lt;p&gt;
All this sounds like I'm really down on education research or at least
the overarching system. I probably am but there are many education
researchers doing great work and I respect them immensely.
&lt;/p&gt;

&lt;p&gt;
They know they don't have a magic bullet:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
This is what I tried with this population at this time and this is
what happened. You might want to try it or a variation on it.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
That's a far cry from "here's how to teach"
&lt;/p&gt;

&lt;p&gt;
The researchers who acknowledge that their experience as college
researchers or even teaching faculty are different from a k12 teacher
and that no matter how hard they try to work out all the variables
they can only ever account for a tiny fraction of them.
&lt;/p&gt;

&lt;p&gt;
The key is that they're adding another drop into the bucket of
knowledge. Over time it adds up. I have great respect for everyone
doing this. 
&lt;/p&gt;

&lt;p&gt;
These researchers have to keep prodding us teachers to re-evaluate our
practice and then either take or incorporate the research or reject it
after determining if it would be good or not for our population. At
the same time, it's up to practitioners to keep pushing back against
magic bullet research and the one true way.
&lt;/p&gt;

&lt;p&gt;
We all have a role to play in this game.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="education" label="education"/>
    <category term="research" label="research"/>
  </entry>
  <entry>
    <title>Sigcse2018 - Code Tracing</title>
    <id>http://cestlaz.github.io/posts/sigcse2018-code-tracing/</id>
    <updated>2018-03-06T19:16:28-04:00</updated>
    <published>2018-03-06T19:16:28-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse2018-code-tracing/"/>
    <summary type="html">&lt;div id="outline-container-orgf18de30" class="outline-2"&gt;
&lt;h2 id="orgf18de30"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf18de30"&gt;
&lt;p&gt;
Next up from SIGCSE is &lt;a href="https://dl.acm.org/citation.cfm?id=3159527"&gt;An Explicit Strategy to Scaffold Novice Program
Tracing&lt;/a&gt; by Benjamin Xie, Greg Nelson and Andy Ko, presented by
Benjamin Xie. 
&lt;/p&gt;

&lt;p&gt;
The core of Xie's presentation was that tracing through code is a good
thing and that spending a short amount of time teaching code
tracing can lead to improved student outcomes.
&lt;/p&gt;

&lt;p&gt;
The idea is simple. Walk through the code as though you were the
computer running your program. Xie suggested that students frequently
struggle with code tracing. They have a hard time keeping track of
variables, they try to work entirely in their head and being novices,
they don't have any good way of representing overall program
state. Personally, I also think there's a resistance these days to
doing thing by hand. Xie noted that students can trace through their
programs using online tools such as debuggers with steppers but doing
so is a passive process. The student just clicks next over and over
again. They aren't actively engaged in the code tracing. 
&lt;/p&gt;

&lt;p&gt;
That last point is a very important one. That passive clicking through
a stepper seems similar to me to students ignoring compiler warnings
or students using robust auto completion or snippets which I believe
retards their learning of fundamental constructs.
&lt;/p&gt;

&lt;p&gt;
Xie shared a simple directed strategy to enable students to "embody
the computer:"
&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Read question: Understand what you are being asked to do. At the end of the problem instructions, write a check mark.&lt;/li&gt;
&lt;li&gt;Find where the program begins executing. At the start of that line, draw an arrow.&lt;/li&gt;
&lt;li&gt;Execute each line according to the rules of Java.
&lt;ol class="org-ol"&gt;
&lt;li&gt;From the syntax, determine the rule for each part of the line.&lt;/li&gt;
&lt;li&gt;Follow the rules.&lt;/li&gt;
&lt;li&gt;Update memory table(s).&lt;/li&gt;
&lt;li&gt;Find the code for the next part.&lt;/li&gt;
&lt;li&gt;Repeat until the program terminates.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
When tracing through the code, a participant creates a memory
table with each method call…
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
In additionn to the strategy, Xie produced a simple paper handout on
which students could write down variable values and easily organize
and store the computers state as they traced through a program.
&lt;/p&gt;

&lt;p&gt;
Xie noted that just a few minutes of instruction to give the kids a
concrete method of code tracing can provide big postitive returns.
&lt;/p&gt;

&lt;p&gt;
The presentation was terrific and all true and I'm sure of tremendous
value to anyone in the audience not familiar with code tracing but it
was also the presentation that led me to compose this tweet:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Loving the &lt;a href="https://twitter.com/hashtag/sigcse2018?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#sigcse2018&lt;/a&gt; sessions but so many talks from higher Ed people remind me that while k12 can learn much about content from higher Ed, profs could learn so much from teachers about teaching&lt;/p&gt;— Mike Zamansky (@zamansky) &lt;a href="https://twitter.com/zamansky/status/967066702143000578?ref_src=twsrc%5Etfw"&gt;February 23, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
While Xie's presentation was terrific, code tracing and teachers
showing explicit code tracing strategies to kids is nothing new. I
remember being taught about this back in the 80s. We called it a "desk
check" back then. While it's true that maybe this was explicitly
taught because we were using punch cards and our programs were run
overnight, it was also taught to me by math teachers with very
limited CS knowledge. It's also a practice that appears to be pretty
common among High School CS teachers even when their content
knowledge is spotty. We also frequently employ things like state
diagrams, cons cell diagrams, and other techniques to capture state
and assist in program tracing. 
&lt;/p&gt;

&lt;p&gt;
This seemed to me to be a great example of something that in my
experience is a not uncommon technique for high school CS teachers but
maybe isn't used as widely at the college level (?). 
&lt;/p&gt;

&lt;p&gt;
The other thing this made me think about was the divide between
practitioners and researchers. I think everyone knows which camp I'm
in. Andy Ko, Benji Xie's advisor and co-author mentioned this in his
&lt;a href="https://medium.com/bits-and-behavior/sigcse-2018-trip-report-cs-for-all-57f1cf94155f"&gt;SIGCSE summary&lt;/a&gt;. When I read the actual paper, it notes that they
basically worked with 24 students and looked at the results. So,
that's research. On the other hand, when I share a takeaway from
looking at my 150 kids a year whom I met five days a week and look at
this over decades, it's just an anecdote. Hmmmm. 
&lt;/p&gt;

&lt;p&gt;
One other side point is that in Andy's summary he notes his perception
that SIGCSE is largely a teacher's conference as opposed to other
conferences he goes to which he says are more researcher's
conferences. I've only been to two SIGCSE's but my teacher friends tell
me that they feel that SIGCSE is more of a researcher's conference and
CSTA is more of a teacher's conference. I guess it's all a matter of
perspective and frame of reference. Also possibly because I think of
teacher as K12 teachers as teachers and professors as profressors be
they research or teaching faculty.
&lt;/p&gt;

&lt;p&gt;
Finally ,given all of this, was the talk and paper of value?
Tremendously so. I don't think it's a new technique and I think it's
fairly well disseminated in the K12 space but that said, it's a good
technique and it will be new to some. It's also hard to get students
these days to meticulously do anything on paper and sharing a
successful practice is always of great value. Finally, it left me
thinking about extending online environments such as &lt;a href="http://thonny.org/"&gt;Thonny&lt;/a&gt; to support
restricted code tracing where the students would have to enter the
state of all changed variables in a given line before the stepper
would move to the next one.
&lt;/p&gt;


&lt;p&gt;
I very much enjoyed this SIGCSE session. You can read the paper linked
at the top if you have access to the ACM Digital Library. If not, you
can read Benji Xi's medium post &lt;a href="https://medium.com/bits-and-behavior/teaching-a-strategy-for-reading-code-fbc9f4044cab"&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Using Emacs 44 - An org-mode workflow for application processing</title>
    <id>http://cestlaz.github.io/posts/using-emacs-44-pdf/</id>
    <updated>2018-03-03T08:05:45-04:00</updated>
    <published>2018-03-03T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-44-pdf/"/>
    <summary type="html">&lt;div id="outline-container-org557708a" class="outline-2"&gt;
&lt;h2 id="org557708a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org557708a"&gt;
&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It's something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program. 
&lt;/p&gt;

&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you're a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href="http://samsungnext.com/"&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href="http://www.catskillsconf.com/"&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year. 
&lt;/p&gt;

&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there's not enough information, I've been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I'm provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.
&lt;/p&gt;

&lt;p&gt;
For the first cohort, this wasn't a big deal. I hadn't even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;

&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;

&lt;p&gt;
This year, there are well over 100 applicants (and we're looking to
grow the program by a large number of students). All of a sudden, it
wasn't so easy to navigate all the pdf files.
&lt;/p&gt;

&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href="https://github.com/politza/pdf-tools"&gt;pdf-tools&lt;/a&gt;, and
&lt;a href="https://melpa.org/#/org-pdfview"&gt;org-pdfview&lt;/a&gt; I've come up with a workflow that I very much like.
&lt;/p&gt;

&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LFO2UbzbZhA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="pdf" label="pdf"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title>
    <id>http://cestlaz.github.io/posts/sigcse2018-bootstrap/</id>
    <updated>2018-03-02T09:27:33-04:00</updated>
    <published>2018-03-02T09:27:33-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse2018-bootstrap/"/>
    <summary type="html">&lt;div id="outline-container-org70bfbd0" class="outline-2"&gt;
&lt;h2 id="org70bfbd0"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org70bfbd0"&gt;
&lt;p&gt;
I really didn't know what to expect at the &lt;a href="https://dl.acm.org/citation.cfm?id=3159471"&gt;Creativity, Customization,
and Ownership: Game Design in Bootstrap: Algebra&lt;/a&gt; session. I've been a
big fan of &lt;a href="http://www.bootstrapworld.org/"&gt;Bootstrep&lt;/a&gt; for years and looking at the authors, &lt;a href="http://blog.acthompson.net/2017/10/cs-teacher-interview-emmanuel.html"&gt;Emmanuel
Schanzer&lt;/a&gt;'s been a freind forever. I've never met &lt;a href="https://twitter.com/ShriramKMurthi"&gt;Shriram Krishnamurthi&lt;/a&gt;
in person but am looking forward to it. We've traded emails and blog
comments. I'd like to consider him a friend and I certainly respect
him and his work even though we frequently disagree around the
edges. The third author and presenter, Kathi Fisler was new to me.
&lt;/p&gt;

&lt;p&gt;
The Bootstrap program is embedded in algebra classes. In it, students
use Racket (nee scheme) to reinforce math skills while building
computer science skills. The big student project is a graphical game.
&lt;/p&gt;

&lt;p&gt;
When designing the project, students are asked to decide on and find
four resources:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;The background image&lt;/li&gt;
&lt;li&gt;The player image&lt;/li&gt;
&lt;li&gt;The target image&lt;/li&gt;
&lt;li&gt;The enemy image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Students are given a short amount of time to decide on and find these
four images. I think it was about ten minutes and that's it. That's
all the "creativity" in the assignment. After that, all the students
are essentially creating the same game with different skins.
&lt;/p&gt;

&lt;p&gt;
This design makes sense. You can't have students going all over the
place. Constraining the assignment in this way allows teachers who
might now be strong in computer science to guide the kids through the
program to completion.
&lt;/p&gt;

&lt;p&gt;
At the time I was thinking: I really like all of this but is it really
open ended creativity and discovery with respect to math or computer
science? As it turned out, Fisler addressed this point at the end of
the talk in a way that made me vary happy.
&lt;/p&gt;

&lt;p&gt;
Fisler went on to describe the rest of the student experience and then
went on to talk about the statistics they gathered. 
&lt;/p&gt;

&lt;p&gt;
One big takeaway was that while all the students were essentially
writing the same game varying only the graphical elements, this
encouraged students to create very different themes. They also created
rich stories around their games. The project might not have been
"creative" with respect to the CS or Math directions but it was certainly
creative in other important areas. The other takeaway was that
survey's indicated all sorts of positives from the program as a whole
so the project didn't seem to have suffered by having the students
essentially write the same program. Participants were proud of their
work, they felt their games were different from their peers and in
general the experience was good.
&lt;/p&gt;

&lt;p&gt;
During questions, someone asked about adding a fifth element - a
projectile or missile. It turns out that at one point the program had a
projectile component but that led to the vast majority of projects to
be themed in very similar ways. Even though not the same, it reminded me to something Randy
Pausch said in his &lt;a href="https://www.youtube.com/watch?v=ji5_MqicxSo"&gt;Last Lecture&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
You make whatever you want. Two rules: no shooting violence and no
pornography. Not because I’m opposed to those in particular, but you know, that’s been done with
VR, right? [laughter] And you’d be amazed how many 19-year-old boys are completely out of ideas
when you take those off the table.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
At the very end, Fisler addressed my questions about creativity and
discovery. She posed these questions of her own: "Do we overstate the
case for creativity?" and "Is pure constructivism a win?"
&lt;/p&gt;

&lt;p&gt;
I've ranted on contructivism before. It can be great but a
constructivist lesson takes a knowledgeable educator and a lot of time,
preparation, and effort. It's a big ask for, say, a high school
teacher who's already taking home hours of work every evening. Too
often I've seen the following "contructivist" model instead:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Take an isntructor that doesn't know their craft, the content, or
niether.&lt;/li&gt;
&lt;li&gt;Let the kids play with stuff.&lt;/li&gt;
&lt;li&gt;Show off the couple of autodidacts that figure it out as success
stories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll rant more about this "model" with respect to the new buzz word
"lead learner" at some point in the future.
&lt;/p&gt;

&lt;p&gt;
On the creativity side, it's important but there are also times for
the instructor to lead and for guidelines to be followed.
We want to foster creativity but that doesn't mean that it's 100%
creativity 100% of the time. Education is like life, a balance. The
Bootstrap program had to constrain the CS and math learning but
allowed for creativity in other areas. It's smart and it's a win.
&lt;/p&gt;

&lt;p&gt;
I still want to meet Shriram in person one day and now also Kathi
Fisler. I didn't know what to expect walking in but I left the talk
reminded of why I'm such a fan of Emmanuel, his team, and their work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="teaching" label="teaching"/>
  </entry>
</feed>
