<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xmlns:fh="http://purl.org/syndication/history/1.0" xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z (old posts, page 29)</title>
  <id>http://cestlaz.github.io/index-29.atom</id>
  <updated>2018-09-19T23:47:48Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index-29.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-28.atom"/>
  <link rel="previous" type="application/atom+xml" href="http://cestlaz.github.io/index-30.atom"/>
  <link rel="current" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-30.atom"/>
  <link rel="prev-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-28.atom"/>
  <fh:archive/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/index-29.html"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>It feels good to be helpful</title>
    <id>http://cestlaz.github.io/posts/feels-good-to-be-helpful/</id>
    <updated>2017-05-17T19:12:03-04:00</updated>
    <published>2017-05-17T19:12:03-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/feels-good-to-be-helpful/"/>
    <summary type="html">&lt;p&gt;
I got some nice feedback today from a couple of disparate places. It
was another reminder that being a teacher isn't just about the kids
currently in your class but it's about who you are and everyone you
interact with. It's not just about teaching a subject but rather about
helping people get to where they can potentially go. 
&lt;/p&gt;

&lt;p&gt;
About a year ago I started putting together a &lt;a href="http://cestlaz.github.io/posts/using-emacs-introduction"&gt;series of posts and videos&lt;/a&gt; showing
how I use Emacs. There were a couple of motivating factors. One, I
wanted to put together some resources for my students - something that
would take them from the Emacs tutorial to a point where they would
hopefully see the power of the environment and not buy into the IDE or
editor of the month hype but either really use Emacs proficiently or
use another editor (Atom, Vim) in a similar fashion.
&lt;/p&gt;

&lt;p&gt;
The other reason was that I wanted to give something back to the
Emacs community. I don't create Emacs packages or otherwise contribute
but I figured, I'm a teacher, I can do what I do.
&lt;/p&gt;

&lt;p&gt;
So, earlier today I got an email thanking me for my videos and also
noticed that over on &lt;a href="http://irreal.org/blog/?p=6218"&gt;irreal.org&lt;/a&gt;, jcs wrote about moving over to
dumb-jump after seeing one of my videos. It's been nice seeing that
I've been of some value to jcs since I've learned a lot from his
blog. Emails, comments, and notes like this have driven me to continue
the series (even though It's been a busy couple of months). It's
gratifying that even without writing a line of code, one can give
something back to a community that they've found value in for years.
&lt;/p&gt;

&lt;p&gt;
A month or so ago, I had a chat with a former student who's finishing
up his last year in college. He was having trouble finding a job, I
couldn't figure out why he wasn't getting offers - he's really
talented. I tried to give him words of encouragement and reminded him
that I was available to help him - as I try to be for the entire
"family" in any way I could.
&lt;/p&gt;

&lt;p&gt;
Fast forward to today - I got an email telling me that he got a job
that he's very excited about. He felt the interviews with this company
were going well so he was waiting for them to resolve before reaching
out to me. He also told me that our talk was very helpful to him. 
&lt;/p&gt;

&lt;p&gt;
Sometimes it's not just in a class where we can have a positive effect
but sometimes just a talk on the side. Sometimes many years later.
&lt;/p&gt;</summary>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Learning about VC</title>
    <id>http://cestlaz.github.io/posts/learning_about_vc/</id>
    <updated>2017-05-05T08:57:15-04:00</updated>
    <published>2017-05-05T08:57:15-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/learning_about_vc/"/>
    <summary type="html">&lt;style&gt;
.figure-number {
    display: none;
}
&lt;/style&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/peter-boyce-talk.jpg" alt="peter-boyce-talk.jpg" align="center" height="250"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Peter Boyce imparting VC Wisdom on the Daedalus Scholars&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Yesterday, the Daedalus Scholars were visited by &lt;a href="https://twitter.com/badboyboyce"&gt;Peter Boyce&lt;/a&gt;. Peter's
been a friend for years and is my go to guy when I'm looking talk
startups, venture capital and many things tech. Peter's with General
Catalyst Partners and is a co-founder of &lt;a href="http://www.roughdraft.vc/"&gt;Rough Draft Ventures&lt;/a&gt; - a fund
that invests in student entrepreneurs.
&lt;/p&gt;

&lt;p&gt;
I'm teaching Hunter's first class of Daedalus Scholars - Hunter's new
CS Honors program. They're young and just getting their feet wet and
have unlimited potential and possibilities in front of  them. It helps if
they have some idea as to what some of those possibilities can be. 
&lt;/p&gt;

&lt;p&gt;
Everyone knows you can work for a big tech company or a bank but few
really know or understand how the tech startup ecosystem works. That's
why I was so excited when Peter agreed to visit.
&lt;/p&gt;

&lt;p&gt;
Peter talked about his path. About how he and a group of friends,
while in college, got together once night a week to work on their own
projects. Not on problem set, assignments, or studying but
specifically to work on something else. He talked about struggling to
balance grades, early projects and relationships and how much he
learned and grew from the experience. He talked about his path to
being a VC and he told the class about possibilities.
&lt;/p&gt;

&lt;p&gt;
If the class left one tenth as inspired as I was the day was a
resounding success. Based on the brief conversations I had with a few
of my students after class and last night on email, I'm pretty sure it
was.
&lt;/p&gt;

&lt;p&gt;
One thing that struck me was what Peter seemed to be most proud of was
his ability to help others realize their goals and their dreams. I've
gotten to know a few venture capitalists and investors over the years
and the ones I like and identify best with seem to have this
trait. They're investing in people. I seem to recall &lt;a href="http://twitter.com/fredwilson"&gt;Fred Wilson&lt;/a&gt;, a VC
I very much admire telling me that when talking to young entrepreneurs
he very much looks at the people as much (maybe more) than the
product. The product might not be right but if the people and team
are, at some point they'll hit. 
&lt;/p&gt;

&lt;p&gt;
As a teacher, my whole career has been about trying to enable
others. I spent a lot of time yesterday thinking about the parallels
between some of the investors that I know, like, and respect and the
best teachers I know and while we work in very different arenas, in
some ways we're driven by similar voices.
&lt;/p&gt;</summary>
    <category term="startups" label="startups"/>
  </entry>
  <entry>
    <title>Using Emacs - 33 - projectile, dumb-jump</title>
    <id>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</id>
    <updated>2017-04-28T08:00:26-05:00</updated>
    <published>2017-04-28T08:00:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/"/>
    <summary type="html">&lt;div id="outline-container-org9d4e149" class="outline-2"&gt;
&lt;h2 id="org9d4e149"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d4e149"&gt;
&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href="https://github.com/ericdanan/counsel-projectile"&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; projectile&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;projectile-global-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;projectile-completion-system&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel-projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;counsel-projectile-on&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it's a
git or other source control repo, if it's created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;b&gt;&lt;b&gt;.projectile&lt;/b&gt;&lt;/b&gt; in
the root directory of the project.
&lt;/p&gt;

&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;

&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;b&gt;&lt;b&gt;which-key&lt;/b&gt;&lt;/b&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;

&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href="http://projectile.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The other package I show is &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;. It's basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;

&lt;p&gt;
Here's my current config:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"M-g o"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g x"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external-other-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-selector&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="c1"&gt;;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dumb-jump-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wBfZzaff77g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org771aaa5" class="outline-2"&gt;
&lt;h2 id="org771aaa5"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org771aaa5"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>A new first language? What's the follow up plan?</title>
    <id>http://cestlaz.github.io/posts/first-language-changing/</id>
    <updated>2017-04-21T14:46:07-04:00</updated>
    <published>2017-04-21T14:46:07-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/first-language-changing/"/>
    <summary type="html">&lt;div id="outline-container-org8cde2cc" class="outline-2"&gt;
&lt;h2 id="org8cde2cc"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8cde2cc"&gt;
&lt;p&gt;
This morning, &lt;a href="https://twitter.com/guzdial"&gt;Mark Guzdial&lt;/a&gt; wrote about Stanford possibly &lt;a href="https://computinged.wordpress.com/2017/04/21/cs-department-updates-introductory-courses-java-is-gone/"&gt;moving away
from Java&lt;/a&gt; as their intro language. This comes on the heels of a
semi-regular thread on one of the lists I'm on asking about what
languages are used at assorted colleges around the country. Invariably
the Pascal -&amp;gt; C++ -&amp;gt; Java progression of APCS turns up in these
threads.
&lt;/p&gt;

&lt;p&gt;
There are plenty of arguments to be made both for and against pretty
much any language or platform. There's no single best universal
answer. Each choice giveth and each choice taketh away. 
&lt;/p&gt;

&lt;p&gt;
What I'm really curious about is who's looking at intro languages in
the context of complete programs or even complete educations that
could span multiple institutions.
&lt;/p&gt;

&lt;p&gt;
Early language choices can make a big difference in engaging and
exciting newcomers but there are ramifications later on that few seem
to consider.
&lt;/p&gt;

&lt;p&gt;
Take the APCS change from C++ to Java. It removed memory management
from the first year course. It also simplified issues relating to
pass by value vs pass by reference (or, rather, passing address by
value), bought much more strongly into OOP and moved more towards
using built in implementations of data structures like Lists rather
than rolling your own.
&lt;/p&gt;

&lt;p&gt;
Removing memory management from the first year course in and of itself
isn't a problem as long as it's taught and taught effectively
somewhere later on. It could be argued that "memory is already covered
in our required systems course." That could be the case, but there are
many concepts that kids don't get the first time around. Is an
institution that covered memory management in CS1/2 and then came back
to it in a later Systems course giving their students the same
understanding now that they've eliminated the CS1/2 experience? 
&lt;/p&gt;

&lt;p&gt;
What about OOP buy in. Personally, I've never been a big OOP fan but
that's neither here nor there. What I have found is that depending on
how a student is exposed to programming in CS1/CS2 can have a big
influence on how they approach problems later. Did the move to Java
cause more of our students to try to use shoehorn OOP into a problem
that really shouldn't be approached in an OOP manner?
&lt;/p&gt;

&lt;p&gt;
I suspect that the use of built in data structures has had a
negative impact. A few years after the switch to Java, I was talking
to a senior tech worker. He was having a bad day - interviewing
potential internees and full time engineers. My friend was complaining
that the kids couldn't come up with solutions to what he thought were
pretty straightforward questions. He felt that had the kids actually
implemented algorithms like the nlogn sorts rather than just learning
java .sort method and just talking about the algorithm they'd be
better prepared. I've heard this sentiment repeated over and over
throughout the years.
&lt;/p&gt;

&lt;p&gt;
This is not to say that Java is a horrible language or horrible for
teaching - that's another debate. The point is that you can't just
look at the intro class and who it draws in. You have to consider how
it will prepare students for the next level and you have to look at
the big picture – will our students get everything they need by the
time they leave us.
&lt;/p&gt;

&lt;p&gt;
Many schools have moved to Python. Will that effect students take on
type systems later on? Will the flexibility and constructs like list
comprehensions make it harder to teach recursion since there are
"easier" ways to do it? 
&lt;/p&gt;

&lt;p&gt;
None of these are really problems so long as the CS1/2 (or even CS0)
isn't taught in a vacuum. 
&lt;/p&gt;

&lt;p&gt;
I fear, however that too often we're paying attention to the intake of
the pipe and not so much the output.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="langauges" label="langauges"/>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
  <entry>
    <title>GitHub as a tool for education</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-github-4/</id>
    <updated>2017-04-11T19:11:30-04:00</updated>
    <published>2017-04-11T19:11:30-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-github-4/"/>
    <summary type="html">&lt;p&gt;
When I started using git and GitHub with my students it was a natural
progression having started with started with CVS and then, as
technology changed moving through Subversion and then Mercurial. It
was all about using sensible professional software development
techniques while making it easier for students to submit work and for
me to evaluate their submissions.
&lt;/p&gt;

&lt;p&gt;
Over time, I found that git and GitHub in fact provided some extra
support for educators right out of the box.
&lt;/p&gt;

&lt;p&gt;
In my &lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-3"&gt;last github post&lt;/a&gt; I talked about using the results of &lt;code&gt;git log&lt;/code&gt;
and looking at diffs. Both provide ways of seeing what a student did
and when. The commit log and history make it easier to hold students accountable to working
through a project and not leavings for the last minute. The diffs make
it easier to see what's changed both to see progress and also to help
support students as they develop their projects.
&lt;/p&gt;

&lt;p&gt;
If you use Emacs, as I do, you can use the &lt;a href="https://github.com/pidu/git-timemachine"&gt;git timemachine&lt;/a&gt; package
which does a great job visualizing changes:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-github/timemachine.gif" alt="timemachine.gif" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Other editors might have a similar feature.
&lt;/p&gt;

&lt;p&gt;
The contribution graphs also provide a quick snapshot which shows what
team members are contributing and when:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-github/githubgraph.png" alt="githubgraph.png" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The punchcard graph is also useful to see when students actually do
their work.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-github/githubgraph2.png" alt="githubgraph2.png" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
GitHub also make it easy to set up starter code or to have students
"take over" each others projects by forking.
&lt;/p&gt;

&lt;p&gt;
I'm very happy using git and GitHub as is but if you want more
support, check out &lt;a href="https://classroom.github.com/"&gt;GitHub Classroom&lt;/a&gt;. Had it existed when I started,
I'd probably have used it but since I had already gotten used to my
work flows I've stuck with raw git and github.
&lt;/p&gt;

&lt;p&gt;
In case you missed the earlier posts describing the process I use to
introduce github to my classes here they are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-1"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-2"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-3"&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'm hoping some of you have found this set of four posts useful or at
least interesting.
&lt;/p&gt;</summary>
    <category term="pedagogy" label="pedagogy"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>A free multi-state clicker with built in redundency</title>
    <id>http://cestlaz.github.io/posts/thumb_clickers/</id>
    <updated>2017-04-01T17:23:21-04:00</updated>
    <published>2017-04-01T17:23:21-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/thumb_clickers/"/>
    <summary type="html">&lt;div id="outline-container-orgbf38cb1" class="outline-2"&gt;
&lt;h2 id="orgbf38cb1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf38cb1"&gt;
&lt;p&gt;
Last Friday, &lt;a href="https://twitter.com/guzdial"&gt;Mark Guzdial&lt;/a&gt; wrote about the woes of &lt;a href="https://computinged.wordpress.com/2017/03/31/the-need-for-better-software-and-systems-to-support-active-cs-learning/%0A"&gt;using clickers&lt;/a&gt; in a
class. The amount of effort required to use his school's approved
clicker technology sounds ridiculous so while we need tools to better
engage students in large class settings we need better tools that can
be integrated into our classes more easily.
&lt;/p&gt;

&lt;p&gt;
I've never used clickers. On top of stories like Mark's, there are  a
number of problems with using clickers in a public school.
&lt;/p&gt;

&lt;p&gt;
You can't force students to buy them and in NYC, until recently,
students couldn't use their phones (which they also might not have).
Forgetting the expense, if the school provides them, is it one per
student? If so, who's going to administer the clicker to student
mapping and how will that be communicated to the teachers. If college
tech infrastructures are sometimes lacking, high schools are orders of
magnitudes worse. The resources just aren't there. Then we have to
deal with loss and breakage.
&lt;/p&gt;

&lt;p&gt;
If a teacher somehow gets a class set of clickers, they have to deal
with mapping clickers to students for all of their classes and make
sure the right student has the right clicker. Again, loss  and
breakage is a problem.
&lt;/p&gt;

&lt;p&gt;
Then you have to create the question content and hope that everything
works in class.
&lt;/p&gt;

&lt;p&gt;
The value added given the overhead just doesn't seem worth it
particularly since high school classes, while large, are not in the
hundreds and there are other methods of student engagement.
&lt;/p&gt;

&lt;p&gt;
Here's what I use instead. It's not perfect but it's low cost and low
effort with a pretty high return.
&lt;/p&gt;

&lt;p&gt;
The basic configuration, is a simple three state broadcast device.
&lt;/p&gt;

&lt;p&gt;
It's not without its problems and I don't think it would work as well
in a large lecture but given the cost, it's well worth it.
&lt;/p&gt;

&lt;p&gt;
So, what is it?
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/thumbs/fonzup.jpg" alt="fonzup.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Thumbs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org038e1e6" class="outline-2"&gt;
&lt;h2 id="org038e1e6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org038e1e6"&gt;
&lt;p&gt;
Periodically, I'll poll my class.
&lt;/p&gt;

&lt;span&gt;
&lt;img width="30%" src="http://cestlaz.github.io/img/thumbs/sidethumb.png"&gt;
&lt;img width="30%" src="http://cestlaz.github.io/img/thumbs/upthumb.jpg"&gt;
&lt;img width="30%" src="http://cestlaz.github.io/img/thumbs/downthumb.jpg"&gt;


&lt;p&gt;
Thumb to the side? Everything's OK. Keep going as you're going. I get
it. Basically, things are good.
&lt;/p&gt;

&lt;p&gt;
Thumb up? Speed up, you're going too slow, I got it five minutes ago or
some similar big positive.
&lt;/p&gt;

&lt;p&gt;
Thumb down? I have no idea what you're talking about.
&lt;/p&gt;

&lt;p&gt;
It's cheap, easy, quick, and once you can get your class to buy in,
you can get a quick sense of the class.
&lt;/p&gt;

&lt;p&gt;
The downsides?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The class has to have a level of comfort so that students vote
honestly and don't just give you positive feedback.&lt;/li&gt;
&lt;li&gt;No data collection.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
The upsides?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;quick&lt;/li&gt;
&lt;li&gt;cheap&lt;/li&gt;
&lt;li&gt;works on any topic on the fly&lt;/li&gt;
&lt;li&gt;even if the votes are artificially skewed towards positive, it does
forces the class to be at least a little attentive and to engage in
some physical response&lt;/li&gt;
&lt;li&gt;can get analog responses by allowing students to adjust wrist
rotation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As to the redundancy? I've never had a kid leave their thumb at home
or lose it and even if they did, they've got a second hand.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/thumbs/fonztwo.jpg" alt="fonztwo.jpg" align="center" height="200"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
This also works in extreme environments. Try using a clicker or mobile
app with gloves or mittens on or underwater.
&lt;/p&gt;

&lt;p&gt;
I don't teach large lectures so I don't know how this would work in a
huge class. I'd imagine it's still worth it given that it's so low
friction and low cost of entry even if it's not perfect.
&lt;/p&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="pedagogy" label="pedagogy"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>SIGCSE 2017 - a path to github part 3</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-github-3/</id>
    <updated>2017-03-30T14:02:31-04:00</updated>
    <published>2017-03-30T14:02:31-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-github-3/"/>
    <summary type="html">&lt;div id="outline-container-orgefcea77" class="outline-2"&gt;
&lt;h2 id="orgefcea77"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgefcea77"&gt;
&lt;p&gt;
I wanted to write this up earlier but, as so frequently happens all my
dormant work projects decided it was time to rise up and demand
instant attention.
&lt;/p&gt;

&lt;p&gt;
When we left off, we had students pulling code and submitting homework
via github.
&lt;/p&gt;

&lt;p&gt;
Form here, it's an easy step to have them working on a small project
in their own repo. In fact, sometimes, I'll jump right to a two person
project where one person creates the repo and invites the other (and
me) as a collaborator.
&lt;/p&gt;

&lt;p&gt;
Once here, it's important to emphasize the normal workflow:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;edit stuff with an occasional &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt;,  or &lt;code&gt;got mv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;and an occasional &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Regardless of how much you emphasize the workflow you're now going to
have to cover merges as well how to recover from problems by going to
an earlier revision.
&lt;/p&gt;

&lt;p&gt;
For going back to earlier versions or otherwise recovering from
disasters, I don't show them the "right" way of doing things. I show
them a way that's easy to remember and reliably works without tons of
searching for answers.
&lt;/p&gt;

&lt;p&gt;
First, given some repo, I have them clone a version under another
name:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:hunterdaedalus/classcode.git newdirname
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now, they have the original repo and a clone under the directory
&lt;b&gt;&lt;b&gt;newdirname&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
I have them go into that new copy and use &lt;code&gt;git log&lt;/code&gt; to go through the
logs to find an earlier version that they want to go back to.
&lt;/p&gt;

&lt;p&gt;
The log will look something like this:
&lt;/p&gt;

&lt;p class="verse"&gt;
commit 67eceb5e0a01ca5f5fb54ace65a4fe134f71edae&lt;br&gt;
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;&lt;br&gt;
Date:   Sat Feb 25 12:32:26 2017 -0500&lt;br&gt;
&lt;br&gt;
    updated Makefile&lt;br&gt;
&lt;br&gt;
commit 7efed10eb6015276b0cb82874ce786dc68a683ae&lt;br&gt;
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;&lt;br&gt;
Date:   Sat Feb 25 08:45:34 2017 -0500&lt;br&gt;
&lt;br&gt;
    broke out main –&amp;gt; main and shapes&lt;br&gt;
&lt;br&gt;
commit e8b5c240123a7cb17920d52b4aba9cf5787ddab2&lt;br&gt;
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;&lt;br&gt;
Date:   Sat Feb 25 08:36:29 2017 -0500&lt;br&gt;
&lt;br&gt;
    added lab3 code&lt;br&gt;
&lt;br&gt;
commit 6d5bcf866306334ddc5c6a48e8f49fb39ddbcb18&lt;br&gt;
Author: Some other coder &amp;lt;somone@somewhere.net&amp;gt;&lt;br&gt;
Date:   Sun Feb 19 19:29:51 2017 -0500&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;
Find the hash that they want to get back to and &lt;b&gt;&lt;b&gt;checkout&lt;/b&gt;&lt;/b&gt; that
version (you normally only have to use the first few characters of
the hash):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout 7efed10
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now they can grab what they want, copy it into the working copy of the
repo, &lt;b&gt;&lt;b&gt;commit&lt;/b&gt;&lt;/b&gt; the changes and &lt;b&gt;&lt;b&gt;push&lt;/b&gt;&lt;/b&gt; them back.
&lt;/p&gt;


&lt;p&gt;
For Merging, I start by having them do it manually. I'll have them
load the file in question into their editor and look for the chunks
that look like this:
&lt;/p&gt;

&lt;p class="verse"&gt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; A&lt;br&gt;
lines in file A&lt;br&gt;
&lt;code&gt;=====&lt;/code&gt;&lt;br&gt;
lines in file B&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; B&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
They'll manually make the changes, then save, commit and push back.
&lt;/p&gt;

&lt;p&gt;
Later, I'll show them a couple of tools to help along the way. I
usually show ediff in emacs along with meld.
&lt;/p&gt;

&lt;p&gt;
Once they've been doing this for a while, it's easy to expand group
sizes. After that, I'll introduce &lt;b&gt;&lt;b&gt;issues&lt;/b&gt;&lt;/b&gt; via the github interface.
&lt;/p&gt;

&lt;p&gt;
The last big topic is branches.
&lt;/p&gt;

&lt;p&gt;
First I show basic branches and merging. Here's a pretty good &lt;a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"&gt;run
through&lt;/a&gt;. Afterwards, I'll show how branching works in conjunction with
github. This is also a good time to emphasize that students have to
actually read the messages that git gives them when things don't  go
well. In most cases, the message will contain the exact thing to type
to fix the problem (such as linking a branch with a branch up on
github).
&lt;/p&gt;

&lt;p&gt;
Now is also the time to introduce pull requests and how to use them to
support code review. The general setup I recommend is one branch per
group member and a main "deployment" branch with group members
creating more branches as they see fit.
&lt;/p&gt;

&lt;p&gt;
That's about it. I've followed this process, more or less, over a
semester, over a year, and over multiple years. It's worked for me, I
hope some of this helps you as well.
&lt;/p&gt;

&lt;p&gt;
In the next and probably last git/github post I'll talk about the
educational benefits that I've discovered along the way. After that,
I'll get back to some emacs videos, other SIGCSE stuff and my normal rants.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>SIGCSE 2017 - a path to github part 2</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-github-2/</id>
    <updated>2017-03-19T10:11:00-04:00</updated>
    <published>2017-03-19T10:11:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-github-2/"/>
    <summary type="html">&lt;div id="outline-container-org9cc6588" class="outline-2"&gt;
&lt;h2 id="org9cc6588"&gt;Note:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9cc6588"&gt;
&lt;p&gt;
Just for some quick context. The process I started to describe in the
last post and continue here chronicles what I did at Stuy with high
schoolers. Now that I'm at Hunter college, I'm adapting the process
but the overarching themes remain the same.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc993bab" class="outline-2"&gt;
&lt;h2 id="orgc993bab"&gt;Post starts here:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc993bab"&gt;
&lt;p&gt;
Now that your students have been pulling the classcode repo regularly
it's time to move to the next step - adding and pushing files to a
repo.
&lt;/p&gt;

&lt;p&gt;
I don't claim to do this the "right way" or the best way but it's
worked for me and it's gotten my students up to speed.
&lt;/p&gt;

&lt;p&gt;
I ease my students into adding and pushing files using git through
homework submission. I create a single repo, usually named
&lt;b&gt;&lt;b&gt;submissions&lt;/b&gt;&lt;/b&gt; and make a folder for each student underneath looking
something like this:
&lt;/p&gt;
&lt;p class="verse"&gt;
.&lt;br&gt;
└── submissions&lt;br&gt;
    ├── abram_sarah&lt;br&gt;
    ├── chen_stuart&lt;br&gt;
    └── thompson_steve&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
Before going any further, let me clear up one thing. The repo is
public so all the students have access to each others work. I'm OK
with that. We could have each student make their own repo and use git
&lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodules&lt;/a&gt; to make a submissions repo but administration is much
trickier and we lose the chance to build a culture of cooperation and
trust. We can lock down our submission systems as much as we want. If
students want to share assignments there's nothing we can do about
it. 
&lt;/p&gt;

&lt;p&gt;
My preference is to try to build a culture that minimizes bad
behavior and rewards good behavior. I'd rather see an incorrect
homework so that I can tell what we need to work on than a copied
perfect assignment. I'd rather see students cite each other, share
properly, and support each other than copy in the shadows. 
&lt;/p&gt;

&lt;p&gt;
I'm not naive enough to believe that copying doesn't happen in my
classes but I still prefer erring on the side of openness.
&lt;/p&gt;

&lt;p&gt;
Once the repo is set up, I give all the students access. This is a
little onerous since I have to type each of their GitHub usernames
under the collaborators section of the submissions repo but I only
have to do this once a semester.
&lt;/p&gt;

&lt;p&gt;
Then I teach the workflow. Assignments go into a file or folder under
their directory named ##_name where ## is the assignment number
(01,02,03, etc) and name is the assignment name. The student workflow
is:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git add (sometimes)&lt;/li&gt;
&lt;li&gt;git commit&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Since every student is working in their own directory, things
basically work.
&lt;/p&gt;

&lt;p&gt;
The first issue that students come up with is when another student
pushes before another student. The second student merely has to do
another &lt;b&gt;&lt;b&gt;git pull&lt;/b&gt;&lt;/b&gt; before proceeding. This provides an easy
introduction to dealing with the distributed nature of git.
&lt;/p&gt;

&lt;p&gt;
There will occasionally be other issues when students don't follow
procedure exactly so I'll have to fix the repo every now and then but
nothing too bad and each time is a opportunity to show the class:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;you can pretty much always restore and fix things once you commit
them.&lt;/li&gt;
&lt;li&gt;the specifics to fix things.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
There will be a few bumps in the road but after a few assignments the
sailing will be pretty smooth.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, the students are a little closer to being fully
fluent using git, they're hopefully using each others code as
resources but in a proper way and since the students are all using a
consistent assignment naming convention I can use simple scripts and
shell commands to do all sorts of processing on assignments.
&lt;/p&gt;

&lt;p&gt;
That's the end of phase two. The next step  brings us to small
projects using git.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>SIGCSE 2017 - a path to github part 1</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-github-1/</id>
    <updated>2017-03-16T09:11:00-04:00</updated>
    <published>2017-03-16T09:11:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-github-1/"/>
    <summary type="html">&lt;div id="outline-container-orgc50466b" class="outline-2"&gt;
&lt;h2 id="orgc50466b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc50466b"&gt;
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes. 
&lt;/p&gt;

&lt;p&gt;
This series is not meant to be a git or &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I've linked to below).  This is
about the process I use with my students to get them up to speed. 
&lt;/p&gt;

&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool. 
&lt;/p&gt;

&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I'll talk about that at the end of the
series.
&lt;/p&gt;


&lt;p&gt;
Here's part one. 
&lt;/p&gt;

&lt;p&gt;
I'm doing this with git and GitHub but there's no reason why other
systems and hosts can't be used. I'd also recommend that any educator
or student sign up for the assorted &lt;a href="https://education.github.com/"&gt;discounts&lt;/a&gt; offered by GitHub.
&lt;/p&gt;

&lt;p&gt;
I've followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc9554db" class="outline-2"&gt;
&lt;h2 id="orgc9554db"&gt;Step 1 - code distribution&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc9554db"&gt;
&lt;p&gt;
To start, I don't even talk about version control. We start with code
distribution. For years, I've looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments. 
&lt;/p&gt;

&lt;p&gt;
I've tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.
&lt;/p&gt;

&lt;p&gt;
At Stuy, we've always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.
&lt;/p&gt;

&lt;p&gt;
Uploading to a CMS system was also problematic - I'm a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.
&lt;/p&gt;

&lt;p&gt;
Enter git. Now, of course, if you're going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://try.github.io/"&gt;https://try.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0fKg7e37bQE"&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href="https://classroom.github.com/"&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don't use it because, as I said,
I'm an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I'd take some time to look at their
current offerings before jumping in.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org44fc637" class="outline-3"&gt;
&lt;h3 id="org44fc637"&gt;Set up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org44fc637"&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;This&lt;/a&gt; help page
has more information. You'll want to register an ssh key from every
machine you use - home, work, laptop. 
&lt;/p&gt;


&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;b&gt;&lt;b&gt;classcode&lt;/b&gt;&lt;/b&gt;. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; when creating the repo, make sure to
check the "initialize this repository with a README" box. If you don't
you'll be given a set of instructions on how to set things up once you
click &lt;b&gt;&lt;b&gt;Create repository&lt;/b&gt;&lt;/b&gt; but it's easier and easier to follow if
you start with an initialized repo with a README.
&lt;/p&gt;

&lt;p&gt;
I make the repo public – it's code I'm distributing – nothing to
hide here. If you aren't comfortable with that, just make the repo
private. If you've registered as a teacher with GitHub, you can set up
an organization and you'll be able to set up free private repos within
it. The other downside here is that you'll have to individually give
each student access to the repo. That's a mild annoyance but it only
has to be done once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org047ce71" class="outline-3"&gt;
&lt;h3 id="org047ce71"&gt;Teacher use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org047ce71"&gt;
&lt;p&gt;
Next, clone out the repo. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;b&gt;&lt;b&gt;clone&lt;/b&gt;&lt;/b&gt; button, it says "Clone with SSH." If not, just
click the "Use SSH" link in the same box. Students will clone the
using https.
&lt;/p&gt;

&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git pull&lt;/b&gt;&lt;/b&gt; at the start of class&lt;/li&gt;
&lt;li&gt;write code throughout class&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git add&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;git commit&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git push&lt;/b&gt;&lt;/b&gt; at the end of class&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I use a similar flow when I want to add files in my office or at home.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2427b82" class="outline-3"&gt;
&lt;h3 id="org2427b82"&gt;Student use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2427b82"&gt;
&lt;p&gt;
From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;b&gt;&lt;b&gt;git
pull&lt;/b&gt;&lt;/b&gt;. That's all there is to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8d37a9b" class="outline-3"&gt;
&lt;h3 id="org8d37a9b"&gt;Thoughts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8d37a9b"&gt;
&lt;p&gt;
That's it. The kids are now using GitHub – they're probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;b&gt;&lt;b&gt;git status&lt;/b&gt;&lt;/b&gt;,
&lt;b&gt;&lt;b&gt;git log&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git diff&lt;/b&gt;&lt;/b&gt; to set the stage for step 2 of this
process and beyond.
&lt;/p&gt;

&lt;p&gt;
Since the students aren't adding, committing or pushing, you probably won't
get any errors. 
&lt;/p&gt;

&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven't pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.
&lt;/p&gt;


&lt;p&gt;
I'm happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.
&lt;/p&gt;

&lt;p&gt;
The next step  is having the students add files to a repo. That's the
next post in this series.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>SIGCSE 2017 - Recap</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-recap/</id>
    <updated>2017-03-14T08:19:18-04:00</updated>
    <published>2017-03-14T08:19:18-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-recap/"/>
    <summary type="html">&lt;div id="outline-container-org63383fc" class="outline-2"&gt;
&lt;h2 id="org63383fc"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org63383fc"&gt;
&lt;p&gt;
As a high school teacher, I was never able to attend SIGCSE, the
conference of the ACM's Special Interest Group on Computer Science
Education. Between the number of instructional days I would lose and
the cost, I could never justify going. Instead I looked over the
proceedings and read many of the papers.
&lt;/p&gt;

&lt;p&gt;
Now that I'm at Hunter, I was finally able to attend. This year in
Seattle, the conference ran from Wednesday through Saturday. I was
part of a panel on "Tools we can't live without." Over the next few
weeks, I hope to blog about a number of things I thought and talked
with people about over the conference including:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The path I use to teach git and why GitHub a good teaching tool
(my talk).&lt;/li&gt;
&lt;li&gt;The relationship of different CS Ed stakeholders - teachers,
researchers, organizations, etc.&lt;/li&gt;
&lt;li&gt;Teaching at the high school level vs college - perceptions and
reality.&lt;/li&gt;
&lt;li&gt;The challenges of tech tool adoption in schools.&lt;/li&gt;
&lt;li&gt;What's going on in K12 CS Certification.&lt;/li&gt;
&lt;li&gt;Maybe some other stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Today, some overall thoughts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2ab4451" class="outline-2"&gt;
&lt;h2 id="org2ab4451"&gt;The good&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2ab4451"&gt;
&lt;p&gt;
As with many conferences, the "hallway track" along with receptions
sponsored by &lt;a href="https://csnyc.org/our-work/cs4all"&gt;the CS4All consurtium&lt;/a&gt;, &lt;a href="http://tealsk12.org"&gt;TEALS&lt;/a&gt;, &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; were terrific. I
was able to finally meet in person many people who I've only known
virtually and got to know many more as well. I left the conference
with a much larger address book and a long list of follow up
items. Being in Seattle, I also enjoyed being able to spend time with
people from &lt;a href="http://tealsk12.org"&gt;TEALS&lt;/a&gt; and &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt;, two of the CS Ed groups working hard
to do some real good (yes - I do like and support these guys even
though I call them out on things I disagree with, but that's the
subject of another post). 
&lt;/p&gt;

&lt;p&gt;
I attended sessions on CS certification, teacher preparation,
assessments, POGIL based instruction to name a few. They ranged from
valuable to interesting and to be honest, a couple of "what were they
thinking" but the overall experience was very much worth the trip. I
also got to speak to a number of wonderful students at the
poster sessions.
&lt;/p&gt;

&lt;p&gt;
The keynotes are also well worth a read (sorry if you don't have ACM
digital library access). &lt;a href="http://dl.acm.org/citation.cfm?id=3025045&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Jeannette Wing&lt;/a&gt; talked about the importance of
probability and statistics in CS Ed, and aspects of  &lt;a href="http://dl.acm.org/citation.cfm?id=3025047&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Gail Chapman&lt;/a&gt;'s talk
"Inspire, Innovate, and Improve…" keynote and &lt;a href="http://dl.acm.org/citation.cfm?id=3025046&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Mitch Resnick&lt;/a&gt;'s
"Fulfilling Papert's Dream" both spoke to the educator inside me. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org55b46a4" class="outline-2"&gt;
&lt;h2 id="org55b46a4"&gt;The bad&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org55b46a4"&gt;
&lt;p&gt;
The biggest downside to me was that I found very little value added in
a number of the paper sessions over just reading the papers. Part of
this is probably because of my own over-inflated expectations given the
number of years I've waited to attend. Part of it though, was the fact
that sessions were so tightly packed that I didn't have time to follow
up with presenters before having to run to the next
thing. Unfortunately, in some
cases, it was because the presenter merely
"read" the paper much as a professor sometimes just reads the slides
or the book to his class.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbb653d8" class="outline-2"&gt;
&lt;h2 id="orgbb653d8"&gt;Other thoughts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbb653d8"&gt;
&lt;p&gt;
One paper presentation I very much liked was &lt;a href="http://dl.acm.org/citation.cfm?id=3017701&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Exam Wrappers: Not a
Silver Bullet&lt;/a&gt; presented by &lt;a href="https://michellecraig.github.io/"&gt;Michelle Craig&lt;/a&gt; and &lt;a href="http://pages.cpsc.ucalgary.ca/~bdstephe/"&gt;Ben Stephenson&lt;/a&gt;. I
actually came in late since I was hustling over from the Code.org
lunch. The result was that I didn't actually know what "Exam Wrappers"
were until well after the talk when I ran into &lt;a href="https://twitter.com/jkhuggins"&gt;Jim Huggins&lt;/a&gt;. Exam
wrappers, in short, are merely when you require the students fill out something
for some credit when picking up their exams. The funny thing is that
it's a strategy that high school teachers have used for years without
a special name and we already knew the good and bad of it without the
research but that's not what I want to get at here. What I loved about
the talk, besides the fact that Ben and Michelle are clearly strong
presenters is that this was a negative result that was being
presented. I also loved the fact that they didn't present their
research as gospel but rather pointed out the strengths and weaknesses
of their approach - they made a case to what and why we should pay
attention to and what should be taken with a grain of salt.
&lt;/p&gt;

&lt;p&gt;
This was a major breath of fresh air after being exposed to so much
education 'research' over the course of my life that the author or
presenter felt was just as strong as a mathematical proof rather than
an indication based on a specific experience or small set of
experiences.
&lt;/p&gt;

&lt;p&gt;
I also felt a little weird at times during the week when west coast people seemed
to know me. I know I'm a loud mouthed curmudgeon and I go on my
periodic ed rants but given the dearth of comments on this blog I was
really surprised to get as many as "great to meet you in person after
reading your blog" or "we know you and your work" all week. It was
weird and somewhat humbling.
&lt;/p&gt;

&lt;p&gt;
Finally, another highlight f`or me was that I got to catch up with
some of family.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-seattle.jpg" alt="sigcse-seattle.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Already planning to submit something to present at SIGCSE 2018 in Baltimore.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="csed" label="csed"/>
    <category term="cseducation" label="cseducation"/>
    <category term="teaching-cs" label="teaching cs"/>
  </entry>
</feed>
